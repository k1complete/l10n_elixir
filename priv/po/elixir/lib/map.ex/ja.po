msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-05-20 21:54+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Map.new()
#: lib/map.ex:23
msgid "Returns a new empty map.\n"
msgstr "新しい空のマップを返します。\n"

#. TRANSLATORS: def Map.from_struct(struct)
#: lib/map.ex:60
msgid ""
"Converts a struct to map.\n"
"\n"
"It accepts the struct module or a struct itself and\n"
"simply removes the `__struct__` field from the struct.\n"
"\n"
"## Example\n"
"\n"
"    defmodule User do\n"
"      defstruct [:name]\n"
"    end\n"
"\n"
"    Map.from_struct(User)\n"
"    #=> %{name: nil}\n"
"\n"
"    Map.from_struct(%User{name: \"john\"})\n"
"    #=> %{name: \"john\"}\n"
"\n"
msgstr ""
"構造体をマップに変換します。\n"
"\n"
"構造体モジュールか構造体自身を受け付け、\n"
"単に、構造体から`__struct__`フィールドを取り除きます。\n"
"\n"
"## 例\n"
"\n"
"    defmodule User do\n"
"      defstruct [:name]\n"
"    end\n"
"\n"
"    Map.from_struct(User)\n"
"    #=> %{name: nil}\n"
"\n"
"    Map.from_struct(%User{name: \"john\"})\n"
"    #=> %{name: \"john\"}\n"
"\n"

#. TRANSLATORS: Elixir.Map Summary
#: lib/map.ex:1
msgid ""
"A Dict implementation that works on maps.\n"
"\n"
"Maps are key-value stores where keys are compared using\n"
"the match operator (`===`). Maps can be created with\n"
"the `%{}` special form defined in the `Kernel.SpecialForms`\n"
"module.\n"
"\n"
"For more information about the functions in this module and\n"
"their APIs, please consult the `Dict` module.\n"
msgstr ""
"マップで動作するDict実装です。\n"
"\n"
"マップは、キーをマッチオペレータ(`===`)で比較する、\n"
"キーバリューストアです。マップは、\n"
"`Kernel.SpecilForms`で定義された`%{}`スペシャルフォームで、\n"
"作成することができます\n"
"\n"
"このモジュールの関数と、そのAPIについての詳細は、`Dict`モジュール\n"
"を参照してください。\n"
