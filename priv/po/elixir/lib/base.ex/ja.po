msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2016-02-27 10:59+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Base.encode32(data, opts \\ [])
#: lib/base.ex:410
msgid ""
"Encodes a binary string into a base 32 encoded string.\n"
"\n"
"Accepts an atom `:upper` (default) for encoding to upper case characters or\n"
"`:lower` for lower case characters.\n"
"\n"
"Accepts `padding: false` option which will omit padding from\n"
"the output string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.encode32(\"foobar\")\n"
"    \"MZXW6YTBOI======\"\n"
"\n"
"    iex> Base.encode32(\"foobar\", case: :lower)\n"
"    \"mzxw6ytboi======\"\n"
"\n"
"    iex> Base.encode32(\"foobar\", padding: false)\n"
"    \"MZXW6YTBOI\"\n"
"\n"
msgstr ""
"バイナリ文字列を、base 32エンコード文字列に、エンコードします。\n"
"\n"
"大文字でのエンコードを行う`:upper`(デフォルト)、または、小文字でのエン\n"
"コードを行う`:lower`アトムを、case: オプションで受け付けます。\n"
"\n"
"`padding: false`オプションは出力文字列からパディングを除去します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.encode32(\"foobar\")\n"
"    \"MZXW6YTBOI======\"\n"
"\n"
"    iex> Base.encode32(\"foobar\", case: :lower)\n"
"    \"mzxw6ytboi======\"\n"
"\n"
"    iex> Base.encode32(\"foobar\", padding: false)\n"
"    \"MZXW6YTBOI\"\n"
"\n"

#. TRANSLATORS: def Base.decode32(string, opts \\ [])
#: lib/base.ex:439
msgid ""
"Decodes a base 32 encoded string into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters "
"or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"Accepts `padding: false` option which will ignore padding from\n"
"the input string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode32(\"MZXW6YTBOI======\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode32(\"mzxw6ytboi======\", case: :lower)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode32(\"mzXW6ytBOi======\", case: :mixed)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode32(\"MZXW6YTBOI\", padding: false)\n"
"    {:ok, \"foobar\"}\n"
"\n"
msgstr ""
"base 32エンコードされた文字列をバイナリ文字列へ\n"
"デコードします。\n"
"\n"
"大文字からデコードするアトム`:upper`(デフォルト)と、小文字からデコード\n"
"する`:lower`を受け付けます。混在した文字列に`:mixed`を与えることもでき\n"
"ます。\n"
"\n"
"`padding: false`オプションは入力文字列からパディングを無視します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.decode32(\"MZXW6YTBOI======\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode32(\"mzxw6ytboi======\", case: :lower)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode32(\"mzXW6ytBOi======\", case: :mixed)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode32(\"MZXW6YTBOI\", padding: false)\n"
"    {:ok, \"foobar\"}\n"
"\n"

#. TRANSLATORS: def Base.decode16(string, opts \\ [])
#: lib/base.ex:172
msgid ""
"Decodes a base 16 encoded string into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters "
"or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode16(\"666F6F626172\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode16(\"666f6f626172\", case: :lower)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode16(\"666f6F626172\", case: :mixed)\n"
"    {:ok, \"foobar\"}\n"
"\n"
msgstr ""
"base 16エンコードされた文字列をバイナリ文字列へ\n"
"デコードします。\n"
"\n"
"大文字からデコードするアトム`:upper`(デフォルト)と、\n"
"小文字からデコードする`:lower`を受け付けます。\n"
"混在した文字列に`:mixed`を与えることもできます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.decode16(\"666F6F626172\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode16(\"666f6f626172\", case: :lower)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode16(\"666f6F626172\", case: :mixed)\n"
"    {:ok, \"foobar\"}\n"
"\n"

#. TRANSLATORS: def Base.decode32!(string, opts \\ [])
#: lib/base.ex:472
msgid ""
"Decodes a base 32 encoded string into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters "
"or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"Accepts `padding: false` option which will ignore padding from\n"
"the input string.\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode32!(\"MZXW6YTBOI======\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode32!(\"mzxw6ytboi======\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode32!(\"mzXW6ytBOi======\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode32!(\"MZXW6YTBOI\", padding: false)\n"
"    \"foobar\"\n"
"\n"
msgstr ""
"base 32エンコードされた文字列をバイナリ文字列へ\n"
"デコードします。\n"
"\n"
"大文字からデコードするアトム`:upper`(デフォルト)と、小文字からデコード\n"
"する`:lower`を受け付けます。混在した文字列に`:mixed`を与えることもでき\n"
"ます。\n"
"\n"
"`padding: false`オプションは入力文字列からパディングを無視します。\n"
"\n"
"`ArgumentError`例外は、パディングが不正、あるいは、文字列に\n"
"非アルファベット文字が表れたら、上げられます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.decode32!(\"MZXW6YTBOI======\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode32!(\"mzxw6ytboi======\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode32!(\"mzXW6ytBOi======\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode32!(\"MZXW6YTBOI\", padding: false)\n"
"    \"foobar\"\n"
"\n"

#. TRANSLATORS: def Base.decode64!(string, opts \\ [])
#: lib/base.ex:291
msgid ""
"Decodes a base 64 encoded string into a binary string.\n"
"\n"
"Accepts `ignore: :whitespace` option which will ignore all the\n"
"whitespace characters in the input string.\n"
"\n"
"Accepts `padding: false` option which will ignore padding from\n"
"the input string.\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode64!(\"Zm9vYmFy\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode64!(\"Zm9vYmFy\\n\", ignore: :whitespace)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode64!(\"Zm9vYg==\")\n"
"    \"foob\"\n"
"\n"
"    iex> Base.decode64!(\"Zm9vYg\", padding: false)\n"
"    \"foob\"\n"
"\n"
msgstr ""
"base 16エンコードされた文字列をバイナリ文字列へ\n"
"デコードします。\n"
"\n"
"大文字からデコードするアトム`:upper`(デフォルト)と、小文字からデコード\n"
"する`:lower`を受け付けます。混在した文字列に`:mixed`を与えることもでき\n"
"ます。\n"
"\n"
"`padding: false`オプションは入力文字列からパディングを無視します。\n"
"\n"
"`ArgumentError`例外は、パディングが不正、あるいは、文字列に\n"
"非アルファベット文字が表れたら、上げられます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.decode16!(\"666F6F626172\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode16!(\"666f6f626172\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode16!(\"666f6F626172\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode64!(\"Zm9vYg\", padding: false)\n"
"    \"foob\"\n"
"\n"

#. TRANSLATORS: def Base.decode16!(string, opts \\ [])
#: lib/base.ex:199
msgid ""
"Decodes a base 16 encoded string into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters "
"or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode16!(\"666F6F626172\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode16!(\"666f6f626172\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode16!(\"666f6F626172\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"
msgstr ""
"base 16エンコードされた文字列をバイナリ文字列へ\n"
"デコードします。\n"
"\n"
"大文字からデコードするアトム`:upper`(デフォルト)と、\n"
"小文字からデコードする`:lower`を受け付けます。\n"
"混在した文字列に`:mixed`を与えることもできます。\n"
"\n"
"`ArgumentError`例外は、パディングが不正、あるいは、文字列に\n"
"非アルファベット文字が表れたら、上げられます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.decode16!(\"666F6F626172\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode16!(\"666f6f626172\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode16!(\"666f6F626172\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"

#. TRANSLATORS: def Base.hex_encode32(data, opts \\ [])
#: lib/base.ex:508
msgid ""
"Encodes a binary string into a base 32 encoded string with an\n"
"extended hexadecimal alphabet.\n"
"\n"
"Accepts an atom `:upper` (default) for encoding to upper case characters or\n"
"`:lower` for lower case characters.\n"
"\n"
"Accepts `padding: false` option which will omit padding from\n"
"the output string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.hex_encode32(\"foobar\")\n"
"    \"CPNMUOJ1E8======\"\n"
"\n"
"    iex> Base.hex_encode32(\"foobar\", case: :lower)\n"
"    \"cpnmuoj1e8======\"\n"
"\n"
"    iex> Base.hex_encode32(\"foobar\", padding: false)\n"
"    \"CPNMUOJ1E8\"\n"
"\n"
msgstr ""
"バイナリ文字列を、拡張16進アルファベットによる、base 32エンコード文字列\n"
"に、エンコードします。\n"
"\n"
"大文字でのエンコードを行う`:upper`(デフォルト)、または、\n"
"小文字でのエンコードを行う`:lower`アトムを、\n"
"case: オプションで受け付けます。\n"
"\n"
"`padding: false`オプションは出力文字列からパディングを除去します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.hex_encode32(\"foobar\")\n"
"    \"CPNMUOJ1E8======\"\n"
"\n"
"    iex> Base.hex_encode32(\"foobar\", case: :lower)\n"
"    \"cpnmuoj1e8======\"\n"
"\n"
"    iex> Base.hex_encode32(\"foobar\", padding: false)\n"
"    \"CPNMUOJ1E8\"\n"
"\n"

#. TRANSLATORS: Elixir.Base Summary
#: lib/base.ex:4
msgid ""
"This module provides data encoding and decoding functions\n"
"according to [RFC 4648](http://tools.ietf.org/html/rfc4648).\n"
"\n"
"This document defines the commonly used base 16, base 32, and base\n"
"64 encoding schemes.\n"
"\n"
"## Base 16 alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         0|      4|         4|      8|         8|     "
"12|         C|\n"
"    |      1|         1|      5|         5|      9|         9|     "
"13|         D|\n"
"    |      2|         2|      6|         6|     10|         A|     "
"14|         E|\n"
"    |      3|         3|      7|         7|     11|         B|     "
"15|         F|\n"
"\n"
"## Base 32 alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         A|      9|         J|     18|         S|     "
"27|         3|\n"
"    |      1|         B|     10|         K|     19|         T|     "
"28|         4|\n"
"    |      2|         C|     11|         L|     20|         U|     "
"29|         5|\n"
"    |      3|         D|     12|         M|     21|         V|     "
"30|         6|\n"
"    |      4|         E|     13|         N|     22|         W|     "
"31|         7|\n"
"    |      5|         F|     14|         O|     23|         X|       "
"|          |\n"
"    |      6|         G|     15|         P|     24|         Y|  "
"(pad)|         =|\n"
"    |      7|         H|     16|         Q|     25|         Z|       "
"|          |\n"
"    |      8|         I|     17|         R|     26|         2|       "
"|          |\n"
"\n"
"\n"
"## Base 32 (extended hex) alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         0|      9|         9|     18|         I|     "
"27|         R|\n"
"    |      1|         1|     10|         A|     19|         J|     "
"28|         S|\n"
"    |      2|         2|     11|         B|     20|         K|     "
"29|         T|\n"
"    |      3|         3|     12|         C|     21|         L|     "
"30|         U|\n"
"    |      4|         4|     13|         D|     22|         M|     "
"31|         V|\n"
"    |      5|         5|     14|         E|     23|         N|       "
"|          |\n"
"    |      6|         6|     15|         F|     24|         O|  "
"(pad)|         =|\n"
"    |      7|         7|     16|         G|     25|         P|       "
"|          |\n"
"    |      8|         8|     17|         H|     26|         Q|       "
"|          |\n"
"\n"
"## Base 64 alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         A|     17|         R|     34|         i|     "
"51|         z|\n"
"    |      1|         B|     18|         S|     35|         j|     "
"52|         0|\n"
"    |      2|         C|     19|         T|     36|         k|     "
"53|         1|\n"
"    |      3|         D|     20|         U|     37|         l|     "
"54|         2|\n"
"    |      4|         E|     21|         V|     38|         m|     "
"55|         3|\n"
"    |      5|         F|     22|         W|     39|         n|     "
"56|         4|\n"
"    |      6|         G|     23|         X|     40|         o|     "
"57|         5|\n"
"    |      7|         H|     24|         Y|     41|         p|     "
"58|         6|\n"
"    |      8|         I|     25|         Z|     42|         q|     "
"59|         7|\n"
"    |      9|         J|     26|         a|     43|         r|     "
"60|         8|\n"
"    |     10|         K|     27|         b|     44|         s|     "
"61|         9|\n"
"    |     11|         L|     28|         c|     45|         t|     "
"62|         +|\n"
"    |     12|         M|     29|         d|     46|         u|     "
"63|         /|\n"
"    |     13|         N|     30|         e|     47|         v|       "
"|          |\n"
"    |     14|         O|     31|         f|     48|         w|  "
"(pad)|         =|\n"
"    |     15|         P|     32|         g|     49|         x|       "
"|          |\n"
"    |     16|         Q|     33|         h|     50|         y|       "
"|          |\n"
"\n"
"## Base 64 (URL and filename safe) alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         A|     17|         R|     34|         i|     "
"51|         z|\n"
"    |      1|         B|     18|         S|     35|         j|     "
"52|         0|\n"
"    |      2|         C|     19|         T|     36|         k|     "
"53|         1|\n"
"    |      3|         D|     20|         U|     37|         l|     "
"54|         2|\n"
"    |      4|         E|     21|         V|     38|         m|     "
"55|         3|\n"
"    |      5|         F|     22|         W|     39|         n|     "
"56|         4|\n"
"    |      6|         G|     23|         X|     40|         o|     "
"57|         5|\n"
"    |      7|         H|     24|         Y|     41|         p|     "
"58|         6|\n"
"    |      8|         I|     25|         Z|     42|         q|     "
"59|         7|\n"
"    |      9|         J|     26|         a|     43|         r|     "
"60|         8|\n"
"    |     10|         K|     27|         b|     44|         s|     "
"61|         9|\n"
"    |     11|         L|     28|         c|     45|         t|     "
"62|         -|\n"
"    |     12|         M|     29|         d|     46|         u|     "
"63|         _|\n"
"    |     13|         N|     30|         e|     47|         v|       "
"|          |\n"
"    |     14|         O|     31|         f|     48|         w|  "
"(pad)|         =|\n"
"    |     15|         P|     32|         g|     49|         x|       "
"|          |\n"
"    |     16|         Q|     33|         h|     50|         y|       "
"|          |\n"
"\n"
msgstr ""
"このモジュールは、[RFC 4648](http://tools.ietf.org/html/rfc4648) に\n"
"準拠した、データエンコードとデコード関数を提供します。\n"
"\n"
"このドキュメントは一般的に用いられる base 16, base 32 そして\n"
"base 64エンコーディングスキームを定めます。\n"
"\n"
"## Base 16 アルファベット\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         0|      4|         4|      8|         8|     "
"12|         C|\n"
"    |      1|         1|      5|         5|      9|         9|     "
"13|         D|\n"
"    |      2|         2|      6|         6|     10|         A|     "
"14|         E|\n"
"    |      3|         3|      7|         7|     11|         B|     "
"15|         F|\n"
"\n"
"## Base 32 アルファベット\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         A|      9|         J|     18|         S|     "
"27|         3|\n"
"    |      1|         B|     10|         K|     19|         T|     "
"28|         4|\n"
"    |      2|         C|     11|         L|     20|         U|     "
"29|         5|\n"
"    |      3|         D|     12|         M|     21|         V|     "
"30|         6|\n"
"    |      4|         E|     13|         N|     22|         W|     "
"31|         7|\n"
"    |      5|         F|     14|         O|     23|         X|       "
"|          |\n"
"    |      6|         G|     15|         P|     24|         Y|  "
"(pad)|         =|\n"
"    |      7|         H|     16|         Q|     25|         Z|       "
"|          |\n"
"    |      8|         I|     17|         R|     26|         2|       "
"|          |\n"
"\n"
"\n"
"## Base 32 (extended hex) アルファベット\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         0|      9|         9|     18|         I|     "
"27|         R|\n"
"    |      1|         1|     10|         A|     19|         J|     "
"28|         S|\n"
"    |      2|         2|     11|         B|     20|         K|     "
"29|         T|\n"
"    |      3|         3|     12|         C|     21|         L|     "
"30|         U|\n"
"    |      4|         4|     13|         D|     22|         M|     "
"31|         V|\n"
"    |      5|         5|     14|         E|     23|         N|       "
"|          |\n"
"    |      6|         6|     15|         F|     24|         O|  "
"(pad)|         =|\n"
"    |      7|         7|     16|         G|     25|         P|       "
"|          |\n"
"    |      8|         8|     17|         H|     26|         Q|       "
"|          |\n"
"\n"
"## Base 64 アルファベット\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         A|     17|         R|     34|         i|     "
"51|         z|\n"
"    |      1|         B|     18|         S|     35|         j|     "
"52|         0|\n"
"    |      2|         C|     19|         T|     36|         k|     "
"53|         1|\n"
"    |      3|         D|     20|         U|     37|         l|     "
"54|         2|\n"
"    |      4|         E|     21|         V|     38|         m|     "
"55|         3|\n"
"    |      5|         F|     22|         W|     39|         n|     "
"56|         4|\n"
"    |      6|         G|     23|         X|     40|         o|     "
"57|         5|\n"
"    |      7|         H|     24|         Y|     41|         p|     "
"58|         6|\n"
"    |      8|         I|     25|         Z|     42|         q|     "
"59|         7|\n"
"    |      9|         J|     26|         a|     43|         r|     "
"60|         8|\n"
"    |     10|         K|     27|         b|     44|         s|     "
"61|         9|\n"
"    |     11|         L|     28|         c|     45|         t|     "
"62|         +|\n"
"    |     12|         M|     29|         d|     46|         u|     "
"63|         /|\n"
"    |     13|         N|     30|         e|     47|         v|       "
"|          |\n"
"    |     14|         O|     31|         f|     48|         w|  "
"(pad)|         =|\n"
"    |     15|         P|     32|         g|     49|         x|       "
"|          |\n"
"    |     16|         Q|     33|         h|     50|         y|       "
"|          |\n"
"\n"
"## Base 64 (URL and filename safe) アルファベット\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | "
"Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         A|     17|         R|     34|         i|     "
"51|         z|\n"
"    |      1|         B|     18|         S|     35|         j|     "
"52|         0|\n"
"    |      2|         C|     19|         T|     36|         k|     "
"53|         1|\n"
"    |      3|         D|     20|         U|     37|         l|     "
"54|         2|\n"
"    |      4|         E|     21|         V|     38|         m|     "
"55|         3|\n"
"    |      5|         F|     22|         W|     39|         n|     "
"56|         4|\n"
"    |      6|         G|     23|         X|     40|         o|     "
"57|         5|\n"
"    |      7|         H|     24|         Y|     41|         p|     "
"58|         6|\n"
"    |      8|         I|     25|         Z|     42|         q|     "
"59|         7|\n"
"    |      9|         J|     26|         a|     43|         r|     "
"60|         8|\n"
"    |     10|         K|     27|         b|     44|         s|     "
"61|         9|\n"
"    |     11|         L|     28|         c|     45|         t|     "
"62|         -|\n"
"    |     12|         M|     29|         d|     46|         u|     "
"63|         _|\n"
"    |     13|         N|     30|         e|     47|         v|       "
"|          |\n"
"    |     14|         O|     31|         f|     48|         w|  "
"(pad)|         =|\n"
"    |     15|         P|     32|         g|     49|         x|       "
"|          |\n"
"    |     16|         Q|     33|         h|     50|         y|       "
"|          |\n"
"\n"

#. TRANSLATORS: def Base.hex_decode32(string, opts \\ [])
#: lib/base.ex:538
msgid ""
"Decodes a base 32 encoded string with extended hexadecimal alphabet\n"
"into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters "
"or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"Accepts `padding: false` option which will ignore padding from\n"
"the input string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.hex_decode32(\"CPNMUOJ1E8======\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.hex_decode32(\"cpnmuoj1e8======\", case: :lower)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.hex_decode32(\"cpnMuOJ1E8======\", case: :mixed)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.hex_decode32(\"CPNMUOJ1E8\", padding: false)\n"
"    {:ok, \"foobar\"}\n"
"\n"
msgstr ""
"拡張16進数アルファベットのbase 32エンコードされた文字列をバイナリ文字列へ\n"
"デコードします。\n"
"\n"
"大文字からデコードするアトム`:upper`(デフォルト)と、\n"
"小文字からデコードする`:lower`を受け付けます。\n"
"混在した文字列に`:mixed`を与えることもできます。\n"
"\n"
"`padding: false`オプションは入力文字列からパディングを無視します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.hex_decode32(\"CPNMUOJ1E8======\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.hex_decode32(\"cpnmuoj1e8======\", case: :lower)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.hex_decode32(\"cpnMuOJ1E8======\", case: :mixed)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.hex_decode32(\"CPNMUOJ1E8\", padding: false)\n"
"    {:ok, \"foobar\"}\n"
"\n"

#. TRANSLATORS: def Base.url_decode64!(string, opts \\ [])
#: lib/base.ex:378
msgid ""
"Decodes a base 64 encoded string with URL and filename safe alphabet\n"
"into a binary string.\n"
"\n"
"Accepts `ignore: :whitespace` option which will ignore all the\n"
"whitespace characters in the input string.\n"
"\n"
"Accepts `padding: false` option which will ignore padding from\n"
"the input string.\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.url_decode64!(\"_3_-_A==\")\n"
"    <<255, 127, 254, 252>>\n"
"\n"
"    iex> Base.url_decode64!(\"_3_-_A==\\n\", ignore: :whitespace)\n"
"    <<255, 127, 254, 252>>\n"
"\n"
"    iex> Base.url_decode64!(\"_3_-_A\", padding: false)\n"
"    <<255, 127, 254, 252>>\n"
"\n"
msgstr ""
"URLとファイル名で安全なアルファベットなbase64エンコードされた文字列を、\n"
"バイナリ文字列へデコードします。\n"
"\n"
"`ignore: :whitespace`オプションは入力文字列から全ての空白文字類を\n"
"無視します。\n"
"\n"
"`padding: false`オプションは入力文字列からパディングを無視します。\n"
"\n"
"`ArgumentError`例外は、パディングが不正、あるいは、文字列に\n"
"非アルファベット文字が表れたら、上げられます。\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.url_decode64!(\"_3_-_A==\")\n"
"    <<255, 127, 254, 252>>\n"
"\n"
"    iex> Base.url_decode64!(\"_3_-_A==\\n\", ignore: :whitespace)\n"
"    <<255, 127, 254, 252>>\n"
"\n"
"    iex> Base.url_decode64!(\"_3_-_A\", padding: false)\n"
"    <<255, 127, 254, 252>>\n"
"\n"

#. TRANSLATORS: def Base.hex_decode32!(string, opts \\ [])
#: lib/base.ex:572
msgid ""
"Decodes a base 32 encoded string with extended hexadecimal alphabet\n"
"into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters "
"or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"Accepts `padding: false` option which will ignore padding from\n"
"the input string.\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.hex_decode32!(\"CPNMUOJ1E8======\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.hex_decode32!(\"cpnmuoj1e8======\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.hex_decode32!(\"cpnMuOJ1E8======\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.hex_decode32!(\"CPNMUOJ1E8\", padding: false)\n"
"    \"foobar\"\n"
"\n"
msgstr ""
"拡張16進数アルファベットのbase 32エンコードされた文字列をバイナリ文字列へ\n"
"デコードします。\n"
"\n"
"大文字からデコードするアトム`:upper`(デフォルト)と、\n"
"小文字からデコードする`:lower`を受け付けます。\n"
"混在した文字列に`:mixed`を与えることもできます。\n"
"\n"
"`padding: false`オプションは入力文字列からパディングを無視します。\n"
"\n"
"`ArgumentError`例外は、パディングが不正、あるいは、文字列に\n"
"非アルファベット文字が表れたら、上げられます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.hex_decode32!(\"CPNMUOJ1E8======\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.hex_decode32!(\"cpnmuoj1e8======\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.hex_decode32!(\"cpnMuOJ1E8======\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.hex_decode32!(\"CPNMUOJ1E8\", padding: false)\n"
"    \"foobar\"\n"
"\n"

#. TRANSLATORS: def Base.encode16(data, opts \\ [])
#: lib/base.ex:150
msgid ""
"Encodes a binary string into a base 16 encoded string.\n"
"\n"
"Accepts an atom `:upper` (default) for encoding to upper case characters or\n"
"`:lower` for lower case characters.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.encode16(\"foobar\")\n"
"    \"666F6F626172\"\n"
"\n"
"    iex> Base.encode16(\"foobar\", case: :lower)\n"
"    \"666f6f626172\"\n"
"\n"
msgstr ""
"バイナリ文字列を、base 16エンコード文字列\n"
"に、エンコードします。\n"
"\n"
"大文字でのエンコードを行う`:upper`(デフォルト)、または、\n"
"小文字でのエンコードを行う`:lower`アトムを、\n"
"case: オプションで受け付けます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.encode16(\"foobar\")\n"
"    \"666F6F626172\"\n"
"\n"
"    iex> Base.encode16(\"foobar\", case: :lower)\n"
"    \"666f6f626172\"\n"
"\n"

#. TRANSLATORS: def Base.decode64(string, opts \\ [])
#: lib/base.ex:259
msgid ""
"Decodes a base 64 encoded string into a binary string.\n"
"\n"
"Accepts `ignore: :whitespace` option which will ignore all the\n"
"whitespace characters in the input string.\n"
"\n"
"Accepts `padding: false` option which will ignore padding from\n"
"the input string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode64(\"Zm9vYmFy\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode64(\"Zm9vYmFy\\n\", ignore: :whitespace)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode64(\"Zm9vYg==\")\n"
"    {:ok, \"foob\"}\n"
"\n"
"    iex> Base.decode64(\"Zm9vYg\", padding: false)\n"
"    {:ok, \"foob\"}\n"
"\n"
msgstr ""
"base 64エンコードされた文字列をバイナリ文字列へ\n"
"デコードします。\n"
"\n"
"`ignore: :whitespace`オプションは入力文字列から全ての空白文字類を\n"
"無視します。\n"
"\n"
"`padding: false`オプションは入力文字列からパディングを無視します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.decode64(\"Zm9vYmFy\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode64(\"Zm9vYmFy\\n\", ignore: :whitespace)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode64(\"Zm9vYg==\")\n"
"    {:ok, \"foob\"}\n"
"\n"
"    iex> Base.decode64(\"Zm9vYg\", padding: false)\n"
"    {:ok, \"foob\"}\n"
"\n"

#. TRANSLATORS: def Base.encode64(data, opts \\ [])
#: lib/base.ex:234
msgid ""
"Encodes a binary string into a base 64 encoded string.\n"
"\n"
"Accepts `padding: false` option which will omit padding from\n"
"the output string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.encode64(\"foobar\")\n"
"    \"Zm9vYmFy\"\n"
"\n"
"    iex> Base.encode64(\"foob\")\n"
"    \"Zm9vYg==\"\n"
"\n"
"    iex> Base.encode64(\"foob\", padding: false)\n"
"    \"Zm9vYg\"\n"
"\n"
msgstr ""
"バイナリ文字列を、base 64エンコード文字列\n"
"に、エンコードします。\n"
"\n"
"`padding: false`オプションは出力文字列からパディングを除去します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.encode64(\"foobar\")\n"
"    \"Zm9vYmFy\"\n"
"\n"
"    iex> Base.encode64(\"foob\")\n"
"    \"Zm9vYg==\"\n"
"\n"
"    iex> Base.encode64(\"foob\", padding: false)\n"
"    \"Zm9vYg\"\n"
"\n"

#. TRANSLATORS: def Base.url_encode64(data, opts \\ [])
#: lib/base.ex:325
msgid ""
"Encodes a binary string into a base 64 encoded string with URL and filename\n"
"safe alphabet.\n"
"\n"
"Accepts `padding: false` option which will omit padding from\n"
"the output string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.url_encode64(<<255, 127, 254, 252>>)\n"
"    \"_3_-_A==\"\n"
"\n"
"    iex> Base.url_encode64(<<255, 127, 254, 252>>, padding: false)\n"
"    \"_3_-_A\"\n"
"\n"
msgstr ""
"バイナリ文字列を、URLとファイル名で安全なアルファベットのbase64エンコー\n"
"ド文字列に、エンコードします。\n"
"\n"
"`padding: false`オプションは出力文字列からパディングを除去します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Base.url_encode64(<<255, 127, 254, 252>>)\n"
"    \"_3_-_A==\"\n"
"\n"
"    iex> Base.url_encode64(<<255, 127, 254, 252>>, padding: false)\n"
"    \"_3_-_A\"\n"
"\n"

#. TRANSLATORS: def Base.url_decode64(string, opts \\ [])
#: lib/base.ex:348
msgid ""
"Decodes a base 64 encoded string with URL and filename safe alphabet\n"
"into a binary string.\n"
"\n"
"Accepts `ignore: :whitespace` option which will ignore all the\n"
"whitespace characters in the input string.\n"
"\n"
"Accepts `padding: false` option which will ignore padding from\n"
"the input string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.url_decode64(\"_3_-_A==\")\n"
"    {:ok, <<255, 127, 254, 252>>}\n"
"\n"
"    iex> Base.url_decode64(\"_3_-_A==\\n\", ignore: :whitespace)\n"
"    {:ok, <<255, 127, 254, 252>>}\n"
"\n"
"    iex> Base.url_decode64(\"_3_-_A\", padding: false)\n"
"    {:ok, <<255, 127, 254, 252>>}\n"
"\n"
msgstr ""
"URLとファイル名で安全なアルファベットなbase64エンコードされた文字列を、\n"
"バイナリ文字列へデコードします。\n"
"\n"
"`ignore: :whitespace`オプションは入力文字列から全ての空白文字類を\n"
"無視します。\n"
"\n"
"`padding: false`オプションは入力文字列からパディングを無視します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.url_decode64(\"_3_-_A==\")\n"
"    {:ok, <<255, 127, 254, 252>>}\n"
"\n"
"    iex> Base.url_decode64(\"_3_-_A==\\n\", ignore: :whitespace)\n"
"    {:ok, <<255, 127, 254, 252>>}\n"
"\n"
"    iex> Base.url_decode64(\"_3_-_A\", padding: false)\n"
"    {:ok, <<255, 127, 254, 252>>}\n"
"\n"

#~ msgid ""
#~ "Decodes a base 64 encoded string into a binary string.\n"
#~ "\n"
#~ "The following alphabet is used both for encoding and decoding:\n"
#~ "\n"
#~ "An `ArgumentError` exception is raised if the padding is incorrect or\n"
#~ "a non-alphabet character is present in the string.\n"
#~ "\n"
#~ "## Examples\n"
#~ "\n"
#~ "    iex> Base.decode64!(\"Zm9vYmFy\")\n"
#~ "    \"foobar\"\n"
#~ "\n"
#~ msgstr ""
#~ "base64エンコードされた文字列を、バイナリ文字列へデコードします。\n"
#~ "\n"
#~ "以下のアルファベットがエンコードとデコードの両方で使われます:\n"
#~ "\n"
#~ "`ArgumentError`例外は、パディングが不正、あるいは、文字列に\n"
#~ "非アルファベット文字が表れたら、上げられます。\n"
#~ "\n"
#~ "## 例\n"
#~ "\n"
#~ "    iex> Base.decode64!(\"Zm9vYmFy\")\n"
#~ "    \"foobar\"\n"
#~ "\n"

#~ msgid ""
#~ "Decodes a base 64 encoded string with URL and filename safe alphabet\n"
#~ "into a binary string.\n"
#~ "\n"
#~ "An `ArgumentError` exception is raised if the padding is incorrect or\n"
#~ "a non-alphabet character is present in the string.\n"
#~ "\n"
#~ "## Examples\n"
#~ "\n"
#~ "    iex> Base.url_decode64!(\"_3_-_A==\")\n"
#~ "    <<255, 127, 254, 252>>\n"
#~ "\n"
#~ msgstr ""
#~ "URLとファイル名で安全なアルファベットなbase64エンコードされた文字列を、\n"
#~ "バイナリ文字列へデコードします。\n"
#~ "\n"
#~ "`ArgumentError`例外は、パディングが不正、あるいは、文字列に\n"
#~ "非アルファベット文字が表れたら、上げられます。\n"
#~ "\n"
#~ "## 例\n"
#~ "\n"
#~ "    iex> Base.url_decode64!(\"_3_-_A==\")\n"
#~ "    <<255, 127, 254, 252>>\n"
#~ "\n"

#~ msgid ""
#~ "Decodes a base 64 encoded string into a binary string.\n"
#~ "\n"
#~ "## Examples\n"
#~ "\n"
#~ "    iex> Base.decode64(\"Zm9vYmFy\")\n"
#~ "    {:ok, \"foobar\"}\n"
#~ "\n"
#~ msgstr ""
#~ "base64エンコードされた文字列を、バイナリ文字列へデコードします。\n"
#~ "\n"
#~ "## 例\n"
#~ "\n"
#~ "    iex> Base.decode64(\"Zm9vYmFy\")\n"
#~ "    {:ok, \"foobar\"}\n"
#~ "\n"

#~ msgid ""
#~ "Decodes a base 64 encoded string with URL and filename safe alphabet\n"
#~ "into a binary string.\n"
#~ "\n"
#~ "## Examples\n"
#~ "\n"
#~ "    iex> Base.url_decode64(\"_3_-_A==\")\n"
#~ "    {:ok, <<255, 127, 254, 252>>}\n"
#~ "\n"
#~ msgstr ""
#~ "URLとファイル名で安全なアルファベットなbase64エンコードされた文字列を、\n"
#~ "バイナリ文字列へデコードします。\n"
#~ "\n"
#~ "## 例\n"
#~ "\n"
#~ "    iex> Base.url_decode64(\"_3_-_A==\")\n"
#~ "    {:ok, <<255, 127, 254, 252>>}\n"
#~ "\n"

#~ msgid ""
#~ "Encodes a binary string into a base 64 encoded string.\n"
#~ "\n"
#~ "## Examples\n"
#~ "\n"
#~ "    iex> Base.encode64(\"foobar\")\n"
#~ "    \"Zm9vYmFy\"\n"
#~ "\n"
#~ msgstr ""
#~ "バイナリ文字列をbase64エンコード文字列にエンコードします。\n"
#~ "\n"
#~ "## 例\n"
#~ "\n"
#~ "    iex> Base.encode64(\"foobar\")\n"
#~ "    \"Zm9vYmFy\"\n"
#~ "\n"
