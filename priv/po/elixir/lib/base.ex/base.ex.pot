#. TRANSLATORS: def Base.encode32(data, opts \\ [])
#: lib/base.ex:332 
msgid ""
"Encodes a binary string into a base 32 encoded string.\n"
"\n"
"Accepts an atom `:upper` (default) for encoding to upper case characters or\n"
"`:lower` for lower case characters.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.encode32(\"foobar\")\n"
"    \"MZXW6YTBOI======\"\n"
"\n"
"    iex> Base.encode32(\"foobar\", case: :lower)\n"
"    \"mzxw6ytboi======\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.decode16!(string, opts \\ [])
#: lib/base.ex:190 
msgid ""
"Decodes a base 16 encoded string into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode16!(\"666F6F626172\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode16!(\"666f6f626172\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode16!(\"666f6F626172\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.decode64!(string)
#: lib/base.ex:255 
msgid ""
"Decodes a base 64 encoded string into a binary string.\n"
"\n"
"The following alphabet is used both for encoding and decoding:\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode64!(\"Zm9vYmFy\")\n"
"    \"foobar\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.decode16(string, opts \\ [])
#: lib/base.ex:163 
msgid ""
"Decodes a base 16 encoded string into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode16(\"666F6F626172\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode16(\"666f6f626172\", case: :lower)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode16(\"666f6F626172\", case: :mixed)\n"
"    {:ok, \"foobar\"}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.url_decode64!(string)
#: lib/base.ex:310 
msgid ""
"Decodes a base 64 encoded string with URL and filename safe alphabet\n"
"into a binary string.\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.url_decode64!(\"_3_-_A==\")\n"
"    <<255, 127, 254, 252>>\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.hex_decode32!(string, opts \\ [])
#: lib/base.ex:467 
msgid ""
"Decodes a base 32 encoded string with extended hexadecimal alphabet\n"
"into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.hex_decode32!(\"CPNMUOJ1E8======\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.hex_decode32!(\"cpnmuoj1e8======\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.hex_decode32!(\"cpnMuOJ1E8======\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Base Summary
#: lib/base.ex:4 
msgid ""
"This module provides data encoding and decoding functions\n"
"according to [RFC 4648](http://tools.ietf.org/html/rfc4648).\n"
"\n"
"This document defines the commonly used base 16, base 32, and base\n"
"64 encoding schemes.\n"
"\n"
"## Base 16 alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         0|      4|         4|      8|         8|     12|         C|\n"
"    |      1|         1|      5|         5|      9|         9|     13|         D|\n"
"    |      2|         2|      6|         6|     10|         A|     14|         E|\n"
"    |      3|         3|      7|         7|     11|         B|     15|         F|\n"
"\n"
"## Base 32 alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         A|      9|         J|     18|         S|     27|         3|\n"
"    |      1|         B|     10|         K|     19|         T|     28|         4|\n"
"    |      2|         C|     11|         L|     20|         U|     29|         5|\n"
"    |      3|         D|     12|         M|     21|         V|     30|         6|\n"
"    |      4|         E|     13|         N|     22|         W|     31|         7|\n"
"    |      5|         F|     14|         O|     23|         X|       |          |\n"
"    |      6|         G|     15|         P|     24|         Y|  (pad)|         =|\n"
"    |      7|         H|     16|         Q|     25|         Z|       |          |\n"
"    |      8|         I|     17|         R|     26|         2|       |          |\n"
"\n"
"\n"
"## Base 32 (extended hex) alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         0|      9|         9|     18|         I|     27|         R|\n"
"    |      1|         1|     10|         A|     19|         J|     28|         S|\n"
"    |      2|         2|     11|         B|     20|         K|     29|         T|\n"
"    |      3|         3|     12|         C|     21|         L|     30|         U|\n"
"    |      4|         4|     13|         D|     22|         M|     31|         V|\n"
"    |      5|         5|     14|         E|     23|         N|       |          |\n"
"    |      6|         6|     15|         F|     24|         O|  (pad)|         =|\n"
"    |      7|         7|     16|         G|     25|         P|       |          |\n"
"    |      8|         8|     17|         H|     26|         Q|       |          |\n"
"\n"
"## Base 64 alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         A|     17|         R|     34|         i|     51|         z|\n"
"    |      1|         B|     18|         S|     35|         j|     52|         0|\n"
"    |      2|         C|     19|         T|     36|         k|     53|         1|\n"
"    |      3|         D|     20|         U|     37|         l|     54|         2|\n"
"    |      4|         E|     21|         V|     38|         m|     55|         3|\n"
"    |      5|         F|     22|         W|     39|         n|     56|         4|\n"
"    |      6|         G|     23|         X|     40|         o|     57|         5|\n"
"    |      7|         H|     24|         Y|     41|         p|     58|         6|\n"
"    |      8|         I|     25|         Z|     42|         q|     59|         7|\n"
"    |      9|         J|     26|         a|     43|         r|     60|         8|\n"
"    |     10|         K|     27|         b|     44|         s|     61|         9|\n"
"    |     11|         L|     28|         c|     45|         t|     62|         +|\n"
"    |     12|         M|     29|         d|     46|         u|     63|         /|\n"
"    |     13|         N|     30|         e|     47|         v|       |          |\n"
"    |     14|         O|     31|         f|     48|         w|  (pad)|         =|\n"
"    |     15|         P|     32|         g|     49|         x|       |          |\n"
"    |     16|         Q|     33|         h|     50|         y|       |          |\n"
"\n"
"## Base 64 (URL and filename safe) alphabet\n"
"\n"
"    | Value | Encoding | Value | Encoding | Value | Encoding | Value | Encoding |\n"
"    |------:|---------:|------:|---------:|------:|---------:|------:|---------:|\n"
"    |      0|         A|     17|         R|     34|         i|     51|         z|\n"
"    |      1|         B|     18|         S|     35|         j|     52|         0|\n"
"    |      2|         C|     19|         T|     36|         k|     53|         1|\n"
"    |      3|         D|     20|         U|     37|         l|     54|         2|\n"
"    |      4|         E|     21|         V|     38|         m|     55|         3|\n"
"    |      5|         F|     22|         W|     39|         n|     56|         4|\n"
"    |      6|         G|     23|         X|     40|         o|     57|         5|\n"
"    |      7|         H|     24|         Y|     41|         p|     58|         6|\n"
"    |      8|         I|     25|         Z|     42|         q|     59|         7|\n"
"    |      9|         J|     26|         a|     43|         r|     60|         8|\n"
"    |     10|         K|     27|         b|     44|         s|     61|         9|\n"
"    |     11|         L|     28|         c|     45|         t|     62|         -|\n"
"    |     12|         M|     29|         d|     46|         u|     63|         _|\n"
"    |     13|         N|     30|         e|     47|         v|       |          |\n"
"    |     14|         O|     31|         f|     48|         w|  (pad)|         =|\n"
"    |     15|         P|     32|         g|     49|         x|       |          |\n"
"    |     16|         Q|     33|         h|     50|         y|       |          |\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.url_encode64(data)
#: lib/base.ex:278 
msgid ""
"Encodes a binary string into a base 64 encoded string with URL and filename\n"
"safe alphabet.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.url_encode64(<<255, 127, 254, 252>>)\n"
"    \"_3_-_A==\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.decode32(string, opts \\ [])
#: lib/base.ex:354 
msgid ""
"Decodes a base 32 encoded string into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode32(\"MZXW6YTBOI======\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode32(\"mzxw6ytboi======\", case: :lower)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.decode32(\"mzXW6ytBOi======\", case: :mixed)\n"
"    {:ok, \"foobar\"}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.encode16(data, opts \\ [])
#: lib/base.ex:141 
msgid ""
"Encodes a binary string into a base 16 encoded string.\n"
"\n"
"Accepts an atom `:upper` (default) for encoding to upper case characters or\n"
"`:lower` for lower case characters.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.encode16(\"foobar\")\n"
"    \"666F6F626172\"\n"
"\n"
"    iex> Base.encode16(\"foobar\", case: :lower)\n"
"    \"666f6f626172\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.decode64(string)
#: lib/base.ex:239 
msgid ""
"Decodes a base 64 encoded string into a binary string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode64(\"Zm9vYmFy\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.hex_encode32(data, opts \\ [])
#: lib/base.ex:416 
msgid ""
"Encodes a binary string into a base 32 encoded string with an\n"
"extended hexadecimal alphabet.\n"
"\n"
"Accepts an atom `:upper` (default) for encoding to upper case characters or\n"
"`:lower` for lower case characters.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.hex_encode32(\"foobar\")\n"
"    \"CPNMUOJ1E8======\"\n"
"\n"
"    iex> Base.hex_encode32(\"foobar\", case: :lower)\n"
"    \"cpnmuoj1e8======\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.url_decode64(string)
#: lib/base.ex:293 
msgid ""
"Decodes a base 64 encoded string with URL and filename safe alphabet\n"
"into a binary string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.url_decode64(\"_3_-_A==\")\n"
"    {:ok, <<255, 127, 254, 252>>}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.encode64(data)
#: lib/base.ex:225 
msgid ""
"Encodes a binary string into a base 64 encoded string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.encode64(\"foobar\")\n"
"    \"Zm9vYmFy\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.decode32!(string, opts \\ [])
#: lib/base.ex:381 
msgid ""
"Decodes a base 32 encoded string into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"An `ArgumentError` exception is raised if the padding is incorrect or\n"
"a non-alphabet character is present in the string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.decode32!(\"MZXW6YTBOI======\")\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode32!(\"mzxw6ytboi======\", case: :lower)\n"
"    \"foobar\"\n"
"\n"
"    iex> Base.decode32!(\"mzXW6ytBOi======\", case: :mixed)\n"
"    \"foobar\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Base.hex_decode32(string, opts \\ [])
#: lib/base.ex:439 
msgid ""
"Decodes a base 32 encoded string with extended hexadecimal alphabet\n"
"into a binary string.\n"
"\n"
"Accepts an atom `:upper` (default) for decoding from upper case characters or\n"
"`:lower` for lower case characters. `:mixed` can be given for mixed case\n"
"characters.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Base.hex_decode32(\"CPNMUOJ1E8======\")\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.hex_decode32(\"cpnmuoj1e8======\", case: :lower)\n"
"    {:ok, \"foobar\"}\n"
"\n"
"    iex> Base.hex_decode32(\"cpnMuOJ1E8======\", case: :mixed)\n"
"    {:ok, \"foobar\"}\n"
"\n"
msgstr ""
