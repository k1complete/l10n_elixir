#. TRANSLATORS: def System.tmp_dir()
#: lib/system.ex:141 
msgid ""
"Writable temporary directory.\n"
"\n"
"Returns a writable temporary directory.\n"
"Searches for directories in the following order:\n"
"\n"
"  1. the directory named by the TMPDIR environment variable\n"
"  2. the directory named by the TEMP environment variable\n"
"  3. the directory named by the TMP environment variable\n"
"  4. `C:\\TMP` on Windows or `/tmp` on Unix\n"
"  5. as a last resort, the current working directory\n"
"\n"
"Returns `nil` if none of the above are writable.\n"
msgstr ""
#. TRANSLATORS: def System.tmp_dir!()
#: lib/system.ex:163 
msgid ""
"Writable temporary directory, exception on error.\n"
"\n"
"Same as `tmp_dir/0` but raises `RuntimeError`\n"
"instead of returning `nil` if no temp dir is set.\n"
msgstr ""
#. TRANSLATORS: def System.user_home()
#: lib/system.ex:121 
msgid ""
"User home directory.\n"
"\n"
"Returns the user home directory (platform independent).\n"
msgstr ""
#. TRANSLATORS: def System.user_home!()
#: lib/system.ex:130 
msgid ""
"User home directory, exception on error.\n"
"\n"
"Same as `user_home/0` but raises `RuntimeError`\n"
"instead of returning `nil` if no user home is set.\n"
msgstr ""
#. TRANSLATORS: def System.get_env()
#: lib/system.ex:229 
msgid ""
"System environment variables.\n"
"\n"
"Returns a list of all environment variables. Each variable is given as a\n"
"`{name, value}` tuple where both `name` and `value` are strings.\n"
msgstr ""
#. TRANSLATORS: def System.put_env(dict)
#: lib/system.ex:281 
msgid ""
"Sets multiple environment variables.\n"
"\n"
"Sets a new value for each environment variable corresponding\n"
"to each key in `dict`.\n"
msgstr ""
#. TRANSLATORS: def System.put_env(varname, value)
#: lib/system.ex:270 
msgid ""
"Sets an environment variable value.\n"
"\n"
"Sets a new `value` for the environment variable `varname`.\n"
msgstr ""
#. TRANSLATORS: Elixir.System Summary
#: lib/system.ex:2 
msgid ""
"The System module provides access to variables used or\n"
"maintained by the VM and to functions that interact directly\n"
"with the VM or the host system.\n"
msgstr ""
#. TRANSLATORS: def System.at_exit(fun)
#: lib/system.ex:195 
msgid ""
"Registers a program exit handler function.\n"
"\n"
"Registers a function that will be invoked at the end of program execution.\n"
"Useful for invoking a hook in \"script\" mode.\n"
"\n"
"The handler always executes in a different process from the one it was\n"
"registered in. As a consequence, any resources managed by the calling process\n"
"(ETS tables, open files, etc.) won't be available by the time the handler\n"
"function is invoked.\n"
"\n"
"The function must receive the exit status code as an argument.\n"
msgstr ""
#. TRANSLATORS: def System.argv(args)
#: lib/system.ex:78 
msgid ""
"Modifies command line arguments.\n"
"\n"
"Changes the list of command line arguments. Use it with caution,\n"
"as it destroys any previous argv information.\n"
msgstr ""
#. TRANSLATORS: def System.find_executable(program)
#: lib/system.ex:212 
msgid ""
"Locates an executable on the system.\n"
"\n"
"This function looks up an executable program given\n"
"its name using the environment variable PATH on Unix\n"
"and Windows. It also considers the proper executable\n"
"extension for each OS, so for Windows it will try to\n"
"lookup files with `.com`, `.cmd` or similar extensions.\n"
msgstr ""
#. TRANSLATORS: def System.argv()
#: lib/system.ex:68 
msgid ""
"Lists command line arguments.\n"
"\n"
"Returns the list of command line arguments passed to the program.\n"
msgstr ""
#. TRANSLATORS: def System.stacktrace()
#: lib/system.ex:303 
msgid ""
"Last exception stacktrace.\n"
"\n"
"Note that the Erlang VM (and therefore this function) does not\n"
"return the current stacktrace but rather the stacktrace of the\n"
"latest exception.\n"
"\n"
"Inlined by the compiler into `:erlang.get_stacktrace/0`.\n"
msgstr ""
#. TRANSLATORS: def System.cmd(command, args, opts \\ [])
#: lib/system.ex:355 
msgid ""
"Executes the given `command` with `args`.\n"
"\n"
"`command` is expected to be an executable available in PATH\n"
"unless an absolute path is given.\n"
"\n"
"`args` must be a list of strings which are not expanded\n"
"in any way. For example, this means wildcard expansion will\n"
"not happen unless `Path.wildcard/2` is used. On Windows though,\n"
"wildcard expansion is up to the program.\n"
"\n"
"This function returns a tuple containing the collected result\n"
"and the command exit status.\n"
"\n"
"## Examples\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"]\n"
"    {\"hello\\n\", 0}\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"], env: [{\"MIX_ENV\", \"test\"}]\n"
"    {\"hello\\n\", 0}\n"
"    \n"
"    iex> System.cmd \"echo\", [\"hello\"], into: IO.stream(:stdio, :line)\n"
"    hello\n"
"    {%IO.Stream{}, 0}\n"
"\n"
"## Options\n"
"\n"
"  * `:into` - injects the result into the given collectable, defaults to `\"\"`\n"
"  * `:cd` - the directory to run the command in\n"
"  * `:env` - an enumerable of tuples containing environment key-value as binary\n"
"  * `:arg0` - set the command arg0\n"
"  * `:stderr_to_stdout` - redirects stderr to stdout when `true`\n"
"  * `:parallelism` - when `true`, the VM will schedule port tasks to improve\n"
"    parallelism in the system. If set to `false`, the VM will try to perform\n"
"    commands immediately, improving latency at the expense of parallelism.\n"
"    The default can be set on system startup by passing the \"+spp\" argument\n"
"    to `--erl`.\n"
"\n"
"## Error reasons\n"
"\n"
"If invalid arguments are given, `ArgumentError` is raised by\n"
"`System.cmd/3`. `System.cmd/3` also expects a strict set of\n"
"options and will raise if unknown or invalid options are given.\n"
"\n"
"Furthermore, `System.cmd/3` may fail with one of the POSIX reasons\n"
"detailed below:\n"
"\n"
"  * `:system_limit` - all available ports in the Erlang emulator are in use\n"
"\n"
"  * `:enomem` - there was not enough memory to create the port\n"
"\n"
"  * `:eagain` - there are no more available operating system processes\n"
"\n"
"  * `:enametoolong` - the external command given was too long\n"
"\n"
"  * `:emfile` - there are no more available file descriptors\n"
"    (for the operating system process that the Erlang emulator runs in)\n"
"\n"
"  * `:enfile` - the file table is full (for the entire operating system)\n"
"\n"
"  * `:eacces` - the command does not point to an executable file\n"
"\n"
"  * `:enoent` - the command does not point to an existing file\n"
"\n"
"## Shell commands\n"
"\n"
"If you desire to execute a trusted command inside a shell, with pipes,\n"
"redirecting and so on, please check\n"
"[Erlang's :os.cmd/1 function](http://www.erlang.org/doc/man/os.html#cmd-1).\n"
msgstr ""
#. TRANSLATORS: def System.get_pid()
#: lib/system.ex:259 
msgid ""
"Erlang VM process identifier.\n"
"\n"
"Returns the process identifier of the current Erlang emulator\n"
"in the format most commonly used by the operating system environment.\n"
"\n"
"See http://www.erlang.org/doc/man/os.html#getpid-0 for more info.\n"
msgstr ""
#. TRANSLATORS: def System.get_env(varname)
#: lib/system.ex:244 
msgid ""
"Environment variable value.\n"
"\n"
"Returns the value of the environment variable\n"
"`varname` as a binary, or `nil` if the environment\n"
"variable is undefined.\n"
msgstr ""
#. TRANSLATORS: def System.version()
#: lib/system.ex:50 
msgid ""
"Elixir version information.\n"
"\n"
"Returns Elixir's version as binary.\n"
msgstr ""
#. TRANSLATORS: def System.build_info()
#: lib/system.ex:58 
msgid ""
"Elixir build information.\n"
"\n"
"Returns a keyword list with Elixir version, git tag info and compilation date.\n"
msgstr ""
#. TRANSLATORS: def System.delete_env(varname)
#: lib/system.ex:292 
msgid ""
"Deletes an environment variable.\n"
"\n"
"Removes the variable `varname` from the environment.\n"
msgstr ""
#. TRANSLATORS: def System.halt(status \\ 0)
#: lib/system.ex:316 
msgid ""
"Halts the Erlang runtime system.\n"
"\n"
"Halts the Erlang runtime system where the argument `status` must be a\n"
"non-negative integer, the atom `:abort` or a binary.\n"
"\n"
"  * If an integer, the runtime system exits with the integer value which\n"
"    is returned to the operating system.\n"
"\n"
"  * If `:abort`, the runtime system aborts producing a core dump, if that is\n"
"    enabled in the operating system.\n"
"\n"
"  * If a string, an erlang crash dump is produced with status as slogan,\n"
"    and then the runtime system exits with status code 1.\n"
"\n"
"Note that on many platforms, only the status codes 0-255 are supported\n"
"by the operating system.\n"
"\n"
"For more information, check: http://www.erlang.org/doc/man/erlang.html#halt-1\n"
"\n"
"## Examples\n"
"\n"
"    System.halt(0)\n"
"    System.halt(1)\n"
"    System.halt(:abort)\n"
"\n"
msgstr ""
#. TRANSLATORS: def System.cwd()
#: lib/system.ex:89 
msgid ""
"Current working directory.\n"
"\n"
"Returns the current working directory or `nil` if one\n"
"is not available.\n"
msgstr ""
#. TRANSLATORS: def System.cwd!()
#: lib/system.ex:111 
msgid ""
"Current working directory, exception on error.\n"
"\n"
"Returns the current working directory or raises `RuntimeError`.\n"
msgstr ""
