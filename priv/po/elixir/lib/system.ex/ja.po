msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-12-26 18:53+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def System.compiled_endianness()
#: lib/system.ex:57
msgid "Returns the endianness the system was compiled with.\n"
msgstr "システムがコンパイルされたエンディアンを返します。\n"

#. TRANSLATORS: def System.build_info()
#: lib/system.ex:73
msgid ""
"Elixir build information.\n"
"\n"
"Returns a keyword list with Elixir version, git short revision hash and "
"compilation date.\n"
msgstr ""
"Elixirビルドインフォメーションです。\n"
"\n"
"キーワードリストとして、Elixirバージョン、git short revision hash \n"
"および、コンパイル日時を返します。\n"

#. TRANSLATORS: def System.delete_env(varname)
#: lib/system.ex:307
msgid ""
"Deletes an environment variable.\n"
"\n"
"Removes the variable `varname` from the environment.\n"
msgstr ""
"環境変数を削除します。\n"
"\n"
"環境から変数`varname`を取り除きます。\n"

#. TRANSLATORS: def System.at_exit(fun)
#: lib/system.ex:210
msgid ""
"Registers a program exit handler function.\n"
"\n"
"Registers a function that will be invoked at the end of program execution.\n"
"Useful for invoking a hook in \"script\" mode.\n"
"\n"
"The handler always executes in a different process from the one it was\n"
"registered in. As a consequence, any resources managed by the calling "
"process\n"
"(ETS tables, open files, etc.) won't be available by the time the handler\n"
"function is invoked.\n"
"\n"
"The function must receive the exit status code as an argument.\n"
msgstr ""
"プログラムのexitハンドラ関数を登録します。\n"
"\n"
"プログラムの実行の終わりに実行される、関数を登録します。\"script\"モード\n"
"でフックとして実行するのに便利です。\n"
"\n"
"ハンドラは登録されたものとは別のプロセスで通常は実行されます。結果とし\n"
"て呼び出したプロセスにより管理された如何なるリソース(ETSテーブル、開い\n"
"ているファイルなど)も、ハンドラ関数が実行された時には利用できません。\n"
"\n"
"関数は引数としてexitステータスコードを受け取らなくてはなりません。\n"

#. TRANSLATORS: def System.cmd(command, args, opts \\ [])
#: lib/system.ex:370
msgid ""
"Executes the given `command` with `args`.\n"
"\n"
"`command` is expected to be an executable available in PATH\n"
"unless an absolute path is given.\n"
"\n"
"`args` must be a list of strings which are not expanded\n"
"in any way. For example, this means wildcard expansion will\n"
"not happen unless `Path.wildcard/2` is used. On Windows though,\n"
"wildcard expansion is up to the program.\n"
"\n"
"This function returns a tuple containing the collected result\n"
"and the command exit status.\n"
"\n"
"## Examples\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"]\n"
"    {\"hello\\n\", 0}\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"], env: [{\"MIX_ENV\", \"test\"}]\n"
"    {\"hello\\n\", 0}\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"], into: IO.stream(:stdio, :line)\n"
"    hello\n"
"    {%IO.Stream{}, 0}\n"
"\n"
"## Options\n"
"\n"
"  * `:into` - injects the result into the given collectable, defaults to `"
"\"\"`\n"
"  * `:cd` - the directory to run the command in\n"
"  * `:env` - an enumerable of tuples containing environment key-value as "
"binary\n"
"  * `:arg0` - set the command arg0\n"
"  * `:stderr_to_stdout` - redirects stderr to stdout when `true`\n"
"  * `:parallelism` - when `true`, the VM will schedule port tasks to "
"improve\n"
"    parallelism in the system. If set to `false`, the VM will try to "
"perform\n"
"    commands immediately, improving latency at the expense of parallelism.\n"
"    The default can be set on system startup by passing the \"+spp\" "
"argument\n"
"    to `--erl`.\n"
"\n"
"## Error reasons\n"
"\n"
"If invalid arguments are given, `ArgumentError` is raised by\n"
"`System.cmd/3`. `System.cmd/3` also expects a strict set of\n"
"options and will raise if unknown or invalid options are given.\n"
"\n"
"Furthermore, `System.cmd/3` may fail with one of the POSIX reasons\n"
"detailed below:\n"
"\n"
"  * `:system_limit` - all available ports in the Erlang emulator are in use\n"
"\n"
"  * `:enomem` - there was not enough memory to create the port\n"
"\n"
"  * `:eagain` - there are no more available operating system processes\n"
"\n"
"  * `:enametoolong` - the external command given was too long\n"
"\n"
"  * `:emfile` - there are no more available file descriptors\n"
"    (for the operating system process that the Erlang emulator runs in)\n"
"\n"
"  * `:enfile` - the file table is full (for the entire operating system)\n"
"\n"
"  * `:eacces` - the command does not point to an executable file\n"
"\n"
"  * `:enoent` - the command does not point to an existing file\n"
"\n"
"## Shell commands\n"
"\n"
"If you desire to execute a trusted command inside a shell, with pipes,\n"
"redirecting and so on, please check\n"
"[`:os.cmd/1`](http://www.erlang.org/doc/man/os.html#cmd-1).\n"
msgstr ""
"与えられた`command`を`args`で実行します。\n"
"\n"
"`command`は、絶対パスを与えられないかぎり、PATHにある、\n"
"有効な実行可能ファイルと期待されます。\n"
"\n"
"`args`は、文字列のリストでなければならず、どのようにも展開されません。\n"
"例えば、これは、ワイルカード展開は`Path.wildcard/2`が使われないかぎり\n"
"起らないことを意味します。しかし、Windowsではワイルドカード\n"
"の展開はプログラム次第です。\n"
"\n"
"この関数は結果とコマンドのexitステータスのタプルを返します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"]\n"
"    {\"hello\\n\", 0}\n"
"\n"
"    iex> System.cmd \"echo\", [\"hello\"], env: [{\"MIX_ENV\", \"test\"}]\n"
"    {\"hello\\n\", 0}\n"
"    \n"
"    iex> System.cmd \"echo\", [\"hello\"], into: IO.stream(:stdio, :line)\n"
"    hello\n"
"    {%IO.Stream{}, 0}\n"
"\n"
"## Options\n"
"\n"
"  * `:into` - 与えられたcollectableに結果を挿入します。デフォルトは`\"\"`で"
"す\n"
"  * `:cd` - コマンドを実行するディレクトリを指定します\n"
"  * `:env` - バイナリの環境変数キーバリュータプルを含むenumerableを指定しま"
"す\n"
"  * `:arg0` - コマンドのarg0を指定します\n"
"  * `:stderr_to_stdout` - trueにすると、stderrをstdoutにリダイレクトします\n"
"  * `:parallelism` - trueにすると、VMはシステムの並行性を改善するために\n"
"    ポートタスクをスケジュールします。もしfalseにすると、VMはコマンドを\n"
"    直ちに実行し、並行性を犠牲にしてレイテンシを改善します。\n"
"    デフォルトは、`--erl`への引数\"+spp\"を渡すことによって、\n"
"    システムスタートアップで設定されます。\n"
"\n"
"## Error reasons\n"
"\n"
"もし無効な引数が与えられたら、`System.cmd/3`により、`ArgumentError`が上\n"
"ります。`System.cmd/3`は、オプションも正しいもののみを期待していて、不\n"
"明あるいは無効なオプションが与えられたときも、例外が上ります。\n"
"\n"
"更にまた、`System.cmd/3`は、下で詳述されるPOSIX reasonの一つで\n"
"失敗するかもしれません:\n"
"\n"
"  * `:system_limit` - Erlangエミュレータで全ての有効なポートが使われている\n"
"\n"
"  * `:enomem` - ポートを作成するための十分なメモリが無い\n"
"\n"
"  * `:eagain` - これ以上有効なオペレーティングシステムプロセスがない\n"
"\n"
"  * `:enametoolong` - 与えられた外部コマンドが長過ぎた\n"
"\n"
"  * `:emfile` - これ以上有効なファイル記述子が無い\n"
"    (Erlangエミュレータが動作するオペレーティングシステムプロセスで)\n"
"\n"
"  * `:enfile` - フィルテーブルがフル(オペレーティングシステム全体で)\n"
"\n"
"  * `:eacces` - commandが実行可能ファイルを示していない\n"
"\n"
"  * `:enoent` - commandが存在するファイルを示していない\n"
"\n"
"## Shell commands\n"
"\n"
"もしシェルの中で信頼されたコマンド、パイプ、リダイレクト、その他\n"
"を実行することを望むなら、\n"
"[:os.cmd/1](http://www.erlang.org/doc/man/os.html#cmd-1)\n"
"を、チェックしてください。\n"

#. TRANSLATORS: def System.get_pid()
#: lib/system.ex:274
msgid ""
"Erlang VM process identifier.\n"
"\n"
"Returns the process identifier of the current Erlang emulator\n"
"in the format most commonly used by the operating system environment.\n"
"\n"
"For more information, see [`:os.getpid/0`](http://www.erlang.org/doc/man/os."
"html#getpid-0).\n"
msgstr ""
"Erlang VM自体のプロセス識別子です。\n"
"\n"
"そのオペレーティングシステム環境で最も一般的に使われるフォーマット\n"
"で、現在のErlangエミュレータのプロセス識別子を返します。\n"
"\n"
"詳細は \n"
"[`:os.getpid/0`](http://www.erlang.org/doc/man/os.html#getpid-0)\n"
"を参照してください。\n"

#. TRANSLATORS: def System.tmp_dir()
#: lib/system.ex:156
msgid ""
"Writable temporary directory.\n"
"\n"
"Returns a writable temporary directory.\n"
"Searches for directories in the following order:\n"
"\n"
"  1. the directory named by the TMPDIR environment variable\n"
"  2. the directory named by the TEMP environment variable\n"
"  3. the directory named by the TMP environment variable\n"
"  4. `C:\\TMP` on Windows or `/tmp` on Unix\n"
"  5. as a last resort, the current working directory\n"
"\n"
"Returns `nil` if none of the above are writable.\n"
msgstr ""
"書き込み可能なテンポラリディレクトリ\n"
"\n"
"書き込み可能なテンポラリディレクトリを返します。\n"
"以下の順序でディレクトリを探します:\n"
"\n"
"  1. TMPDIR環境変数によるディレクトリ名\n"
"  2. TEMP環境変数によるディレクトリ名\n"
"  3. TMP環境変数によるディレクトリ名\n"
"  4. Windowsでは`C:\\TMP`、Linuxでは`/tmp`\n"
"  5. 最後にカレントワーキングディレクトリ\n"
"\n"
"上の全てが書込み不可だった場合、`nil`を返します。\n"

#. TRANSLATORS: def System.version()
#: lib/system.ex:65
msgid ""
"Elixir version information.\n"
"\n"
"Returns Elixir's version as binary.\n"
msgstr ""
"Elixirバージョン情報です。\n"
"\n"
"バイナリとしてElixirのバージョンを返します。\n"

#. TRANSLATORS: def System.get_env()
#: lib/system.ex:244
msgid ""
"System environment variables.\n"
"\n"
"Returns a list of all environment variables. Each variable is given as a\n"
"`{name, value}` tuple where both `name` and `value` are strings.\n"
msgstr ""
"システム環境変数です。\n"
"\n"
"全ての環境変数のリストを返します。それぞれの変数は`{name, value}`タプル\n"
"で、`name`と`value`はどちらも文字列として与えられます。\n"

#. TRANSLATORS: def System.time_offset(unit)
#: lib/system.ex:599
msgid ""
"Returns the current time offset between the Erlang monotonic time and the\n"
"Erlang system time.\n"
"\n"
"The result is returned in the given time unit `unit`. The returned offset,\n"
"added to an Erlang monotonic time (e.g., obtained with `monotonic_time/1`),\n"
"gives the Erlang system time that corresponds to that monotonic time.\n"
"\n"
"For more information, see the [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html) in "
"the\n"
"Erlang docs.\n"
"\n"
"Inlined by the compiler into `:erlang.time_offset/1`.\n"
msgstr ""
"現在のErlang monotonic timeとErlang system timeとの間の差を返します。\n"
"\n"
"結果は、与えられた`unit`単位で返されます。返されたオフセット\n"
"はErlang monotonic time (即ち `monotonic_time/1`) を加えると\n"
"monotonic timeに対応するErlang system timeが得られます。\n"
"\n"
"詳細は、Erlang文書[chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html) \n"
"を参照してください。\n"
"\n"
"コンパイラにより、`:erlang.time_offset/1`にインライン化されます。\n"

#. TRANSLATORS: def System.tmp_dir!()
#: lib/system.ex:178
msgid ""
"Writable temporary directory, exception on error.\n"
"\n"
"Same as `tmp_dir/0` but raises `RuntimeError`\n"
"instead of returning `nil` if no temp dir is set.\n"
msgstr ""
"書き込み可能なテンポラリディレクトリ、エラーで例外\n"
"\n"
"`tmp_dir/0`と同じですが、もしテンポラリディレクトリが\n"
"無い場合、`nil`を返すかわりに、`RuntimeError`を上げます。\n"

#. TRANSLATORS: Elixir.System Summary
#: lib/system.ex:2
msgid ""
"The System module provides access to variables used or\n"
"maintained by the VM and to functions that interact directly\n"
"with the VM or the host system.\n"
msgstr ""
"SystemモジュールはVMにより使用、維持される変数、\n"
"VMまたはホストシステムへの直接の相互作用をする関数\n"
"へのアクセスを提供します。\n"

#. TRANSLATORS: def System.user_home!()
#: lib/system.ex:145
msgid ""
"User home directory, exception on error.\n"
"\n"
"Same as `user_home/0` but raises `RuntimeError`\n"
"instead of returning `nil` if no user home is set.\n"
msgstr ""
"ユーザホームディレクトリを返し、エラー時に例外を生成します。\n"
"\n"
"`user_home/0`と同じですが、\n"
"もしユーザホームがセットされていない場合、`nil`を返すか\n"
"わりに`RuntimeError`を上げます。\n"

#. TRANSLATORS: def System.argv(args)
#: lib/system.ex:93
msgid ""
"Modifies command line arguments.\n"
"\n"
"Changes the list of command line arguments. Use it with caution,\n"
"as it destroys any previous argv information.\n"
msgstr ""
"コマンドライン引数を変更します。\n"
"\n"
"コマンドライン引数のリストを変更します。\n"
"以前のargv情報は全て破壊されますので、注意して使用してください。\n"

#. TRANSLATORS: def System.monotonic_time(unit)
#: lib/system.ex:531
msgid ""
"Returns the current monotonic time in the given time unit.\n"
"\n"
"For more information, see the [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html) in "
"the\n"
"Erlang docs.\n"
"\n"
"Inlined by the compiler into `:erlang.monotonic_time/1`.\n"
msgstr ""
"与えられた時間unitでの現在のmonotonic timeを返します。\n"
"\n"
"詳細は、Erlang文書 [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html) \n"
"を参照してください。\n"
"\n"
"コンパイラにより `:erlang.monotonic_time/1`にインライン化されます。\n"

#. TRANSLATORS: def System.find_executable(program)
#: lib/system.ex:227
msgid ""
"Locates an executable on the system.\n"
"\n"
"This function looks up an executable program given\n"
"its name using the environment variable PATH on Unix\n"
"and Windows. It also considers the proper executable\n"
"extension for each OS, so for Windows it will try to\n"
"lookup files with `.com`, `.cmd` or similar extensions.\n"
msgstr ""
"システム上の実行ファイルの場所を探します。\n"
"\n"
"この関数は、UnixやWindowsでの環境変数PATHを使い、\n"
"与えられた名前の実行可能プログラムを見付けます。\n"
"それぞれのOS毎に適当な実行可能拡張子を考慮するので、\n"
"Windowsでは`.com`、`.cmd`または類似した拡張子で\n"
"ファイルを探します。\n"

#. TRANSLATORS: def System.unique_integer(modifiers \\ [])
#: lib/system.ex:618
msgid ""
"Generates and returns an integer that is unique in the current runtime\n"
"instance.\n"
"\n"
"\"Unique\" means that this function, called with the same list of "
"`modifiers`,\n"
"will never return the same integer more than once on the current runtime\n"
"instance.\n"
"\n"
"If `modifiers` is `[]`, then an unique integer (that can be positive or "
"negative) is returned.\n"
"Other modifiers can be passed to change the properties of the returned "
"integer:\n"
"\n"
"  * `:positive` - the returned integer is guaranteed to be positive.\n"
"  * `:monotonic` - the returned integer is monotonically increasing. This\n"
"    means that, on the same runtime instance (but even on different\n"
"    processes), integers returned using the `:monotonic` modifier will "
"always\n"
"    be strictly less than integers returned by successive calls with the\n"
"    `:monotonic` modifier.\n"
"\n"
"All modifiers listed above can be combined; repeated modifiers in "
"`modifiers`\n"
"will be ignored.\n"
"\n"
"Inlined by the compiler into `:erlang.unique_integer/1`.\n"
msgstr ""
"現在のランタイムインスタンスでのユニークな整数を生成して返します。\n"
"\n"
"この関数が意味する\"unique\"は、同じ`modifiers`のリストで呼び出す限り、\n"
"現在のランタイムインスタンスは一度返した値を二度と返さないという\n"
"ことです。\n"
"\n"
"`modifiers`が`[]`なら、uniqueな整数(正負両方が有り得ます)を返します。\n"
"他のモディファイアを渡すことで、返される整数の属性を変更することが\n"
"出来ます:\n"
"\n"
"  * `:positive` - 正の整数を返すことを保証します\n"
"  * `:monotonic` - 単調増加の整数を返します。これは、同じランタイム\n"
"    インスタンスでは(異るプロセスでさえ)、`:monotonic`モディファイア\n"
"    を使って返された整数は、後に続く`:monotonic`モディファイアを\n"
"    使った呼出しの戻値より小さいということを意味します。\n"
"\n"
"上の全てのモディファイアは組み合わせることができ; `modifiers`の\n"
"なかの繰り返されたモディファイアは単に無視されます。\n"
"\n"
"コンパイラにより`:erlang.unique_integer/1`にインライン化されます。\n"

#. TRANSLATORS: def System.argv()
#: lib/system.ex:83
msgid ""
"Lists command line arguments.\n"
"\n"
"Returns the list of command line arguments passed to the program.\n"
msgstr ""
"コマンドライン引数のリストです。\n"
"\n"
"プログラムに渡された、コマンドライン引数のリストを返します。\n"

#. TRANSLATORS: def System.cwd()
#: lib/system.ex:104
msgid ""
"Current working directory.\n"
"\n"
"Returns the current working directory or `nil` if one\n"
"is not available.\n"
msgstr ""
"カレントワーキングディレクトリ。\n"
"\n"
"カレントワーキングディレクトリを返します。\n"
"もしそれが利用できないなら、`nil`を返します。\n"

#. TRANSLATORS: def System.convert_time_unit(time, from_unit, to_unit)
#: lib/system.ex:573
msgid ""
"Converts `time` from time unit `from_unit` to time unit `to_unit`. The "
"result\n"
"is rounded via the floor function.\n"
"\n"
"Inlined by the compiler into `:erlang.convert_time_unit/3`.\n"
msgstr ""
"時間単位`from_unit`から時間単位`to_unit`へ`time`を変換します。\n"
"結果はfloor関数によって丸められます。\n"
"\n"
"コンパイラにより`:erlang.convert_time_unit/3`へインライン化されます。\n"

#. TRANSLATORS: def System.system_time()
#: lib/system.ex:545
msgid ""
"Returns the current system time in the `:native` time unit.\n"
"\n"
"For more information, see the [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html) in "
"the\n"
"Erlang docs.\n"
"\n"
"Inlined by the compiler into `:erlang.system_time/0`.\n"
msgstr ""
"`:native`時間単位での現在のsystem timeを返します。\n"
"\n"
"詳細は、Erlang文書 [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html) \n"
"を参照してください。\n"
"\n"
"コンパイラにより `:erlang.system_time/0` にインライン化されます。\n"

#. TRANSLATORS: def System.halt(status \\ 0)
#: lib/system.ex:331
msgid ""
"Halts the Erlang runtime system.\n"
"\n"
"Halts the Erlang runtime system where the argument `status` must be a\n"
"non-negative integer, the atom `:abort` or a binary.\n"
"\n"
"  * If an integer, the runtime system exits with the integer value which\n"
"    is returned to the operating system.\n"
"\n"
"  * If `:abort`, the runtime system aborts producing a core dump, if that "
"is\n"
"    enabled in the operating system.\n"
"\n"
"  * If a string, an Erlang crash dump is produced with status as slogan,\n"
"    and then the runtime system exits with status code 1.\n"
"\n"
"Note that on many platforms, only the status codes 0-255 are supported\n"
"by the operating system.\n"
"\n"
"For more information, see [`:erlang.halt/1`](http://www.erlang.org/doc/man/"
"erlang.html#halt-1).\n"
"\n"
"## Examples\n"
"\n"
"    System.halt(0)\n"
"    System.halt(1)\n"
"    System.halt(:abort)\n"
"\n"
msgstr ""
"Erlangランタイムシステムを停止します。\n"
"\n"
"Erlangランタイムシステムを停止します。その引数`status`は非負の整数か、アト\n"
"ム`:abort`か、バイナリでなくなてはなりません。\n"
"\n"
"  * もし整数ならランタイムシステムはその整数値でexitし、\n"
"    オペレーティングシステムにその値を返します。\n"
"\n"
"  * もし`:abort`なら、ランタイムシステムはアボートし、オペレーティング\n"
"    システムがコアダンプを有効にしていれば、コアダンプを生成します。\n"
"\n"
"  * もし文字列なら、erlang crash dumpがその文字列とともに生成され、\n"
"    ランタイムシステムはステータスコード 1としてexitします。\n"
"\n"
"なお、多くのプラットフォームでは、オペレーティングシステムによるステー\n"
"タスコードは、0-255だけがサポートされます。\n"
"\n"
"詳細は、\n"
"[`:erlang.halt/1`](http://www.erlang.org/doc/man/erlang.html#halt-1)\n"
"をチェックしてください。\n"
"\n"
"## 例\n"
"\n"
"    System.halt(0)\n"
"    System.halt(1)\n"
"    System.halt(:abort)\n"
"\n"

#. TRANSLATORS: def System.system_time(unit)
#: lib/system.ex:559
msgid ""
"Returns the current system time in the given time unit.\n"
"\n"
"For more information, see the [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html) in "
"the\n"
"Erlang docs.\n"
"\n"
"Inlined by the compiler into `:erlang.system_time/1`.\n"
msgstr ""
"与えらえれた時間単位での現在のsystem timeを返します。\n"
"\n"
"詳細は、Erlang文書 [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html) \n"
"を参照してください。\n"
"\n"
"コンパイラにより `:erlang.system_time/1` にインライン化されます。\n"

#. TRANSLATORS: def System.put_env(enum)
#: lib/system.ex:296
msgid ""
"Sets multiple environment variables.\n"
"\n"
"Sets a new value for each environment variable corresponding\n"
"to each key in `dict`.\n"
msgstr ""
"複数の環境変数をセットします。\n"
"\n"
"`dict`の中のそれぞれのキーに一致しているそれぞれの環境変数に\n"
"新しい値をセットします。\n"

#. TRANSLATORS: def System.stacktrace()
#: lib/system.ex:318
msgid ""
"Last exception stacktrace.\n"
"\n"
"Note that the Erlang VM (and therefore this function) does not\n"
"return the current stacktrace but rather the stacktrace of the\n"
"latest exception.\n"
"\n"
"Inlined by the compiler into `:erlang.get_stacktrace/0`.\n"
msgstr ""
"最後の例外のスタックトレースです。\n"
"\n"
"Erlang VM(と従ってこの関数)が現在のスタックトレースではなく、\n"
"むしろ、最後の例外のスタックトレースを返すことに、注意してください。\n"
"\n"
"コンパイラにより`:erlang.get_stacktrace/0`にインライン化されます。\n"

#. TRANSLATORS: def System.endianness()
#: lib/system.ex:50
msgid "Returns the endianness.\n"
msgstr "エンディアンを返します。\n"

#. TRANSLATORS: def System.user_home()
#: lib/system.ex:136
msgid ""
"User home directory.\n"
"\n"
"Returns the user home directory (platform independent).\n"
msgstr ""
"ユーザホームディレクトリです。\n"
"\n"
"(プラットフォーム非依存の)ユーザホームディレクトリを返します。\n"

#. TRANSLATORS: def System.put_env(varname, value)
#: lib/system.ex:285
msgid ""
"Sets an environment variable value.\n"
"\n"
"Sets a new `value` for the environment variable `varname`.\n"
msgstr ""
"環境変数の値をセットします。\n"
"\n"
"環境変数`varname`に新しい`value`をセットします。\n"

#. TRANSLATORS: def System.cwd!()
#: lib/system.ex:126
msgid ""
"Current working directory, exception on error.\n"
"\n"
"Returns the current working directory or raises `RuntimeError`.\n"
msgstr ""
"カレントワーキングディレクトリ。エラー時に例外。\n"
"\n"
"カレントワーキングディレクトリを返します。または、`RuntimeError`を上げま"
"す。\n"

#. TRANSLATORS: def System.get_env(varname)
#: lib/system.ex:259
msgid ""
"Environment variable value.\n"
"\n"
"Returns the value of the environment variable\n"
"`varname` as a binary, or `nil` if the environment\n"
"variable is undefined.\n"
msgstr ""
"環境変数の値を取得します。\n"
"\n"
"バイナリとして`varname`環境変数の値を返します。\n"
"環境変数が定義されていないなら、`nil`を返します。\n"

#. TRANSLATORS: def System.monotonic_time()
#: lib/system.ex:514
msgid ""
"Returns the current monotonic time in the `:native` time unit.\n"
"\n"
"This time is monotonically increasing and starts in an unspecified point in\n"
"time.\n"
"\n"
"For more information, see the [chapter on time and time\n"
"correction](http://www.erlang.org/doc/apps/erts/time_correction.html) in "
"the\n"
"Erlang docs.\n"
"\n"
"Inlined by the compiler into `:erlang.monotonic_time/0`.\n"
msgstr ""
"`:native`時間単位での現在のmonotonic timeを返します。\n"
"\n"
"この時間は、不特定の時刻からの始まり、単調に増加します。\n"
"\n"
"詳細は、Erlang文書\n"
"[chapter on time and time correction](http://www.erlang.org/doc/apps/erts/"
"time_correction.html) を参照してください。\n"
"\n"
"コンパイラにより、`:erlang.monotonic_time/0`にインライン化されます。\n"

#. TRANSLATORS: def System.time_offset()
#: lib/system.ex:584
msgid ""
"Returns the current time offset between the Erlang monotonic time and the\n"
"Erlang system time.\n"
"\n"
"The result is returned in the `:native` time unit.\n"
"\n"
"See `time_offset/1` for more information.\n"
"\n"
"Inlined by the compiler into `:erlang.time_offset/0`.\n"
msgstr ""
"現在のErlang monotonic timeとErlang system timeとの間の差を返します。\n"
"\n"
"結果は、`:native`時間単位で返されます。\n"
"\n"
"詳細は `time_offset/1`を参照してください。\n"
"\n"
"コンパイラにより、`:erlang.time_offset/0`にインライン化されます。\n"
