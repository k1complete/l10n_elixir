#. TRANSLATORS: Elixir.Access Summary
#: lib/access.ex:1 
msgid ""
"The Access protocol is used by `foo[bar]` and also\n"
"empowers the nested update functions in Kernel.\n"
"\n"
"For instance, `foo[bar]` translates `Access.get(foo, bar)`.\n"
"`Kernel.get_in/2`, `Kernel.put_in/3`, `Kernel.update_in/3` and\n"
"`Kernel.get_and_update_in/3` are also all powered by the Access\n"
"protocol.\n"
"\n"
"This protocol is implemented by default for keywords, maps\n"
"and dictionary like types:\n"
"\n"
"    iex> keywords = [a: 1, b: 2]\n"
"    iex> keywords[:a]\n"
"    1\n"
"\n"
"    iex> map = %{a: 1, b: 2}\n"
"    iex> map[:a]\n"
"    1\n"
"\n"
"    iex> star_ratings = %{1.0 => \"★\", 1.5 => \"★☆\", 2.0 => \"★★\"}\n"
"    iex> star_ratings[1.5]\n"
"    \"★☆\"\n"
"\n"
"The key comparison must be implemented using the `===` operator.\n"
msgstr ""
#. TRANSLATORS: def Access.get_and_update(container, key, fun)
#: lib/access.ex:44 
msgid ""
"Gets a value and updates the given `key` in one pass.\n"
"\n"
"The function must receive the value for the given `key`\n"
"(or `nil` if the key doesn't exist in `container`) and\n"
"the function must return a tuple containing the `get`\n"
"value and the new value to be stored in the `container`.\n"
msgstr ""
#. TRANSLATORS: def container[key]
#: lib/access.ex:33 
msgid ""
"Accesses the given key in the container.\n"
msgstr ""
