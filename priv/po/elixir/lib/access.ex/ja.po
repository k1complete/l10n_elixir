msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-09-25 23:28+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Access.get(container, key, default \\ nil)
#: lib/access.ex:67
msgid "Gets the container's value for the given key.\n"
msgstr "与えられたキーに対するコンテナの値を取得します。\n"

#. TRANSLATORS: def Access.get_and_update(container, key, fun)
#: lib/access.ex:78
msgid ""
"Gets and updates the container's value for the given key, in a single pass.\n"
"\n"
"The argument function `fun` must receive the value for the given `key` (or\n"
"`nil` if the key doesn't exist in `container`). It must return a tuple\n"
"containing the `get` value and the new value to be stored in the "
"`container`.\n"
"\n"
"This function returns a two-element tuple.\n"
"The first element is the `get` value, as returned by `fun`.\n"
"The second element is the container, updated with the value returned by "
"`fun`.\n"
msgstr ""
"一度のパスで、与えられた`key`の値を取得し、コンテナを更新します。\n"
"\n"
"引数の関数`fun`は、与えられた`key`の値(または、もし`container`にキーが\n"
"存在しないなら、`nil`)を受け取らなければならず、関数は`get`した値と、\n"
"`container`に保存された新しい値を含むタプルを返さなくてはなりません。\n"
"\n"
"この関数は2要素のタプルを返します。\n"
"最初の要素は、`fun`から返された`get`した値です。\n"
"二つめの要素は、`fun`から返された値で更新されたコンテナです。\n"

#. TRANSLATORS: def Access.fetch(container, key)
#: lib/access.ex:42
msgid "Fetches the container's value for the given key.\n"
msgstr "与えられたキーに対するコンテナの値を取得します。\n"

#. TRANSLATORS: Elixir.Access Summary
#: lib/access.ex:2
msgid ""
"Dictionary-like access to data structures via the `foo[bar]` syntax.\n"
"\n"
"This module also empowers `Kernel`s nested update functions\n"
"`Kernel.get_in/2`, `Kernel.put_in/3`, `Kernel.update_in/3` and\n"
"`Kernel.get_and_update_in/3`.\n"
"\n"
"## Examples\n"
"\n"
"Out of the box, Access works with built-in dictionaries: `Keyword`\n"
"and `Map`:\n"
"\n"
"    iex> keywords = [a: 1, b: 2]\n"
"    iex> keywords[:a]\n"
"    1\n"
"\n"
"    iex> map = %{a: 1, b: 2}\n"
"    iex> map[:a]\n"
"    1\n"
"\n"
"    iex> star_ratings = %{1.0 => \"★\", 1.5 => \"★☆\", 2.0 => \"★★\"}\n"
"    iex> star_ratings[1.5]\n"
"    \"★☆\"\n"
"\n"
"Furthermore, Access transparently ignores `nil` values:\n"
"\n"
"    iex> keywords = [a: 1, b: 2]\n"
"    iex> keywords[:c][:unknown]\n"
"    nil\n"
"\n"
"The key comparison must be implemented using the `===` operator.\n"
msgstr ""
"`foo[bar]`シンタックスを介した辞書ライクなデータ構造へのアクセス\n"
"\n"
"このモジュールは`Kernel`のネストした更新関数\n"
"`Kernel.get_in/2`, `Kernel.put_in/3`, `Kernel.update_in/3`と\n"
"`Kernel.get_and_update_in/3`にも能力を与えます。\n"
"\n"
"## 例\n"
"\n"
"アクセスプロトコルは、ビルトイン辞書: `Keyword`と`Map`ですぐに使えます:\n"
"\n"
"    iex> keywords = [a: 1, b: 2]\n"
"    iex> keywords[:a]\n"
"    1\n"
"\n"
"    iex> map = %{a: 1, b: 2}\n"
"    iex> map[:a]\n"
"    1\n"
"\n"
"    iex> star_ratings = %{1.0 => \"★\", 1.5 => \"★☆\", 2.0 => \"★★\"}\n"
"    iex> star_ratings[1.5]\n"
"    \"★☆\"\n"
"\n"
"なお、Accessプロトコルは、`nil`値を透過的に無視します:\n"
"\n"
"    iex> keywords = [a: 1, b: 2]\n"
"    iex> keywords[:c][:unknown]\n"
"    nil\n"
"\n"
"キーの比較は`===`演算子を使って実装されなければなりません。\n"
