#. TRANSLATORS: @type kind
#: lib/exception.ex:20 
msgid ""
"The kind handled by formatting functions"
msgstr ""
#. TRANSLATORS: @type t
#: lib/exception.ex:17 
msgid ""
"The exception type"
msgstr ""
#. TRANSLATORS: def Exception.exception?(term)
#: lib/exception.ex:34 
msgid ""
"Returns `true` if the given `term` is an exception.\n"
msgstr ""
#. TRANSLATORS: def Exception.format_fa(fun, arity)
#: lib/exception.ex:391 
msgid ""
"Receives an anonymous function and arity and formats it as\n"
"shown in stacktraces. The arity may also be a list of arguments.\n"
"\n"
"## Examples\n"
"\n"
"    Exception.format_fa(fn -> end, 1)\n"
"    #=> \"#Function<...>/1\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Exception.format_stacktrace_entry(entry)
#: lib/exception.ex:338 
msgid ""
"Receives a stacktrace entry and formats it into a string.\n"
msgstr ""
#. TRANSLATORS: def Exception.format_mfa(module, fun, arity)
#: lib/exception.ex:405 
msgid ""
"Receives a module, fun and arity and formats it\n"
"as shown in stacktraces. The arity may also be a list\n"
"of arguments.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Exception.format_mfa Foo, :bar, 1\n"
"    \"Foo.bar/1\"\n"
"\n"
"    iex> Exception.format_mfa Foo, :bar, []\n"
"    \"Foo.bar()\"\n"
"\n"
"    iex> Exception.format_mfa nil, :bar, []\n"
"    \"nil.bar()\"\n"
"\n"
"Anonymous functions are reported as -func/arity-anonfn-count-,\n"
"where func is the name of the enclosing function. Convert to\n"
"\"anonymous fn in func/arity\"\n"
msgstr ""
#. TRANSLATORS: def Exception.format(kind, payload, stacktrace \\ nil)
#: lib/exception.ex:130 
msgid ""
"Normalizes and formats throw/errors/exits and stacktrace.\n"
"\n"
"It relies on `format_banner/3` and `format_stacktrace/1`\n"
"to generate the final format.\n"
"\n"
"Note that `{:EXIT, pid}` do not generate a stacktrace though\n"
"(as they are retrieved as messages without stacktraces).\n"
msgstr ""
#. TRANSLATORS: def Exception.format_banner(kind, exception, stacktrace \\ nil)
#: lib/exception.ex:97 
msgid ""
"Normalizes and formats any throw, error and exit.\n"
"\n"
"The message is formatted and displayed in the same\n"
"format as used by Elixir's CLI.\n"
"\n"
"The third argument, a stacktrace, is optional. If it is\n"
"not supplied `System.stacktrace/0` will sometimes be used\n"
"to get additional information for the `kind` `:error`. If\n"
"the stacktrace is unknown and `System.stacktrace/0` would\n"
"not return the stacktrace corresponding to the exception\n"
"an empty stacktrace, `[]`, must be used.\n"
msgstr ""
#. TRANSLATORS: def Exception.normalize(kind, payload, stacktrace \\ nil)
#: lib/exception.ex:63 
msgid ""
"Normalizes an exception, converting Erlang exceptions\n"
"to Elixir exceptions.\n"
"\n"
"It takes the `kind` spilled by `catch` as an argument and\n"
"normalizes only `:error`, returning the untouched payload\n"
"for others.\n"
"\n"
"The third argument, a stacktrace, is optional. If it is\n"
"not supplied `System.stacktrace/0` will sometimes be used\n"
"to get additional information for the `kind` `:error`. If\n"
"the stacktrace is unknown and `System.stacktrace/0` would\n"
"not return the stacktrace corresponding to the exception\n"
"an empty stacktrace, `[]`, must be used.\n"
msgstr ""
#. TRANSLATORS: def Exception.format_stacktrace(trace \\ nil)
#: lib/exception.ex:374 
msgid ""
"Formats the stacktrace.\n"
"\n"
"A stacktrace must be given as an argument. If not, the stacktrace\n"
"is retrieved from `Process.info/2`.\n"
msgstr ""
#. TRANSLATORS: def Exception.format_file_line(file, line)
#: lib/exception.ex:449 
msgid ""
"Formats the given file and line as shown in stacktraces.\n"
"If any of the values are `nil`, they are omitted.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Exception.format_file_line(\"foo\", 1)\n"
"    \"foo:1:\"\n"
"\n"
"    iex> Exception.format_file_line(\"foo\", nil)\n"
"    \"foo:\"\n"
"\n"
"    iex> Exception.format_file_line(nil, nil)\n"
"    \"\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Exception.format_exit(reason)
#: lib/exception.ex:157 
msgid ""
"Formats an exit, returns a string.\n"
"\n"
"Often there are errors/exceptions inside exits. Exits are often\n"
"wrapped by the caller and provide stacktraces too. This function\n"
"formats exits in a way to nicely show the exit reason, caller\n"
"and stacktrace.\n"
msgstr ""
#. TRANSLATORS: def Exception.message(exception)
#: lib/exception.ex:44 
msgid ""
"Gets the message for an exception.\n"
msgstr ""
#. TRANSLATORS: Elixir.Exception Summary
#: lib/exception.ex:2 
msgid ""
"Functions to format throw/catch/exit and exceptions.\n"
"\n"
"Note that stacktraces in Elixir are updated on throw,\n"
"errors and exits. For example, at any given moment,\n"
"`System.stacktrace/0` will return the stacktrace for the\n"
"last throw/error/exit that occurred in the current process.\n"
"\n"
"Do not rely on the particular format returned by the `format`\n"
"functions in this module. They may be changed in future releases\n"
"in order to better suit Elixir's tool chain. In other words,\n"
"by using the functions in this module it is guaranteed you will\n"
"format exceptions as in the current Elixir version being used.\n"
msgstr ""
