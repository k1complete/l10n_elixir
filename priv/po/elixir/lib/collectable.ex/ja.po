msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-05-20 21:53+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Collectable.into(collectable)
#: lib/collectable.ex:31
msgid ""
"Returns a function that collects values alongside\n"
"the initial accumulation value.\n"
"\n"
"The returned function receives a collectable and injects a given\n"
"value into it for every `{:cont, term}` instruction.\n"
"\n"
"`:done` is passed when no further values will be injected, useful\n"
"for closing resources and normalizing values. A collectable must\n"
"be returned on `:done`.\n"
"\n"
"If injection is suddenly interrupted, `:halt` is passed and it can\n"
"return any value, as it won't be used.\n"
msgstr ""
"初期アキュムレータと一緒に値を集める関数を返します。\n"
"\n"
"返された関数は、collectableであるアキュムレータを受け取り、与えられた値\n"
"を`{:cont, term}`指令毎にアキュムレータに注入して、新しいアキュムレータ\n"
"を返します。\n"
"\n"
"`:done`は更なる値が注入されないときに渡されます。リソースのクローズと値\n"
"の正規化に役立ちます。`:done`ではcollectableが返されなければなりません。\n"
"\n"
"もし注入が突然中断されたら、`:halt`がパスされます。戻り値は使われないの\n"
"で、任意の値を返すことができます。\n"

#. TRANSLATORS: Elixir.Collectable Summary
#: lib/collectable.ex:2
#, fuzzy
msgid ""
"A protocol to traverse data structures.\n"
"\n"
"The `Enum.into/2` function uses this protocol to insert an\n"
"enumerable into a collection:\n"
"\n"
"    iex> Enum.into([a: 1, b: 2], %{})\n"
"    %{a: 1, b: 2}\n"
"\n"
"## Why Collectable?\n"
"\n"
"The `Enumerable` protocol is useful to take values out of a collection.\n"
"In order to support a wide range of values, the functions provided by\n"
"the `Enumerable` protocol do not keep shape. For example, passing a\n"
"map to `Enum.map/2` always returns a list.\n"
"\n"
"This design is intentional. `Enumerable` was designed to support infinite\n"
"collections, resources and other structures with fixed shape. For example,\n"
"it doesn't make sense to insert values into a range, as it has a fixed\n"
"shape where just the range limits are stored.\n"
"\n"
"The `Collectable` module was designed to fill the gap left by the\n"
"`Enumerable` protocol. `into/1` can be seen as the opposite of\n"
"`Enumerable.reduce/3`. If `Enumerable` is about taking values out,\n"
"`Collectable.into/1` is about collecting those values into a structure.\n"
msgstr ""
"データ構造をトラバースするプロトコルです。\n"
"\n"
"`Enum.into/2`関数は、コレクションにenumerableを挿入するために、\n"
"このプロトコルを使います:\n"
"\n"
"    iex> Enum.into([a: 1, b: 2], %{})\n"
"    %{a: 1, b: 2}\n"
"\n"
"## Why Collectable?\n"
"\n"
"`Enumerable`プロトコルはコレクションから値を取り出すのに役立ちます。\n"
"広範囲にわたる値をサポートするために、\n"
"`Enumerable`プロトコルによって提供される関数は、形を持ちません。\n"
"例えば、`Enum.map/2`に辞書を渡すことは、常にリストを返します。\n"
"\n"
"このデザインは意図的です。\n"
"`Enumerable`は、一定の形で、無限のコレクション、リソース、\n"
"その他の構造をサポートするためにデザインさました。例えば、\n"
"それだけで範囲の制限が格納されている固定された形状しているので、\n"
"範囲に値を挿入しても意味をなしません。\n"
"\n"
"`Collectable`モジュールは`Enumerable`による残りのギャップを\n"
"埋めるためにデザインされました。それは二つの関数を提供します:\n"
"`into/1`と`empty/1`です。\n"
"\n"
"`into/1`は`Enumerable.reduce/3`の正反対と見做すことができます。\n"
"`Enumerable`が値の取り出しなら、`Collectable.into/1`は\n"
"値を構造に収集することです。\n"
