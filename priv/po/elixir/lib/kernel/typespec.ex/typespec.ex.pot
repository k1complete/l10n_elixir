#. TRANSLATORS: defmacro Kernel.Typespec.deftypep(type)
#: lib/kernel/typespec.ex:249 
msgid ""
"Defines a private type.\n"
"This macro is responsible for handling the attribute `@typep`.\n"
"\n"
"## Examples\n"
"\n"
"    @typep my_type :: atom\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Kernel.Typespec.defcallback(spec)
#: lib/kernel/typespec.ex:279 
msgid ""
"Defines a callback.\n"
"This macro is responsible for handling the attribute `@callback`.\n"
"\n"
"## Examples\n"
"\n"
"    @callback add(number, number) :: number\n"
"\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.define_type(kind, expr, doc \\ nil, env)
#: lib/kernel/typespec.ex:288 
msgid ""
"Defines a `type`, `typep` or `opaque` by receiving a typespec expression.\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.define_spec(kind, expr, env)
#: lib/kernel/typespec.ex:295 
msgid ""
"Defines a `spec` by receiving a typespec expression.\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.defines_type?(module, name, arity)
#: lib/kernel/typespec.ex:304 
msgid ""
"Returns `true` if the current module defines a given type\n"
"(private, opaque or not). This function is only available\n"
"for modules being compiled.\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.defines_spec?(module, name, arity)
#: lib/kernel/typespec.ex:317 
msgid ""
"Returns `true` if the current module defines a given spec.\n"
"This function is only available for modules being compiled.\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.defines_callback?(module, name, arity)
#: lib/kernel/typespec.ex:328 
msgid ""
"Returns `true` if the current module defines a callback.\n"
"This function is only available for modules being compiled.\n"
msgstr ""
#. TRANSLATORS: Elixir.Kernel.Typespec Summary
#: lib/kernel/typespec.ex:1 
msgid ""
"Provides macros and functions for working with typespecs.\n"
"\n"
"Elixir comes with a notation for declaring types and specifications. Elixir is\n"
"dynamically typed, as such typespecs are never used by the compiler to\n"
"optimize or modify code. Still, using typespecs is useful as documentation and\n"
"tools such as [Dialyzer](http://www.erlang.org/doc/man/dialyzer.html) can\n"
"analyze the code with typespecs to find bugs.\n"
"\n"
"The attributes `@type`, `@opaque`, `@typep`, `@spec` and `@callback` available\n"
"in modules are handled by the equivalent macros defined by this module. See\n"
"sub-sections \"Defining a type\" and \"Defining a specification\" below.\n"
"\n"
"## Types and their syntax\n"
"\n"
"The type syntax provided by Elixir is fairly similar to the one in\n"
"[Erlang](http://www.erlang.org/doc/reference_manual/typespec.html).\n"
"\n"
"Most of the built-in types provided in Erlang (for example, `pid()`) are\n"
"expressed the same way: `pid()` or simply `pid`. Parameterized types are also\n"
"supported (`list(integer)`) and so are remote types (`Enum.t`).\n"
"\n"
"Integers and atom literals are allowed as types (ex. `1`, `:atom` or\n"
"`false`). All other types are built of unions of predefined types. Certain\n"
"shorthands are allowed, such as `[...]`, `<<>>` and `{...}`.\n"
"\n"
"### Predefined types\n"
"\n"
"    Type :: any         # the top type, the set of all terms\n"
"          | none        # the bottom type, contains no terms\n"
"          | pid\n"
"          | port\n"
"          | reference\n"
"          | Atom\n"
"          | Bitstring\n"
"          | float\n"
"          | Fun\n"
"          | Integer\n"
"          | List\n"
"          | Map\n"
"          | Tuple\n"
"          | Union\n"
"          | UserDefined # Described in section \"Defining a type\"\n"
"\n"
"    Atom :: atom\n"
"          | ElixirAtom # `:foo`, `:bar`, ...\n"
"\n"
"    Bitstring :: <<>>\n"
"               | << _ :: M >>             # M is a positive integer\n"
"               | << _ :: _ * N >>         # N is a positive integer\n"
"               | << _ :: M, _ :: _ * N >>\n"
"\n"
"    Fun :: (... -> any)    # any function\n"
"         | (... -> Type)   # any arity, returning Type\n"
"         | (() -> Type))\n"
"         | (TList -> Type)\n"
"\n"
"    Integer :: integer\n"
"             | ElixirInteger                # ..., -1, 0, 1, ... 42 ...\n"
"             | ElixirInteger..ElixirInteger # an integer range\n"
"\n"
"    List :: list(Type)                        # proper list ([]-terminated)\n"
"          | improper_list(Type1, Type2)       # Type1=contents, Type2=termination\n"
"          | maybe_improper_list(Type1, Type2) # Type1 and Type2 as above\n"
"          | nonempty_list(Type)               # proper non-empty list\n"
"          | []                                # empty list\n"
"          | [Type]                            # shorthand for list(Type)\n"
"          | [...]                             # shorthand for nonempty_list()\n"
"          | [Type, ...]                       # shorthand for nonempty_list(Type)\n"
"          | [Keyword]\n"
"\n"
"    Map :: map()            # map of any size\n"
"         | %{}              # map of any size\n"
"         | %Struct{}        # struct (see defstruct/1)\n"
"         | %Struct{Keyword}\n"
"         | %{Keyword}\n"
"         | %{Pairs}\n"
"\n"
"    Tuple :: tuple                 # a tuple of any size\n"
"           | {}                    # empty tuple\n"
"           | {TList}\n"
"           | record(Atom)          # record (see Record)\n"
"           | record(Atom, Keyword)\n"
"\n"
"    Keyword :: ElixirAtom: Type\n"
"             | ElixirAtom: Type, Keyword\n"
"\n"
"    Pairs :: Type => Type\n"
"           | Type => Type, Pairs\n"
"\n"
"    TList :: Type\n"
"           | Type, TList\n"
"\n"
"    Union :: Type | Type\n"
"\n"
"### Bit strings\n"
"\n"
"Bit string with a base size of 3:\n"
"\n"
"    << _ :: 3 >>\n"
"\n"
"Bit string with a unit size of 8:\n"
"\n"
"    << _ :: _ * 8 >>\n"
"\n"
"### Anonymous functions\n"
"\n"
"Any anonymous function:\n"
"\n"
"    ((...) -> any)\n"
"    (... -> any)\n"
"\n"
"Anonymous function with arity of zero:\n"
"\n"
"    (() -> type)\n"
"\n"
"Anonymous function with some arity:\n"
"\n"
"    ((type, type) -> type)\n"
"    (type, type -> type)\n"
"\n"
"## Built-in types\n"
"\n"
"Built-in type         | Defined as\n"
":-------------------- | :---------\n"
"`term`                | `any`\n"
"`binary`              | `<< _ :: _ * 8 >>`\n"
"`bitstring`           | `<< _ :: _ * 1 >>`\n"
"`boolean`             | `false` \\| `true`\n"
"`byte`                | `0..255`\n"
"`char`                | `0..0x10ffff`\n"
"`number`              | `integer` \\| `float`\n"
"`char_list`           | `[char]`\n"
"`list`                | `[any]`\n"
"`maybe_improper_list` | `maybe_improper_list(any, any)`\n"
"`nonempty_list`       | `nonempty_list(any)`\n"
"`iodata`              | `iolist` \\| `binary`\n"
"`iolist`              | `maybe_improper_list(byte` \\| `binary` \\| `iolist, binary` \\| `[])`\n"
"`module`              | `atom` \\| `tuple`\n"
"`mfa`                 | `{atom, atom, arity}`\n"
"`arity`               | `0..255`\n"
"`node`                | `atom`\n"
"`timeout`             | `:infinity` \\| `non_neg_integer`\n"
"`no_return`           | `none`\n"
"`fun`                 | `(... -> any)`\n"
"\n"
"\n"
"Some built-in types cannot be expressed with valid syntax according to the\n"
"language defined above.\n"
"\n"
"Built-in type     | Can be interpreted as\n"
":---------------- | :--------------------\n"
"`non_neg_integer` | `0..`\n"
"`pos_integer`     | `1..`\n"
"`neg_integer`     | `..-1`\n"
"\n"
"Types defined in other modules are referred to as \"remote types\", they are\n"
"referenced as `Module.type_name` (ex. `Enum.t` or `String.t`).\n"
"\n"
"## Defining a type\n"
"\n"
"    @type type_name :: type\n"
"    @typep type_name :: type\n"
"    @opaque type_name :: type\n"
"\n"
"A type defined with `@typep` is private. An opaque type, defined with\n"
"`@opaque` is a type where the internal structure of the type will not be\n"
"visible, but the type is still public.\n"
"\n"
"Types can be parameterized by defining variables as parameters, these variables\n"
"can then be used to define the type.\n"
"\n"
"    @type dict(key, value) :: [{key, value}]\n"
"\n"
"## Defining a specification\n"
"\n"
"    @spec function_name(type1, type2) :: return_type\n"
"    @callback function_name(type1, type2) :: return_type\n"
"\n"
"Callbacks are used to define the callbacks functions of behaviours (see\n"
"`Behaviour`).\n"
"\n"
"Guards can be used to restrict type variables given as arguments to the\n"
"function.\n"
"\n"
"    @spec function(arg) :: [arg] when arg: atom\n"
"\n"
"Type variables with no restriction can also be defined.\n"
"\n"
"    @spec function(arg) :: [arg] when arg: var\n"
"\n"
"Specifications can be overloaded just like ordinary functions.\n"
"\n"
"    @spec function(integer) :: atom\n"
"    @spec function(atom)    :: integer\n"
"\n"
"## Notes\n"
"\n"
"Elixir discourages the use of type `string` as it might be confused with\n"
"binaries which are referred to as \"strings\" in Elixir (as opposed to character\n"
"lists). In order to use the type that is called `string` in Erlang, one has to\n"
"use the `char_list` type which is a synonym for `string`. If you use `string`,\n"
"you'll get a warning from the compiler.\n"
"\n"
"If you want to refer to the \"string\" type (the one operated on by functions in\n"
"the `String` module), use `String.t` type instead.\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.beam_types(module)
#: lib/kernel/typespec.ex:427 
msgid ""
"Returns all types available from the module's beam code.\n"
"\n"
"The result is returned as a list of tuples where the first\n"
"element is the type (`:typep`, `:type` and `:opaque`).\n"
"\n"
"The module must have a corresponding beam file which can be\n"
"located by the runtime system.\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.beam_typedocs(module)
#: lib/kernel/typespec.ex:407 
msgid ""
"Returns all type docs available from the module's beam code.\n"
"\n"
"The result is returned as a list of tuples where the first element is the pair of type\n"
"name and arity and the second element is the documentation.\n"
"\n"
"The module must have a corresponding beam file which can be\n"
"located by the runtime system.\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.beam_specs(module)
#: lib/kernel/typespec.ex:455 
msgid ""
"Returns all specs available from the module's beam code.\n"
"\n"
"The result is returned as a list of tuples where the first\n"
"element is spec name and arity and the second is the spec.\n"
"\n"
"The module must have a corresponding beam file which can be\n"
"located by the runtime system.\n"
msgstr ""
#. TRANSLATORS: defmacro Kernel.Typespec.defopaque(type)
#: lib/kernel/typespec.ex:234 
msgid ""
"Defines an opaque type.\n"
"This macro is responsible for handling the attribute `@opaque`.\n"
"\n"
"## Examples\n"
"\n"
"    @opaque my_type :: atom\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Kernel.Typespec.deftype(type)
#: lib/kernel/typespec.ex:219 
msgid ""
"Defines a type.\n"
"This macro is responsible for handling the attribute `@type`.\n"
"\n"
"## Examples\n"
"\n"
"    @type my_type :: atom\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Kernel.Typespec.defspec(spec)
#: lib/kernel/typespec.ex:264 
msgid ""
"Defines a spec.\n"
"This macro is responsible for handling the attribute `@spec`.\n"
"\n"
"## Examples\n"
"\n"
"    @spec add(number, number) :: number\n"
"\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.beam_callbacks(module)
#: lib/kernel/typespec.ex:469 
msgid ""
"Returns all callbacks available from the module's beam code.\n"
"\n"
"The result is returned as a list of tuples where the first\n"
"element is spec name and arity and the second is the spec.\n"
"\n"
"The module must have a corresponding beam file\n"
"which can be located by the runtime system.\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.spec_to_ast(name, arg2)
#: lib/kernel/typespec.ex:338 
msgid ""
"Converts a spec clause back to Elixir AST.\n"
msgstr ""
#. TRANSLATORS: def Kernel.Typespec.type_to_ast(arg1)
#: lib/kernel/typespec.ex:385 
msgid ""
"Converts a type clause back to Elixir AST.\n"
msgstr ""
