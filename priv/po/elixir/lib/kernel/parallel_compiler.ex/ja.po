msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-05-20 21:54+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: Elixir.Kernel.ParallelCompiler Summary
#: lib/kernel/parallel_compiler.ex:2
msgid "A module responsible for compiling files in parallel.\n"
msgstr "並列にファイルをコンパイルすることに責任を持つモジュールです。\n"

#. TRANSLATORS: def Kernel.ParallelCompiler.files_to_path(files, path, options \\ [])
#: lib/kernel/parallel_compiler.ex:39
msgid ""
"Compiles the given files to the given path.\n"
"Read `files/2` for more information.\n"
msgstr ""
"与えられたパスで与えられたファイルをコンパイルします。\n"
"詳細は `files/2` を参照してください。\n"

#. TRANSLATORS: def Kernel.ParallelCompiler.files(files, options \\ [])
#: lib/kernel/parallel_compiler.ex:6
msgid ""
"Compiles the given files.\n"
"\n"
"Those files are compiled in parallel and can automatically\n"
"detect dependencies between them. Once a dependency is found,\n"
"the current file stops being compiled until the dependency is\n"
"resolved.\n"
"\n"
"If there is an error during compilation or if `warnings_as_errors`\n"
"is set to `true` and there is a warning, this function will fail\n"
"with an exception.\n"
"\n"
"This function accepts the following options:\n"
"\n"
"  * `:each_file` - for each file compiled, invokes the callback passing the\n"
"    file\n"
"\n"
"  * `:each_module` - for each module compiled, invokes the callback passing\n"
"    the file, module and the module bytecode\n"
"\n"
"  * `:dest` - the destination directory for the beam files. When using "
"`files/2`,\n"
"    this information is only used to properly annotate the beam files "
"before\n"
"    they are loaded into memory. If you want a file to actually be written "
"to\n"
"    `dest`, use `files_to_path/3` instead.\n"
"\n"
"Returns the modules generated by each compiled file.\n"
msgstr ""
"与えられた複数のファイルをコンパイルします。\n"
"\n"
"ファイルは並列にコンパイルされ、それらの間の依存性を自動的に解決します。\n"
"依存性が見付かると、現在のファイルは、依存性が解決するまで\n"
"コンパイルを停止します。\n"
"\n"
"コンパイルの間にエラーがあるか、`warning_as_errors`が`true`にセット\n"
"されている時にワーニングがあったら、この関数は例外とともに失敗します。\n"
"\n"
"この関数はオプションとしてコールバックの集合を受け付けます:\n"
"\n"
"  * `:each_file` - コンパイルしたファイル毎に、そのファイルを引数に\n"
"     コールバックを起動します\n"
"\n"
"  * `:each_module` - コンパイルしたモジュール毎に、\n"
"     ファイルとモジュール、モジュールのバイトコードを引数にコールバックを\n"
"     起動します\n"
"\n"
"  * `:dest` - beamファイルのデスティネーションディレクトリです。\n"
"     `files/2`を使うとき、メモリにロードされる前に、\n"
"     この情報はきちんとbeamファイルに注釈を\n"
"     付けるのに使われるだけです。\n"
"     もし実際に`dest`へ書込みをさせたいなら、`files_to_path/3`を代わりに\n"
"     使ってください。\n"
"\n"
"コンパイルされたそれぞれのファイルにより生成されたモジュールを\n"
"返します。\n"
