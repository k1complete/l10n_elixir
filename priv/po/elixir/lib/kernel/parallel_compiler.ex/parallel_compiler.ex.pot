#. TRANSLATORS: Elixir.Kernel.ParallelCompiler Summary
#: lib/kernel/parallel_compiler.ex:2 
msgid ""
"A module responsible for compiling files in parallel.\n"
msgstr ""
#. TRANSLATORS: def Kernel.ParallelCompiler.files_to_path(files, path, options \\ [])
#: lib/kernel/parallel_compiler.ex:39 
msgid ""
"Compiles the given files to the given path.\n"
"Read `files/2` for more information.\n"
msgstr ""
#. TRANSLATORS: def Kernel.ParallelCompiler.files(files, options \\ [])
#: lib/kernel/parallel_compiler.ex:6 
msgid ""
"Compiles the given files.\n"
"\n"
"Those files are compiled in parallel and can automatically\n"
"detect dependencies between them. Once a dependency is found,\n"
"the current file stops being compiled until the dependency is\n"
"resolved.\n"
"\n"
"If there is an error during compilation or if `warnings_as_errors`\n"
"is set to `true` and there is a warning, this function will fail\n"
"with an exception.\n"
"\n"
"This function accepts the following options:\n"
"\n"
"  * `:each_file` - for each file compiled, invokes the callback passing the\n"
"    file\n"
"\n"
"  * `:each_module` - for each module compiled, invokes the callback passing\n"
"    the file, module and the module bytecode\n"
"\n"
"  * `:dest` - the destination directory for the beam files. When using `files/2`,\n"
"    this information is only used to properly annotate the beam files before\n"
"    they are loaded into memory. If you want a file to actually be written to\n"
"    `dest`, use `files_to_path/3` instead.\n"
"\n"
"Returns the modules generated by each compiled file.\n"
msgstr ""
