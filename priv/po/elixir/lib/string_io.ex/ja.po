msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-05-20 21:54+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def StringIO.close(pid)
#: lib/string_io.ex:76
msgid ""
"Stops the IO device and returns remaining buffers.\n"
"\n"
"## Examples\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"in\")\n"
"    iex> IO.write(pid, \"out\")\n"
"    iex> StringIO.close(pid)\n"
"    {:ok, {\"in\", \"out\"}}\n"
"\n"
msgstr ""
"IOデバイスを停止して残りのバッファを返します。\n"
"\n"
"## 例\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"in\")\n"
"    iex> IO.write(pid, \"out\")\n"
"    iex> StringIO.close(pid)\n"
"    {:ok, {\"in\", \"out\"}}\n"
"\n"

#. TRANSLATORS: def StringIO.contents(pid)
#: lib/string_io.ex:42
msgid ""
"Returns current buffers.\n"
"\n"
"## Examples\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"in\")\n"
"    iex> IO.write(pid, \"out\")\n"
"    iex> StringIO.contents(pid)\n"
"    {\"in\", \"out\"}\n"
"\n"
msgstr ""
"現在のバッファを返します。\n"
"\n"
"## 例\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"in\")\n"
"    iex> IO.write(pid, \"out\")\n"
"    iex> StringIO.contents(pid)\n"
"    {\"in\", \"out\"}\n"
"\n"

#. TRANSLATORS: def StringIO.flush(pid)
#: lib/string_io.ex:58
msgid ""
"Flushes output buffer.\n"
"\n"
"## Examples\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"in\")\n"
"    iex> IO.write(pid, \"out\")\n"
"    iex> StringIO.flush(pid)\n"
"    \"out\"\n"
"    iex> StringIO.contents(pid)\n"
"    {\"in\", \"\"}\n"
"\n"
msgstr ""
"出力バッファをフラッシュします。\n"
"\n"
"## 例\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"in\")\n"
"    iex> IO.write(pid, \"out\")\n"
"    iex> StringIO.contents(pid)\n"
"    {\"in\", \"out\"}\n"
"\n"

#. TRANSLATORS: def StringIO.open(string, options \\ [])
#: lib/string_io.ex:15
msgid ""
"Creates an IO device.\n"
"\n"
"If the `:capture_prompt` option is set to `true`,\n"
"prompts (specified as arguments to `IO.get*` functions)\n"
"are captured.\n"
"\n"
"## Examples\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"foo\")\n"
"    iex> IO.gets(pid, \">\")\n"
"    \"foo\"\n"
"    iex> StringIO.contents(pid)\n"
"    {\"\", \"\"}\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"foo\", capture_prompt: true)\n"
"    iex> IO.gets(pid, \">\")\n"
"    \"foo\"\n"
"    iex> StringIO.contents(pid)\n"
"    {\"\", \">\"}\n"
"\n"
msgstr ""
"IOデバイスを作成します。\n"
"\n"
"もし`:capture_prompt`オプションが`true`にセットされたら、\n"
"(`IO.get*`関数に引数として指定された)プロンプトが捕捉されます。\n"
"\n"
"## 例\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"foo\")\n"
"    iex> IO.gets(pid, \">\")\n"
"    \"foo\"\n"
"    iex> StringIO.contents(pid)\n"
"    {\"\", \"\"}\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"foo\", capture_prompt: true)\n"
"    iex> IO.gets(pid, \">\")\n"
"    \"foo\"\n"
"    iex> StringIO.contents(pid)\n"
"    {\"\", \">\"}\n"
"\n"

#. TRANSLATORS: Elixir.StringIO Summary
#: lib/string_io.ex:2
msgid ""
"This module provides an IO device that wraps a string.\n"
"\n"
"## Examples\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"foo\")\n"
"    iex> IO.read(pid, 2)\n"
"    \"fo\"\n"
"\n"
msgstr ""
"このモジュールは文字列をIOデバイスにラップしたものを\n"
"提供します。\n"
"\n"
"## 例\n"
"\n"
"    iex> {:ok, pid} = StringIO.open(\"foo\")\n"
"    iex> IO.read(pid, 2)\n"
"    \"fo\"\n"
"\n"
