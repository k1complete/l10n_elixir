#. TRANSLATORS: defmacro Bitwise.bsl(left, right)
#: lib/bitwise.ex:141 
msgid ""
"Calculates the result of an arithmetic left bitshift.\n"
"\n"
"    iex> bsl(1, 2)\n"
"    4\n"
"    iex> bsl(1, -2)\n"
"    0\n"
"    iex> bsl(-1, 2)\n"
"    -4\n"
"    iex> bsl(-1, -2)\n"
"    -1\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.^^^(left, right)
#: lib/bitwise.ex:130 
msgid ""
"Infix operator; calculates the bitwise XOR of its arguments.\n"
"\n"
"    iex> 9 ^^^ 3\n"
"    10\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.&&&(left, right)
#: lib/bitwise.ex:86 
msgid ""
"Infix operator; calculates the bitwise AND of its arguments.\n"
"\n"
"    iex> 9 &&& 3\n"
"    1\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.>>>(left, right)
#: lib/bitwise.ex:192 
msgid ""
"Infix operator; calculates the result of an arithmetic right bitshift.\n"
"\n"
"    iex> 1 >>> 2\n"
"    0\n"
"    iex> 1 >>> -2\n"
"    4\n"
"    iex> -1 >>> 2\n"
"    -1\n"
"    iex> -1 >>> -2\n"
"    -4\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.bor(left, right)
#: lib/bitwise.ex:97 
msgid ""
"Calculates the bitwise OR of its arguments.\n"
"\n"
"    iex> bor(9, 3)\n"
"    11\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.bsr(left, right)
#: lib/bitwise.ex:175 
msgid ""
"Calculates the result of an arithmetic right bitshift.\n"
"\n"
"    iex> bsr(1, 2)\n"
"    0\n"
"    iex> bsr(1, -2)\n"
"    4\n"
"    iex> bsr(-1, 2)\n"
"    -1\n"
"    iex> bsr(-1, -2)\n"
"    -4\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.bnot(expr)
#: lib/bitwise.ex:49 
msgid ""
"Calculates the bitwise NOT of its argument.\n"
"\n"
"    iex> bnot(2)\n"
"    -3\n"
"    iex> bnot(2) &&& 3\n"
"    1\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Bitwise Summary
#: lib/bitwise.ex:2 
msgid ""
"This module provides macro-based operators that perform calculations\n"
"on (sets of) bits.\n"
"\n"
"In general, you should `use` the Bitwise module as a whole:\n"
"\n"
"    iex> use Bitwise\n"
"    iex> bnot 1\n"
"    -2\n"
"    iex> 1 &&& 1\n"
"    1\n"
"\n"
"When used, it accepts the following options:\n"
"\n"
"  * `:only_operators` - include only operators\n"
"  * `:skip_operators` - skip operators\n"
"\n"
"\n"
"    iex> use Bitwise, only_operators: true\n"
"    iex> 1 &&& 1\n"
"    1\n"
"\n"
"\n"
"These macros can be used in guards:\n"
"\n"
"    iex> use Bitwise\n"
"    iex> odd? = fn(int) when band(int, 1) == 1 -> true; (_) -> false end\n"
"    iex> odd?.(1)\n"
"    true\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.|||(left, right)
#: lib/bitwise.ex:108 
msgid ""
"Infix operator; calculates the bitwise OR of its arguments.\n"
"\n"
"    iex> 9 ||| 3\n"
"    11\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.<<<(left, right)
#: lib/bitwise.ex:158 
msgid ""
"Infix operator; calculates the result of an arithmetic left bitshift.\n"
"\n"
"    iex> 1 <<< 2\n"
"    4\n"
"    iex> 1 <<< -2\n"
"    0\n"
"    iex> -1 <<< 2\n"
"    -4\n"
"    iex> -1 <<< -2\n"
"    -1\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.band(left, right)
#: lib/bitwise.ex:75 
msgid ""
"Calculates the bitwise AND of its arguments.\n"
"\n"
"    iex> band(9, 3)\n"
"    1\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.bxor(left, right)
#: lib/bitwise.ex:119 
msgid ""
"Calculates the bitwise XOR of its arguments.\n"
"\n"
"    iex> bxor(9, 3)\n"
"    10\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Bitwise.~~~(expr)
#: lib/bitwise.ex:62 
msgid ""
"Prefix (unary) operator; calculates the bitwise NOT of its argument.\n"
"\n"
"    iex> ~~~2\n"
"    -3\n"
"    iex> ~~~2 &&& 3\n"
"    1\n"
"\n"
msgstr ""
