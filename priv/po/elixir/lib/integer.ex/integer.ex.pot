#. TRANSLATORS: def Integer.digits(n, base \\ 10)
#: lib/integer.ex:46 
msgid ""
"Returns the ordered digits for the given non-negative integer.\n"
"\n"
"An optional base value may be provided representing the radix for the returned\n"
"digits.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.digits(101)\n"
"    [1, 0, 1]\n"
"\n"
"    iex> Integer.digits(58127, 2)\n"
"    [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1]\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro Integer.is_odd(n)
#: lib/integer.ex:8 
msgid ""
"Determines if an integer is odd.\n"
"\n"
"Returns `true` if `n` is an odd number, otherwise `false`.\n"
"\n"
"Allowed in guard clauses.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.is_odd(3)\n"
"    true\n"
"\n"
"    iex> Integer.is_odd(4)\n"
"    false\n"
msgstr ""
#. TRANSLATORS: def Integer.to_string(some_integer, base)
#: lib/integer.ex:215 
msgid ""
"Returns a binary which corresponds to the text representation\n"
"of `some_integer` in base `base`.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.to_string(100, 16)\n"
"    \"64\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Integer.to_char_list(number)
#: lib/integer.ex:232 
msgid ""
"Returns a char list which corresponds to the text representation of the given integer.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.to_char_list(7)\n"
"    '7'\n"
"\n"
msgstr ""
#. TRANSLATORS: def Integer.undigits(digits, base \\ 10)
#: lib/integer.ex:73 
msgid ""
"Returns the integer represented by the ordered digits.\n"
"\n"
"An optional base value may be provided representing the radix for the digits.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.undigits([1, 0, 1])\n"
"    101\n"
"\n"
"    iex> Integer.undigits([1, 4], 16)\n"
"    20\n"
msgstr ""
#. TRANSLATORS: defmacro Integer.is_even(n)
#: lib/integer.ex:27 
msgid ""
"Determines if an integer is even.\n"
"\n"
"Returns `true` if `n` is an even number, otherwise `false`.\n"
"\n"
"Allowed in guard clauses.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.is_even(10)\n"
"    true\n"
"\n"
"    iex> Integer.is_even(5)\n"
"    false\n"
msgstr ""
#. TRANSLATORS: def Integer.to_char_list(number, base)
#: lib/integer.ex:248 
msgid ""
"Returns a char list which corresponds to the text representation of the\n"
"given integer in the given base.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.to_char_list(1023, 16)\n"
"    '3FF'\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Integer Summary
#: lib/integer.ex:2 
msgid ""
"Functions for working with integers.\n"
msgstr ""
#. TRANSLATORS: def Integer.parse(binary, base \\ 10)
#: lib/integer.ex:96 
msgid ""
"Converts a binary from a text representation of an integer\n"
"in an optional base `base` to the corresponding integer.\n"
"\n"
"If the base `base` is not given, base 10 will be used.\n"
"\n"
"If successful, returns a tuple of the form `{integer, remainder_of_binary}`.\n"
"Otherwise `:error`.\n"
"\n"
"Raises an error if `base` is less than 2 or more than 36.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.parse(\"34\")\n"
"    {34, \"\"}\n"
"\n"
"    iex> Integer.parse(\"34.5\")\n"
"    {34, \".5\"}\n"
"\n"
"    iex> Integer.parse(\"three\")\n"
"    :error\n"
"\n"
"    iex> Integer.parse(\"34\", 10)\n"
"    {34, \"\"}\n"
"\n"
"    iex> Integer.parse(\"f4\", 16)\n"
"    {244, \"\"}\n"
"\n"
"    iex> Integer.parse(\"Awww++\", 36)\n"
"    {509216, \"++\"}\n"
"\n"
"    iex> Integer.parse(\"fab\", 10)\n"
"    :error\n"
"\n"
"    iex> Integer.parse(\"a2\", 38)\n"
"    ** (ArgumentError) invalid base 38\n"
"\n"
msgstr ""
#. TRANSLATORS: def Integer.to_string(some_integer)
#: lib/integer.ex:198 
msgid ""
"Returns a binary which corresponds to the text representation\n"
"of `some_integer`.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.to_string(123)\n"
"    \"123\"\n"
"\n"
msgstr ""
