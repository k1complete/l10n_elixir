msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2016-04-02 12:23+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Integer.to_string(some_integer, base)
#: lib/integer.ex:215
msgid ""
"Returns a binary which corresponds to the text representation\n"
"of `some_integer` in base `base`.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.to_string(100, 16)\n"
"    \"64\"\n"
"\n"
msgstr ""
"基数`base`での`some_integer`のテキスト表現に対応するバイナリを\n"
"返します。\n"
"\n"
"コンパイラによりインライン化されます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Integer.to_string(100, 16)\n"
"    \"64\"\n"
"\n"

#. TRANSLATORS: def Integer.parse(binary, base \\ 10)
#: lib/integer.ex:96
msgid ""
"Converts a binary from a text representation of an integer\n"
"in an optional base `base` to the corresponding integer.\n"
"\n"
"If the base `base` is not given, base 10 will be used.\n"
"\n"
"If successful, returns a tuple in the form of `{integer, remainder_of_binary}"
"`.\n"
"Otherwise `:error`.\n"
"\n"
"Raises an error if `base` is less than 2 or more than 36.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.parse(\"34\")\n"
"    {34, \"\"}\n"
"\n"
"    iex> Integer.parse(\"34.5\")\n"
"    {34, \".5\"}\n"
"\n"
"    iex> Integer.parse(\"three\")\n"
"    :error\n"
"\n"
"    iex> Integer.parse(\"34\", 10)\n"
"    {34, \"\"}\n"
"\n"
"    iex> Integer.parse(\"f4\", 16)\n"
"    {244, \"\"}\n"
"\n"
"    iex> Integer.parse(\"Awww++\", 36)\n"
"    {509216, \"++\"}\n"
"\n"
"    iex> Integer.parse(\"fab\", 10)\n"
"    :error\n"
"\n"
"    iex> Integer.parse(\"a2\", 38)\n"
"    ** (ArgumentError) invalid base 38\n"
"\n"
msgstr ""
"オプションで指定した基数`base`の整数のテキスト表現のバイナリ\n"
"から、対応する整数へ変換します。\n"
"\n"
"基数`base`が与えられないなら、10が使われます。\n"
"\n"
"成功すると、`{integer, remainder_of_binary}`形式のタプルを返し、\n"
"さもなくば、`:error`を返します。\n"
"\n"
"`base`が2より小さいか、36より大きい場合、エラーを上げます。\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.parse(\"34\")\n"
"    {34, \"\"}\n"
"\n"
"    iex> Integer.parse(\"34.5\")\n"
"    {34, \".5\"}\n"
"\n"
"    iex> Integer.parse(\"three\")\n"
"    :error\n"
"\n"
"    iex> Integer.parse(\"34\", 10)\n"
"    {34, \"\"}\n"
"\n"
"    iex> Integer.parse(\"f4\", 16)\n"
"    {244, \"\"}\n"
"\n"
"    iex> Integer.parse(\"Awww++\", 36)\n"
"    {509216, \"++\"}\n"
"\n"
"    iex> Integer.parse(\"fab\", 10)\n"
"    :error\n"
"\n"
"    iex> Integer.parse(\"a2\", 38)\n"
"    ** (ArgumentError) invalid base 38\n"
"\n"

#. TRANSLATORS: def Integer.digits(n, base \\ 10)
#: lib/integer.ex:46
msgid ""
"Returns the ordered digits for the given non-negative integer.\n"
"\n"
"An optional base value may be provided representing the radix for the "
"returned\n"
"digits.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.digits(101)\n"
"    [1, 0, 1]\n"
"\n"
"    iex> Integer.digits(58127, 2)\n"
"    [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1]\n"
"\n"
msgstr ""
"与えられた非負整数の桁のリストを返します。\n"
"\n"
"戻り値の桁の基数を、オプションで与えることができます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Integer.digits(101)\n"
"    [1, 0, 1]\n"
"\n"
"    iex> Integer.digits(58127, 2)\n"
"    [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1]\n"
"\n"

#. TRANSLATORS: def Integer.to_char_list(number)
#: lib/integer.ex:232
msgid ""
"Returns a char list which corresponds to the text representation of the "
"given integer.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.to_char_list(7)\n"
"    '7'\n"
"\n"
msgstr ""
"与えられた整数にテキスト表現に対応する文字のリストを返します。\n"
"\n"
"コンパイラによってインライン化されます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Integer.to_char_list(7)\n"
"    '7'\n"
"\n"

#. TRANSLATORS: def Integer.undigits(digits, base \\ 10)
#: lib/integer.ex:73
msgid ""
"Returns the integer represented by the ordered digits.\n"
"\n"
"An optional base value may be provided representing the radix for the "
"digits.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.undigits([1, 0, 1])\n"
"    101\n"
"\n"
"    iex> Integer.undigits([1, 4], 16)\n"
"    20\n"
msgstr ""
"桁のリストによって表現された整数を返します。\n"
"\n"
"オプションで桁のリストの基数を指定することができます。\n"
"\n"
" ## 例\n"
"\n"
"     iex> Integer.undigits([1, 0, 1])\n"
"     101\n"
"\n"
"     iex> Integer.undigits([1, 4], 16)\n"
"     20\n"

#. TRANSLATORS: defmacro Integer.is_odd(n)
#: lib/integer.ex:8
msgid ""
"Determines if an integer is odd.\n"
"\n"
"Returns `true` if `n` is an odd number, otherwise `false`.\n"
"\n"
"Allowed in guard clauses.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.is_odd(3)\n"
"    true\n"
"\n"
"    iex> Integer.is_odd(4)\n"
"    false\n"
msgstr ""
"整数が奇数かどうかを決定します。\n"
"\n"
"`n`が奇数なら、`true`を返し、さもなければ`false`を返します。\n"
"\n"
"ガード節で使えます。\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.is_odd(3)\n"
"    true\n"
"\n"
"    iex> Integer.is_odd(4)\n"
"    false\n"

#. TRANSLATORS: defmacro Integer.is_even(n)
#: lib/integer.ex:27
msgid ""
"Determines if an integer is even.\n"
"\n"
"Returns `true` if `n` is an even number, otherwise `false`.\n"
"\n"
"Allowed in guard clauses.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.is_even(10)\n"
"    true\n"
"\n"
"    iex> Integer.is_even(5)\n"
"    false\n"
msgstr ""
"整数が偶数かどうかを決定します。\n"
"\n"
"`n`が偶数なら、`true`を返し、さもなければ`false`を返します。\n"
"\n"
"ガード節で使えます。\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.is_even(10)\n"
"    true\n"
"\n"
"    iex> Integer.is_even(5)\n"
"    false\n"

#. TRANSLATORS: def Integer.to_char_list(number, base)
#: lib/integer.ex:248
msgid ""
"Returns a char list which corresponds to the text representation of the\n"
"given integer in the given base.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.to_char_list(1023, 16)\n"
"    '3FF'\n"
"\n"
msgstr ""
"与えられた数の与えられた基数でのテキスト表現に対応する文字のリストを\n"
"返します。\n"
"\n"
"コンパイラによりインライン化されます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Integer.to_char_list(1023, 16)\n"
"    '3FF'\n"
"\n"

#. TRANSLATORS: Elixir.Integer Summary
#: lib/integer.ex:2
msgid "Functions for working with integers.\n"
msgstr "整数で動く関数です\n"

#. TRANSLATORS: def Integer.to_string(some_integer)
#: lib/integer.ex:198
msgid ""
"Returns a binary which corresponds to the text representation\n"
"of `some_integer`.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Integer.to_string(123)\n"
"    \"123\"\n"
"\n"
msgstr ""
"`some_integer`のテキスト表現に対応するバイナリを返します。\n"
"\n"
"コンパイラによりインライン化されます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Integer.to_string(123)\n"
"    \"123\"\n"
"\n"
