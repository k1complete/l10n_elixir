msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-12-22 23:41+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def MapSet.put(set, value)
#: lib/map_set.ex:178
msgid ""
"Inserts `value` into `set` if `set` doesn't already contain it.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.put(MapSet.new([1, 2, 3]), 3)\n"
"    #MapSet<[1, 2, 3]>\n"
"    iex> MapSet.put(MapSet.new([1, 2, 3]), 4)\n"
"    #MapSet<[1, 2, 3, 4]>\n"
"\n"
msgstr ""
"`set`がまだそれを含んでいないなら、`set`に`value`を挿入します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.put(MapSet.new([1, 2, 3]), 3)\n"
"    #MapSet<[1, 2, 3]>\n"
"    iex> MapSet.put(MapSet.new([1, 2, 3]), 4)\n"
"    #MapSet<[1, 2, 3, 4]>\n"
"\n"

#. TRANSLATORS: def MapSet.member?(map_set, value)
#: lib/map_set.ex:162
msgid ""
"Checks if `set` contains `value`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.member?(MapSet.new([1, 2, 3]), 2)\n"
"    true\n"
"    iex> MapSet.member?(MapSet.new([1, 2, 3]), 4)\n"
"    false\n"
"\n"
msgstr ""
"`set`が`value`を含んでいるかをチェックします。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.member?(MapSet.new([1, 2, 3]), 2)\n"
"    true\n"
"    iex> MapSet.member?(MapSet.new([1, 2, 3]), 4)\n"
"    false\n"
"\n"

#. TRANSLATORS: def MapSet.equal?(map_set1, map_set2)
#: lib/map_set.ex:119
msgid ""
"Checks if two sets are equal.\n"
"\n"
"The comparison between elements must be done using `===`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.equal?(MapSet.new([1, 2]), MapSet.new([2, 1, 1]))\n"
"    true\n"
"    iex> MapSet.equal?(MapSet.new([1, 2]), MapSet.new([3, 4]))\n"
"    false\n"
"\n"
msgstr ""
"二つのsetが等しいかをチェックします。\n"
"\n"
"要素の比較には`===`が使われます。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.equal?(MapSet.new([1, 2]), MapSet.new([2, 1, 1]))\n"
"    true\n"
"    iex> MapSet.equal?(MapSet.new([1, 2]), MapSet.new([3, 4]))\n"
"    false\n"
"\n"

#. TRANSLATORS: def MapSet.new(enumerable)
#: lib/map_set.ex:28
msgid ""
"Creates a set from an enumerable.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.new([:b, :a, 3])\n"
"    #MapSet<[3, :a, :b]>\n"
"    iex> MapSet.new([3, 3, 3, 2, 2, 1])\n"
"    #MapSet<[1, 2, 3]>\n"
"\n"
msgstr ""
"enumerableからsetを作成します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.new([:b, :a, 3])\n"
"    #MapSet<[3, :a, :b]>\n"
"    iex> MapSet.new([3, 3, 3, 2, 2, 1])\n"
"    #MapSet<[1, 2, 3]>\n"
"\n"

#. TRANSLATORS: def MapSet.size(map_set)
#: lib/map_set.ex:194
msgid ""
"Returns the number of elements in `set`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.size(MapSet.new([1, 2, 3]))\n"
"    3\n"
"\n"
msgstr ""
"`set`の要素の数を返します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.size(MapSet.new([1, 2, 3]))\n"
"    3\n"
"\n"

#. TRANSLATORS: def MapSet.intersection(map_set1, map_set2)
#: lib/map_set.ex:137
msgid ""
"Returns a set containing only members that `set1` and `set2` have in "
"common.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.intersection(MapSet.new([1, 2]), MapSet.new([2, 3, 4]))\n"
"    #MapSet<[2]>\n"
"\n"
"    iex> MapSet.intersection(MapSet.new([1, 2]), MapSet.new([3, 4]))\n"
"    #MapSet<[]>\n"
"\n"
msgstr ""
"`set1`と`set2`の共通の要素のみを含むsetを返します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.intersection(MapSet.new([1, 2]), MapSet.new([2, 3, 4]))\n"
"    #MapSet<[2]>\n"
"\n"
"    iex> MapSet.intersection(MapSet.new([1, 2]), MapSet.new([3, 4]))\n"
"    #MapSet<[]>\n"
"\n"

#. TRANSLATORS: def MapSet.subset?(map_set1, map_set2)
#: lib/map_set.ex:208
msgid ""
"Checks if `set1`'s members are all contained in `set2`.\n"
"\n"
"This function checks if `set1` is a subset of `set2`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.subset?(MapSet.new([1, 2]), MapSet.new([1, 2, 3]))\n"
"    true\n"
"    iex> MapSet.subset?(MapSet.new([1, 2, 3]), MapSet.new([1, 2]))\n"
"    false\n"
"\n"
msgstr ""
"`set1`の要素が全て`set2`に含まれているかをチェックします。\n"
"\n"
"この関数は`set1`が`set2`のサブセットかどうかをチェックする関数です。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.subset?(MapSet.new([1, 2]), MapSet.new([1, 2, 3]))\n"
"    true\n"
"    iex> MapSet.subset?(MapSet.new([1, 2, 3]), MapSet.new([1, 2]))\n"
"    false\n"
"\n"

#. TRANSLATORS: def MapSet.difference(map_set1, map_set2)
#: lib/map_set.ex:77
msgid ""
"Returns a set that is `set1` without the members of `set2`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.difference(MapSet.new([1, 2]), MapSet.new([2, 3, 4]))\n"
"    #MapSet<[1]>\n"
"\n"
msgstr ""
"`set1`のうち、`set2`の要素を含まないsetを返します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.difference(MapSet.new([1, 2]), MapSet.new([2, 3, 4]))\n"
"    #MapSet<[1]>\n"
"\n"

#. TRANSLATORS: def MapSet.union(map_set1, map_set2)
#: lib/map_set.ex:252
msgid ""
"Returns a set containing all members of `set1` and `set2`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.union(MapSet.new([1, 2]), MapSet.new([2, 3, 4]))\n"
"    #MapSet<[1, 2, 3, 4]>\n"
"\n"
msgstr ""
"`set1`と`set2`の全ての要素を含んだsetを返します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.union(MapSet.new([1, 2]), MapSet.new([2, 3, 4]))\n"
"    #MapSet<[1, 2, 3, 4]>\n"
"\n"

#. TRANSLATORS: def MapSet.new(enumerable, transform)
#: lib/map_set.ex:44
msgid ""
"Creates a mapset from an enumerable via the transformation function.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.new([1, 2, 1], fn x -> 2 * x end)\n"
"    #MapSet<[2, 4]>\n"
"\n"
msgstr ""
"enumerableから変換関数を通してmapsetを作成します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.new([1, 2, 1], fn x -> 2 * x end)\n"
"    #MapSet<[2, 4]>\n"
"\n"

#. TRANSLATORS: Elixir.MapSet Summary
#: lib/map_set.ex:2
msgid ""
"A set of functions for working with sets.\n"
"\n"
"The `MapSet` is represented internally as a struct,\n"
"therefore `%MapSet{}` can be used whenever there is a\n"
"need to match on any `MapSet`. Note though the struct\n"
"fields are private and must not be accessed directly.\n"
"Instead, use the functions in this module.\n"
msgstr ""
"setで働く一群の関数です。\n"
"\n"
"`MapSet`は内部では構造体として表現され、\n"
"任意の`MapSet`にマッチする必要があるときは\n"
"いつでも`%MapSet{}`を使うことができます。\n"
"構造体のフィールドはプライベートなので、それらに直接\n"
"アクセスは出来無いことに注意してください。\n"
"その代わり、このモジュールの関数を使ってください。\n"

#. TRANSLATORS: def MapSet.disjoint?(map_set1, map_set2)
#: lib/map_set.ex:94
msgid ""
"Checks if `set1` and `set2` have no members in common.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.disjoint?(MapSet.new([1, 2]), MapSet.new([3, 4]))\n"
"    true\n"
"    iex> MapSet.disjoint?(MapSet.new([1, 2]), MapSet.new([2, 3]))\n"
"    false\n"
"\n"
msgstr ""
"`set1`と`set2`が共通の要素を持っていないことをチェックします。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.disjoint?(MapSet.new([1, 2]), MapSet.new([3, 4]))\n"
"    true\n"
"    iex> MapSet.disjoint?(MapSet.new([1, 2]), MapSet.new([2, 3]))\n"
"    false\n"
"\n"

#. TRANSLATORS: def MapSet.delete(set, term)
#: lib/map_set.ex:58
msgid ""
"Deletes `value` from `set`.\n"
"\n"
"Returns a new set which is a copy of `set` but without `value`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> set = MapSet.new([1, 2, 3])\n"
"    iex> MapSet.delete(set, 4)\n"
"    #MapSet<[1, 2, 3]>\n"
"    iex> MapSet.delete(set, 2)\n"
"    #MapSet<[1, 3]>\n"
"\n"
msgstr ""
"`set`から`value`を削除します。\n"
"\n"
"`value`を削除した`set`の新しいコピーを返します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> set = MapSet.new([1, 2, 3])\n"
"    iex> MapSet.delete(set, 4)\n"
"    #MapSet<[1, 2, 3]>\n"
"    iex> MapSet.delete(set, 2)\n"
"    #MapSet<[1, 3]>\n"
"\n"

#. TRANSLATORS: def MapSet.to_list(map_set)
#: lib/map_set.ex:238
msgid ""
"Converts `set` to a list.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.to_list(MapSet.new([1, 2, 3]))\n"
"    [1, 2, 3]\n"
"\n"
msgstr ""
"`set`をリストに変換します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.to_list(MapSet.new([1, 2, 3]))\n"
"    [1, 2, 3]\n"
"\n"

#. TRANSLATORS: def MapSet.new()
#: lib/map_set.ex:16
msgid ""
"Returns a new set.\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.new\n"
"    #MapSet<[]>\n"
"\n"
msgstr ""
"新しいsetを返します。\n"
"\n"
"## Examples\n"
"\n"
"    iex> MapSet.new\n"
"    #MapSet<[]>\n"
"\n"
