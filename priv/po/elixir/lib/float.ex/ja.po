msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2016-04-02 11:05+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Float.to_char_list(float, options)
#: lib/float.ex:189
msgid ""
"Returns a list which corresponds to the text representation\n"
"of the given float.\n"
"\n"
"## Options\n"
"\n"
"  * `:decimals`   - number of decimal points to show\n"
"  * `:scientific` - number of decimal points to show, in scientific format\n"
"  * `:compact`    - when `true`, use the most compact representation "
"(ignored\n"
"    with the `scientific` option)\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_char_list 7.1, [decimals: 2, compact: true]\n"
"    '7.1'\n"
"\n"
msgstr ""
"与えられた小数に対応するテキスト表現の文字リストを返します。\n"
"\n"
"## オプション\n"
"\n"
"  * `:decimals`   -  表示する小数点以下の桁数\n"
"  * `:scientific` -  科学的フォーマットでの小数点以下の桁数\n"
"  * `:compact`    -  trueの時、最もコンパクトな表現にします(ただし\n"
"    `scientific`オプションがあるときはこのオプションは\n"
"    無視されます)\n"
"\n"
"## 例\n"
"\n"
"    iex> Float.to_char_list 7.1, [decimals: 2, compact: true]\n"
"    '7.1'\n"
"\n"

#. TRANSLATORS: def Float.to_string(float)
#: lib/float.ex:211
msgid ""
"Returns a binary which corresponds to the text representation\n"
"of the given float.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_string(7.0)\n"
"    \"7.00000000000000000000e+00\"\n"
"\n"
msgstr ""
"`some_float`のテキスト表現に対応するバイナリ(文字列)を返します。\n"
"\n"
"コンパイラによりインライン化されます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Float.to_string(7.0)\n"
"    \"7.00000000000000000000e+00\"\n"
"\n"

#. TRANSLATORS: def Float.to_char_list(float)
#: lib/float.ex:173
msgid ""
"Returns a char list which corresponds to the text representation of the "
"given float.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_char_list(7.0)\n"
"    '7.00000000000000000000e+00'\n"
"\n"
msgstr ""
"与えられた浮動小数点数のテキスト表現に対応する文字のリストを返します。\n"
"\n"
"コンパイラによりインライン化されます。\n"
"\n"
"## 例\n"
"\n"
"    iex> Float.to_char_list(7.0)\n"
"    '7.00000000000000000000e+00'\n"
"\n"

#. TRANSLATORS: def Float.ceil(number, precision \\ 0)
#: lib/float.ex:106
msgid ""
"Rounds a float to the smallest integer greater than or equal to `num`.\n"
"\n"
"`ceil/2` also accepts a precision to round a floating point value down\n"
"to an arbitrary number of fractional digits (between 0 and 15).\n"
"\n"
"This function always returns floats. `Kernel.trunc/1` may be used instead "
"to\n"
"truncate the result to an integer afterwards.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.ceil(34.25)\n"
"    35.0\n"
"\n"
"    iex> Float.ceil(-56.5)\n"
"    -56.0\n"
"\n"
"    iex> Float.ceil(34.251, 2)\n"
"    34.26\n"
"\n"
msgstr ""
"`num`以上の最小の整数に小数を丸めます。\n"
"\n"
"`ceil/2`は任意の小数点の桁数(0から15)を切り上げるための精度を受付ます。\n"
"\n"
"この関数は常に小数を返します。整数の結果を得るために`Kernel.trunc/1`が\n"
"使えるかもしれない。\n"
"\n"
"## 例\n"
"\n"
"    iex> Float.ceil(34.25)\n"
"    35.0\n"
"\n"
"    iex> Float.ceil(-56.5)\n"
"    -56.0\n"
"\n"
"    iex> Float.ceil(34.251, 2)\n"
"    34.26\n"
"\n"

#. TRANSLATORS: def Float.floor(number, precision \\ 0)
#: lib/float.ex:76
msgid ""
"Rounds a float to the largest integer less than or equal to `num`.\n"
"\n"
"`floor/2` also accepts a precision to round a floating point value down\n"
"to an arbitrary number of fractional digits (between 0 and 15).\n"
"\n"
"This function always returns a float. `Kernel.trunc/1` may be used instead "
"to\n"
"truncate the result to an integer afterwards.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.floor(34.25)\n"
"    34.0\n"
"\n"
"    iex> Float.floor(-56.5)\n"
"    -57.0\n"
"\n"
"    iex> Float.floor(34.259, 2)\n"
"    34.25\n"
"\n"
msgstr ""
"`num`と等しいか小さい最大の整数に小数を丸めます。\n"
"\n"
"`floor/2`は任意の小数点の桁数(0から15)を切り下げるための精度を受け付けま\n"
"す。\n"
"\n"
"この関数は常に小数を返します。整数の結果を得るためには\n"
"`Kernel.trunc/1`を使用してください。\n"
"\n"
"## 例\n"
"\n"
"    iex> Float.floor(34.25)\n"
"    34.0\n"
"\n"
"    iex> Float.floor(-56.5)\n"
"    -57.0\n"
"\n"
"    iex> Float.floor(34.259, 2)\n"
"    34.25\n"
"\n"

#. TRANSLATORS: Elixir.Float Summary
#: lib/float.ex:4
msgid "Functions for working with floating point numbers.\n"
msgstr "浮動小数点数で動く関数です。\n"

#. TRANSLATORS: def Float.to_string(float, options)
#: lib/float.ex:228
msgid ""
"Returns a binary which corresponds to the text representation\n"
"of `float`.\n"
"\n"
"## Options\n"
"\n"
"  * `:decimals`   - number of decimal points to show\n"
"  * `:scientific` - number of decimal points to show, in scientific format\n"
"  * `:compact`    - when `true`, use the most compact representation "
"(ignored\n"
"    with the `scientific` option)\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_string 7.1, [decimals: 2, compact: true]\n"
"    \"7.1\"\n"
"\n"
"    iex> Float.to_string 7.1, [decimals: 2, compact: false]\n"
"    \"7.10\"\n"
"\n"
msgstr ""
"`float`のテキスト表現に対応するバイナリ(文字列)を返します。\n"
"\n"
"## Options\n"
"\n"
"  * `:decimals`   - number of decimal points to show\n"
"  * `:scientific` - number of decimal points to show, in scientific format\n"
"  * `:compact`    - when `true`, use the most compact representation (ignored\n"
"    with the `scientific` option)\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_string 7.1, [decimals: 2, compact: true]\n"
"    \"7.1\"\n"
"\n"
"    iex> Float.to_string 7.1, [decimals: 2, compact: false]\n"
"    \"7.10\"\n"
"\n"

#. TRANSLATORS: def Float.round(number, precision \\ 0)
#: lib/float.ex:136
msgid ""
"Rounds a floating point value to an arbitrary number of fractional digits\n"
"(between 0 and 15).\n"
"\n"
"This function only accepts floats and always returns a float. Use\n"
"`Kernel.round/1` if you want a function that accepts both floats and "
"integers\n"
"and always returns an integer.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.round(5.5674, 3)\n"
"    5.567\n"
"\n"
"    iex> Float.round(5.5675, 3)\n"
"    5.568\n"
"\n"
"    iex> Float.round(-5.5674, 3)\n"
"    -5.567\n"
"\n"
"    iex> Float.round(-5.5675, 3)\n"
"    -5.568\n"
"\n"
"    iex> Float.round(-5.5675)\n"
"    -6.0\n"
"\n"
msgstr ""
"浮動小数点値を小数点以下任意の桁数(0から15の間)に丸めます。\n"
"\n"
"この関数は小数のみを受け付けて少数を返します。もし小数と整数の両方を受\n"
"付て、常に整数を返す関数を望むなら、`Kernel.round/1`を使用してください。\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.round(5.5674, 3)\n"
"    5.567\n"
"\n"
"    iex> Float.round(5.5675, 3)\n"
"    5.568\n"
"\n"
"    iex> Float.round(-5.5674, 3)\n"
"    -5.567\n"
"\n"
"    iex> Float.round(-5.5675, 3)\n"
"    -5.568\n"
"\n"
"    iex> Float.round(-5.5675)\n"
"    -6.0\n"
"\n"

#. TRANSLATORS: def Float.parse(binary)
#: lib/float.ex:8
msgid ""
"Parses a binary into a float.\n"
"\n"
"If successful, returns a tuple in the form of `{float, remainder_of_binary}"
"`;\n"
"when the binary cannot be coerced into a valid float, the atom `:error` is\n"
"returned.\n"
"\n"
"If the size of float exceeds the maximum size of `1.7976931348623157e+308`,\n"
"the `ArgumentError` exception is raised.\n"
"\n"
"If a float formatted string wants to be directly converted to a float,\n"
"`String.to_float/1` can be used instead.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.parse(\"34\")\n"
"    {34.0, \"\"}\n"
"\n"
"    iex> Float.parse(\"34.25\")\n"
"    {34.25, \"\"}\n"
"\n"
"    iex> Float.parse(\"56.5xyz\")\n"
"    {56.5, \"xyz\"}\n"
"\n"
"    iex> Float.parse(\"pi\")\n"
"    :error\n"
"\n"
msgstr ""
"バイナリを浮動小数点数にパースします。\n"
"\n"
"成功したら、`{float, remainder_of_bianry}`形式のタプルを返します。\n"
"バイナリを有効な浮動小数点数小数に強制出来ないとき、`:error`アトムを返します。\n"
"\n"
"`1.7976931348623157e+308`を越える浮動小数点数なら、`ArgumentError`\n"
"例外が上ります。\n"
"\n"
"もし浮動小数点数にフォーマットされた文字列を直接浮動小数点数に変換\n"
"したいなら、代わりに`String.to_float/1`を使うことができます。\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.parse(\"34\")\n"
"    {34.0, \"\"}\n"
"\n"
"    iex> Float.parse(\"34.25\")\n"
"    {34.25, \"\"}\n"
"\n"
"    iex> Float.parse(\"56.5xyz\")\n"
"    {56.5, \"xyz\"}\n"
"\n"
"    iex> Float.parse(\"pi\")\n"
"    :error\n"
"\n"
