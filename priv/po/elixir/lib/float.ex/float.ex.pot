#. TRANSLATORS: def Float.to_char_list(float, options)
#: lib/float.ex:189 
msgid ""
"Returns a list which corresponds to the text representation\n"
"of the given float.\n"
"\n"
"## Options\n"
"\n"
"  * `:decimals`   - number of decimal points to show\n"
"  * `:scientific` - number of decimal points to show, in scientific format\n"
"  * `:compact`    - when `true`, use the most compact representation (ignored\n"
"    with the `scientific` option)\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_char_list 7.1, [decimals: 2, compact: true]\n"
"    '7.1'\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.to_string(float)
#: lib/float.ex:211 
msgid ""
"Returns a binary which corresponds to the text representation\n"
"of the given float.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_string(7.0)\n"
"    \"7.00000000000000000000e+00\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.to_char_list(float)
#: lib/float.ex:173 
msgid ""
"Returns a char list which corresponds to the text representation of the given float.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_char_list(7.0)\n"
"    '7.00000000000000000000e+00'\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.ceil(number, precision \\ 0)
#: lib/float.ex:106 
msgid ""
"Rounds a float to the smallest integer greater than or equal to `num`.\n"
"\n"
"`ceil/2` also accepts a precision to round a floating point value down\n"
"to an arbitrary number of fractional digits (between 0 and 15).\n"
"\n"
"This function always returns floats. `Kernel.trunc/1` may be used instead to\n"
"truncate the result to an integer afterwards.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.ceil(34.25)\n"
"    35.0\n"
"\n"
"    iex> Float.ceil(-56.5)\n"
"    -56.0\n"
"\n"
"    iex> Float.ceil(34.251, 2)\n"
"    34.26\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.floor(number, precision \\ 0)
#: lib/float.ex:76 
msgid ""
"Rounds a float to the largest integer less than or equal to `num`.\n"
"\n"
"`floor/2` also accepts a precision to round a floating point value down\n"
"to an arbitrary number of fractional digits (between 0 and 15).\n"
"\n"
"This function always returns a float. `Kernel.trunc/1` may be used instead to\n"
"truncate the result to an integer afterwards.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.floor(34.25)\n"
"    34.0\n"
"\n"
"    iex> Float.floor(-56.5)\n"
"    -57.0\n"
"\n"
"    iex> Float.floor(34.259, 2)\n"
"    34.25\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Float Summary
#: lib/float.ex:4 
msgid ""
"Functions for working with floating point numbers.\n"
msgstr ""
#. TRANSLATORS: def Float.to_string(float, options)
#: lib/float.ex:228 
msgid ""
"Returns a binary which corresponds to the text representation\n"
"of `float`.\n"
"\n"
"## Options\n"
"\n"
"  * `:decimals`   - number of decimal points to show\n"
"  * `:scientific` - number of decimal points to show, in scientific format\n"
"  * `:compact`    - when `true`, use the most compact representation (ignored\n"
"    with the `scientific` option)\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.to_string 7.1, [decimals: 2, compact: true]\n"
"    \"7.1\"\n"
"\n"
"    iex> Float.to_string 7.1, [decimals: 2, compact: false]\n"
"    \"7.10\"\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.round(number, precision \\ 0)
#: lib/float.ex:136 
msgid ""
"Rounds a floating point value to an arbitrary number of fractional digits\n"
"(between 0 and 15).\n"
"\n"
"This function only accepts floats and always returns a float. Use\n"
"`Kernel.round/1` if you want a function that accepts both floats and integers\n"
"and always returns an integer.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.round(5.5674, 3)\n"
"    5.567\n"
"\n"
"    iex> Float.round(5.5675, 3)\n"
"    5.568\n"
"\n"
"    iex> Float.round(-5.5674, 3)\n"
"    -5.567\n"
"\n"
"    iex> Float.round(-5.5675, 3)\n"
"    -5.568\n"
"\n"
"    iex> Float.round(-5.5675)\n"
"    -6.0\n"
"\n"
msgstr ""
#. TRANSLATORS: def Float.parse(binary)
#: lib/float.ex:8 
msgid ""
"Parses a binary into a float.\n"
"\n"
"If successful, returns a tuple in the form of `{float, remainder_of_binary}`;\n"
"when the binary cannot be coerced into a valid float, the atom `:error` is\n"
"returned.\n"
"\n"
"If the size of float exceeds the maximum size of `1.7976931348623157e+308`,\n"
"the `ArgumentError` exception is raised.\n"
"\n"
"If a float formatted string wants to be directly converted to a float,\n"
"`String.to_float/1` can be used instead.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Float.parse(\"34\")\n"
"    {34.0, \"\"}\n"
"\n"
"    iex> Float.parse(\"34.25\")\n"
"    {34.25, \"\"}\n"
"\n"
"    iex> Float.parse(\"56.5xyz\")\n"
"    {56.5, \"xyz\"}\n"
"\n"
"    iex> Float.parse(\"pi\")\n"
"    :error\n"
"\n"
msgstr ""
