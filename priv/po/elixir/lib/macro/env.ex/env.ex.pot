#. TRANSLATORS: def Macro.Env.in_match?(arg1)
#: lib/macro/env.ex:116 
msgid ""
"Returns whether the compilation environment is currently\n"
"inside a match clause.\n"
msgstr ""
#. TRANSLATORS: def Macro.Env.in_guard?(arg1)
#: lib/macro/env.ex:110 
msgid ""
"Returns whether the compilation environment is currently\n"
"inside a guard.\n"
msgstr ""
#. TRANSLATORS: def Macro.Env.stacktrace(env)
#: lib/macro/env.ex:121 
msgid ""
"Returns the environment stacktrace.\n"
msgstr ""
#. TRANSLATORS: Elixir.Macro.Env Summary
#: lib/macro/env.ex:1 
msgid ""
"A struct that holds compile time environment information.\n"
"\n"
"The current environment can be accessed at any time as\n"
"`__ENV__`. Inside macros, the caller environment can be\n"
"accessed as `__CALLER__`.\n"
"\n"
"An instance of `Macro.Env` must not be modified by hand. If you need to\n"
"create a custom environment to pass to `Code.eval_quoted/3`, use the\n"
"following trick:\n"
"\n"
"    def make_custom_env do\n"
"      import SomeModule, only: [some_function: 2]\n"
"      alias A.B.C\n"
"      __ENV__\n"
"    end\n"
"\n"
"You may then call `make_custom_env()` to get a struct with the desired\n"
"imports and aliases included.\n"
"\n"
"It contains the following fields:\n"
"\n"
"  * `module` - the current module name\n"
"  * `file` - the current file name as a binary\n"
"  * `line` - the current line as an integer\n"
"  * `function` - a tuple as `{atom, integer`}, where the first\n"
"    element is the function name and the seconds its arity; returns\n"
"    `nil` if not inside a function\n"
"  * `context` - the context of the environment; it can be `nil`\n"
"    (default context), inside a guard or inside an assign\n"
"  * `aliases` -  a list of two item tuples, where the first\n"
"    item is the aliased name and the second the actual name\n"
"  * `requires` - the list of required modules\n"
"  * `functions` - a list of functions imported from each module\n"
"  * `macros` - a list of macros imported from each module\n"
"  * `macro_aliases` - a list of aliases defined inside the current macro\n"
"  * `context_modules` - a list of modules defined in the current context\n"
"  * `vars` - a list keeping all defined variables as `{var, context}`\n"
"  * `export_vars` - a list keeping all variables to be exported in a\n"
"    construct (may be `nil`)\n"
"  * `lexical_tracker` - PID of the lexical tracker which is responsible to\n"
"    keep user info\n"
"  * `local` - the module to expand local functions to\n"
msgstr ""
#. TRANSLATORS: def Macro.Env.location(arg1)
#: lib/macro/env.ex:102 
msgid ""
"Returns a keyword list containing the file and line\n"
"information as keys.\n"
msgstr ""
