msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2016-04-02 17:48+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Macro.Env.in_match?(env)
#: lib/macro/env.ex:115
msgid ""
"Returns whether the compilation environment is currently\n"
"inside a match clause.\n"
msgstr "コンパイル環境が現在のマッチ節の内部かどうかを返します。\n"

#. TRANSLATORS: def Macro.Env.location(env)
#: lib/macro/env.ex:97
msgid ""
"Returns a keyword list containing the file and line\n"
"information as keys.\n"
msgstr ""
"引数から、キーとしてファイルと行番号情報を含むキーワードリストを返\n"
"します。\n"

#. TRANSLATORS: Elixir.Macro.Env Summary
#: lib/macro/env.ex:2
msgid ""
"A struct that holds compile time environment information.\n"
"\n"
"The current environment can be accessed at any time as\n"
"`__ENV__`. Inside macros, the caller environment can be\n"
"accessed as `__CALLER__`.\n"
"\n"
"An instance of `Macro.Env` must not be modified by hand. If you need to\n"
"create a custom environment to pass to `Code.eval_quoted/3`, use the\n"
"following trick:\n"
"\n"
"    def make_custom_env do\n"
"      import SomeModule, only: [some_function: 2]\n"
"      alias A.B.C\n"
"      __ENV__\n"
"    end\n"
"\n"
"You may then call `make_custom_env()` to get a struct with the desired\n"
"imports and aliases included.\n"
"\n"
"It contains the following fields:\n"
"\n"
"  * `module` - the current module name\n"
"  * `file` - the current file name as a binary\n"
"  * `line` - the current line as an integer\n"
"  * `function` - a tuple as `{atom, integer}`, where the first\n"
"    element is the function name and the second its arity; returns\n"
"    `nil` if not inside a function\n"
"  * `context` - the context of the environment; it can be `nil`\n"
"    (default context), inside a guard or inside a match\n"
"  * `aliases` -  a list of two-element tuples, where the first\n"
"    element is the aliased name and the second one the actual name\n"
"  * `requires` - the list of required modules\n"
"  * `functions` - a list of functions imported from each module\n"
"  * `macros` - a list of macros imported from each module\n"
"  * `macro_aliases` - a list of aliases defined inside the current macro\n"
"  * `context_modules` - a list of modules defined in the current context\n"
"  * `vars` - a list keeping all defined variables as `{var, context}`\n"
"  * `export_vars` - a list keeping all variables to be exported in a\n"
"    construct (may be `nil`)\n"
"  * `lexical_tracker` - PID of the lexical tracker which is responsible for\n"
"    keeping user info\n"
"  * `local` - the module to expand local functions to\n"
msgstr ""
"コンパイル時の環境情報を保持する構造体です。\n"
"\n"
"現在の環境は`__ENV__`として何時でもアクセスできます。\n"
"マクロの内側では、呼出し側環境は`__CALLER__`としてアクセス\n"
"できます。\n"
"\n"
"`Macro.Env`のインスタンスは手で変更してはいけません。もし\n"
"カスタム環境を作る必要があれば、以下のトリックを使って、\n"
"`Code.eval_quoted/3`へ渡してください:\n"
"\n"
"    def make_custom_env do\n"
"      import SomeModule, only: [some_function: 2]\n"
"      alias A.B.C\n"
"      __ENV__\n"
"    end\n"
"\n"
"要求されたimportとaliasを含んだ構造を取得するtめに、\n"
"`make_custom_env()`を呼べます。\n"
"\n"
"以下のフィールドを含んでいます:\n"
"\n"
"  * `module` - 現在のモジュール名\n"
"  * `file` -  バイナリとしての現在のファイル名\n"
"  * `line` -  整数としての現在の行番号\n"
"  * `function` - `{atom, integer}`としてのタプルで\n"
"    最初の要素は関数名で二つめはアリティ; 関数の内部でないならnil\n"
"  * `context` - 環境のコンテキスト; `nil`(デフォルトコンテキスト)、\n"
"    ガードの内側か、マッチの内側\n"
"  * `aliases` -  2アイテムのタプルのリストで、最初のアイテムは\n"
"    エイリアスの名前、二つめは実際の名前\n"
"  * `requires` - requireされたモジュールのリスト\n"
"  * `functions` - それぞれのモジュールからimportされた関数のリスト\n"
"  * `macros` - それぞれのモジュールからimportされたマクロのリスト\n"
"  * `macro_aliases` - 現在のマクロの内側で定義されたエイリアスのリスト\n"
"  * `context_modules` - 現在のコンテキストで定義されたモジュールのリスト\n"
"  * `vars` - `{var, context}`として定義された全ての変数を保持したリスト\n"
"  * `export_vars` - constructでexportされた全ての変数を保持したリスト\n"
"    (`nil`の場合もあります)\n"
"  * `lexical_tracker` - ユーザ情報を保つことに責任があるレキシカル\n"
"    トラッカーのpid\n"
"  * `local` - ローカル関数を拡大するモジュール\n"

#. TRANSLATORS: def Macro.Env.in_guard?(env)
#: lib/macro/env.ex:107
msgid ""
"Returns whether the compilation environment is currently\n"
"inside a guard.\n"
msgstr "コンパイル環境が現在ガードの内部かどうかを返します。\n"

#. TRANSLATORS: def Macro.Env.stacktrace(env)
#: lib/macro/env.ex:123
msgid "Returns the environment stacktrace.\n"
msgstr "その環境のスタックトレースを返します。\n"
