#. TRANSLATORS: def File.Stat.from_record(file_info)
#: lib/file/stat.ex:70 
msgid ""
"Converts a `:file_info` record into a `File.Stat`.\n"
msgstr ""
#. TRANSLATORS: Elixir.File.Stat Summary
#: lib/file/stat.ex:4 
msgid ""
"A struct that holds file information.\n"
"\n"
"In Erlang, this struct is represented by a `:file_info` record.\n"
"Therefore this module also provides functions for converting\n"
"between the Erlang record and the Elixir struct.\n"
"\n"
"Its fields are:\n"
"\n"
"  * `size` - size of file in bytes.\n"
"\n"
"  * `type` - `:device | :directory | :regular | :other`; the type of the\n"
"    file.\n"
"\n"
"  * `access` - `:read | :write | :read_write | :none`; the current system\n"
"    access to the file.\n"
"\n"
"  * `atime` - the last time the file was read.\n"
"\n"
"  * `mtime` - the last time the file was written.\n"
"\n"
"  * `ctime` - the interpretation of this time field depends on the operating\n"
"    system. On Unix, it is the last time the file or the inode was changed.\n"
"    In Windows, it is the time of creation.\n"
"\n"
"  * `mode` - the file permissions.\n"
"\n"
"  * `links` - the number of links to this file. This is always 1 for file\n"
"    systems which have no concept of links.\n"
"\n"
"  * `major_device` - identifies the file system where the file is located.\n"
"    In windows, the number indicates a drive as follows: 0 means A:, 1 means\n"
"    B:, and so on.\n"
"\n"
"  * `minor_device` - only valid for character devices on Unix. In all other\n"
"    cases, this field is zero.\n"
"\n"
"  * `inode` - gives the inode number. On non-Unix file systems, this field\n"
"    will be zero.\n"
"\n"
"  * `uid` - indicates the owner of the file. Will be zero for non-Unix file\n"
"    systems.\n"
"\n"
"  * `gid` - indicates the group that owns the file. Will be zero for\n"
"    non-Unix file systems.\n"
"\n"
"The time type returned in `atime`, `mtime`, and `ctime` is dependent on the\n"
"time type set in options. `{:time, type}` where type can be `:local`,\n"
"`:universal`, or `:posix`. Default is `:universal`.\n"
msgstr ""
#. TRANSLATORS: def File.Stat.to_record(stat)
#: lib/file/stat.ex:63 
msgid ""
"Converts a `File.Stat` struct to a `:file_info` record.\n"
msgstr ""
