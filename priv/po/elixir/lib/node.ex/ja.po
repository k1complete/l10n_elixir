msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-05-20 21:54+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Node.start(name, type \\ :longnames, tick_time \\ 15000)
#: lib/node.ex:21
msgid ""
"Turns a non-distributed node into a distributed node.\n"
"\n"
"This functionality starts the `:net_kernel` and other\n"
"related processes.\n"
msgstr ""
"非分散ノードを分散ノードに変えます。\n"
"\n"
"この関数は`:net_kernel`アプリケーションと、そのほかの関連するプロセスを\n"
"開始します。\n"

#. TRANSLATORS: def Node.stop()
#: lib/node.ex:34
msgid ""
"Turns a distributed node into a non-distributed node.\n"
"\n"
"For other nodes in the network, this is the same as the node going down.\n"
"Only possible when the node was started with `Node.start/3`, otherwise\n"
"returns `{:error, :not_allowed}`. Returns `{:error, :not_found}` if the\n"
"local node is not alive.\n"
msgstr ""
"分散ノードを非分散ノードに変えます。\n"
"\n"
"ネットワークの他のノードからは、これはノードがダウンしたのと同じです。\n"
"`Node.start/3`でそのノードがスタートしていたときだけ、この関数を\n"
"呼ぶことができ、さもなければ、`{:error,:not_allowed}`を返します。\n"
"もしローカルノードが生きていないとき、`{:error, :not_found}`を返します。\n"

#. TRANSLATORS: def Node.ping(node)
#: lib/node.ex:119
msgid ""
"Tries to set up a connection to node.\n"
"\n"
"Returns `:pang` if it fails, or `:pong` if it is successful.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Node.ping(:unknown_node)\n"
"    :pang\n"
"\n"
msgstr ""
"ノードへのコネクションをセットアップします。\n"
"\n"
"失敗したら`:pang`を返し、成功したら`:pong`を返します。\n"
"\n"
"## 例\n"
"\n"
"    iex> Node.ping(:unknown_node)\n"
"    :pang\n"
"\n"

#. TRANSLATORS: def Node.set_cookie(node \\ Node.self(), cookie)
#: lib/node.ex:247
msgid ""
"Sets the magic cookie of `node` to the atom `cookie`.\n"
"\n"
"The default node is `Node.self`, the local node. If `node` is the local "
"node,\n"
"the function also sets the cookie of all other unknown nodes to `cookie`.\n"
"\n"
"This function will raise `FunctionClauseError` if the given `node` is not "
"alive.\n"
msgstr ""
"`node`のマジッククッキーをアトム`cookie`にセットします。\n"
"\n"
"デフォルトノードは`Node.self`で、ローカルノードです。`node`がローカルノー\n"
"ドなら、関数は他のすべての不明なノードのクッキーを`cookie`にセットします。\n"
"\n"
"与えられた`node`が生きていないとき、この関数は`FunctionClauseError`を\n"
"上げます。\n"

#. TRANSLATORS: def Node.list(args)
#: lib/node.ex:79
msgid ""
"Returns a list of nodes according to argument given.\n"
"\n"
"The result returned when the argument is a list, is the list of nodes\n"
"satisfying the disjunction(s) of the list elements.\n"
"\n"
"See http://www.erlang.org/doc/man/erlang.html#nodes-1 for more info.\n"
msgstr ""
"与えられた引数に関連するノードのリストを返します。\n"
"\n"
"引数がリストの時、リストのそれぞれの要素のOR条件を満たすノードのリスト\n"
"が結果として返されます。\n"
"\n"
"詳細は、 http://www.erlang.org/doc/man/erlang.html#nodes-1 を参照してく\n"
"ださい。\n"

#. TRANSLATORS: def Node.list()
#: lib/node.ex:65
msgid ""
"Returns a list of all visible nodes in the system, excluding\n"
"the local node.\n"
"\n"
"Same as `list(:visible)`.\n"
msgstr ""
"ローカルノード以外の、システムのvisibleな全てのノードのリストを返します。\n"
"\n"
"`list(:visible)`と同じです。\n"

#. TRANSLATORS: def Node.alive?()
#: lib/node.ex:54
msgid ""
"Returns `true` if the local node is alive.\n"
"\n"
"That is, if the node can be part of a distributed system.\n"
msgstr ""
"もし、ローカルノードが生きていれば、`true`を返します。\n"
"\n"
"つまり、もし、ノードが分散システムの一部で有り得るならば、\n"
"`true`を返します。\n"

#. TRANSLATORS: def Node.monitor(node, flag)
#: lib/node.ex:92
msgid ""
"Monitors the status of the node.\n"
"\n"
"If `flag` is `true`, monitoring is turned on.\n"
"If `flag` is `false`, monitoring is turned off.\n"
"\n"
"See http://www.erlang.org/doc/man/erlang.html#monitor_node-2 for more info.\n"
msgstr ""
"ノードのステータスをモニタします。\n"
"\n"
"もし`flag`が`true`なら、モニタをオンにします。\n"
"もし`flag`が`false`なら、モニタをオフにします。\n"
"\n"
"詳細は http://www.erlang.org/doc/man/erlang.html#monitor_node-2 \n"
"を参照してください。\n"

#. TRANSLATORS: def Node.spawn(node, fun)
#: lib/node.ex:161
msgid ""
"Returns the pid of a new process started by the application of `fun`\n"
"on `node`. If `node` does not exist, a useless pid is returned.\n"
"\n"
"Check http://www.erlang.org/doc/man/erlang.html#spawn-2 for\n"
"the list of available options.\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`fun`の適用により新しいプロセスを開始してそのpidを返します。\n"
"もし`node`が存在しないなら、返されたpidは役にたちません。\n"
"\n"
"有効なオプションのリストについては\n"
"http://www.erlang.org/doc/man/erlang.html#spawn-2 をチェックしてくださ\n"
"い。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.spawn(node, fun, opts)
#: lib/node.ex:176
msgid ""
"Returns the pid of a new process started by the application of `fun`\n"
"on `node`.\n"
"\n"
"If `node` does not exist, a useless pid is returned. Check\n"
"http://www.erlang.org/doc/man/erlang.html#spawn_opt-3 for the list of\n"
"available options.\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`fun`の適用により新しいプロセスを開始してそのpidを返します。\n"
"\n"
"もし`node`が存在しないなら、返されたpidは役にたちません。有効なオプショ\n"
"ンのリストについては、\n"
"http://www.erlang.org/doc/man/erlang.html#spawn_opt-3 をチェックしてく\n"
"ださい。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.spawn(node, module, fun, args, opts)
#: lib/node.ex:206
msgid ""
"Returns the pid of a new process started by the application of\n"
"`module.function(args)` on `node`.\n"
"\n"
"If `node` does not exist, a useless pid is returned. Check\n"
"http://www.erlang.org/doc/man/erlang.html#spawn_opt-5 for the list of\n"
"available options.\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`module.function(args)`の適用により新しいプロセスを開始してその\n"
"pidを返します。\n"
"\n"
"もし`node`が存在しないなら、返されたpidは役にたちません。有効なオプショ\n"
"ンのリストについては、\n"
"http://www.erlang.org/doc/man/erlang.html#spawn_opt-5 をチェックしてく\n"
"ださい。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.spawn(node, module, fun, args)
#: lib/node.ex:191
msgid ""
"Returns the pid of a new process started by the application of\n"
"`module.function(args)` on `node`.\n"
"\n"
"If `node` does not exist, a useless pid is returned. Check\n"
"http://www.erlang.org/doc/man/erlang.html#spawn-4 for the list of\n"
"available options.\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`module.function(args)`の適用により新しいプロセスを開始してその\n"
"pidを返します。\n"
"\n"
"もし`node`が存在しないなら、返されたpidは役にたちません。有効なオプショ\n"
"ンのリストについては、\n"
"http://www.erlang.org/doc/man/erlang.html#spawn_opt-4 をチェックしてく\n"
"ださい。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.spawn_link(node, fun)
#: lib/node.ex:220
msgid ""
"Returns the pid of a new linked process started by the application of `fun` "
"on `node`.\n"
"\n"
"A link is created between the calling process and the new process, "
"atomically.\n"
"If `node` does not exist, a useless pid is returned (and due to the link, an "
"exit\n"
"signal with exit reason `:noconnection` will be received).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`fun`の適用により新しいリンクされたプロセスを開始してそのpidを\n"
"返します。\n"
"\n"
"リンクは呼び出したプロセスと新しいプロセスの間に自動的に作成されます。\n"
"もし`node`が存在しないなら、返されたpidは役にたちません(そしてリンクは\n"
"終了し、終了理由が`:noconnection`のexitシグナルを受信するでしょう)。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: def Node.spawn_link(node, module, fun, args)
#: lib/node.ex:235
msgid ""
"Returns the pid of a new linked process started by the application of\n"
"`module.function(args)` on `node`.\n"
"\n"
"A link is created between the calling process and the new process, "
"atomically.\n"
"If `node` does not exist, a useless pid is returned (and due to the link, an "
"exit\n"
"signal with exit reason `:noconnection` will be received).\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
"`node`で`module.funtion(args)`の適用により新しいリンクされたプロセスを\n"
"開始してそのpidを返します。\n"
"\n"
"リンクは呼び出したプロセスと新しいプロセスの間に自動的に作成されます。\n"
"もし`node`が存在しないなら、返されたpidは役にたちません(そしてリンクは\n"
"終了し、終了理由が`:noconnection`のexitシグナルを受信するでしょう)。\n"
"\n"
"コンパイラによりインライン化されます。\n"

#. TRANSLATORS: Elixir.Node Summary
#: lib/node.ex:1
msgid ""
"Functions related to VM nodes.\n"
"\n"
"Some of the functions in this module are inlined by the compiler,\n"
"similar to functions in the `Kernel` module and they are explicitly\n"
"marked in their docs as \"inlined by the compiler\". For more information\n"
"about inlined functions, check out the `Kernel` module.\n"
msgstr ""
"VMノードに関連する関数です。\n"
"\n"
"このモジュールの関数のいくつかは、`Kernel`モジュールの関数と同じように、\n"
"コンパイラによりインライン化されます。それらは、明示的に\"コンパイラによ\n"
"りインライン化されます\"とドキュメントに記されます。\n"
"\n"
"インライン化関数についての詳細は、`Kernel`モジュールをチェックしてくだ\n"
"さい。\n"

#. TRANSLATORS: def Node.disconnect(node)
#: lib/node.ex:134
msgid ""
"Forces the disconnection of a node.\n"
"\n"
"This will appear to the `node` as if the local node has crashed.\n"
"This function is mainly used in the Erlang network authentication\n"
"protocols. Returns `true` if disconnection succeeds, otherwise `false`.\n"
"If the local node is not alive, the function returns `:ignored`.\n"
"\n"
"See http://www.erlang.org/doc/man/erlang.html#disconnect_node-1 for more "
"info.\n"
msgstr ""
"ノードの切断を強制します。\n"
"\n"
"これは、ローカルノードがクラッシュしたかのように、`node`に\n"
"表れます。\n"
"この関数は主に、Erlangネットワーク認証プロトコルにおいて使われます。\n"
"切断が成功したら`true`を返し、さもなくば、`false`を返します。\n"
"ローカルノードが生きていないなら、関数は`:ignored`を返します。\n"
"\n"
"詳細は、 http://www.erlang.org/doc/man/erlang.html#disconnect_node-1 \n"
"を参照してください。\n"

#. TRANSLATORS: def Node.connect(node)
#: lib/node.ex:147
msgid ""
"Establishes a connection to `node`.\n"
"\n"
"Returns `true` if successful, `false` if not, and the atom\n"
"`:ignored` if the local node is not alive.\n"
"\n"
"See http://erlang.org/doc/man/net_kernel.html#connect_node-1 for more info.\n"
msgstr ""
"`node`への接続を確立します。\n"
"\n"
"成功すると`true`、失敗すると`false`を、ローカルノードが\n"
"生きていないとアトム`:ignored`を返します。\n"
"\n"
"詳細は、 http://erlang.org/doc/man/net_kernel.html#connect_node-1 を\n"
"参照してください。\n"

#. TRANSLATORS: def Node.get_cookie()
#: lib/node.ex:256
msgid ""
"Returns the magic cookie of the local node.\n"
"\n"
"Returns the cookie if the node is alive, otherwise `:nocookie`.\n"
msgstr ""
"ローカルノードのマジッククッキーを返します。\n"
"\n"
"もしノードが生きていればクッキーを、さもなくば`:nocookie`を返します。\n"

#. TRANSLATORS: def Node.self()
#: lib/node.ex:44
msgid ""
"Returns the current node.\n"
"\n"
"It returns the same as the built-in `node()`.\n"
msgstr ""
"現在のノードを返します。\n"
"\n"
"ビルトインの`node()`と同じように返します。\n"

#. TRANSLATORS: def Node.monitor(node, flag, options)
#: lib/node.ex:103
msgid ""
"Behaves as `monitor/2` except that it allows an extra\n"
"option to be given, namely `:allow_passive_connect`.\n"
"\n"
"See http://www.erlang.org/doc/man/erlang.html#monitor_node-3 for more info.\n"
msgstr ""
"特別なオプション`:allow_passive_connect`を与えることが\n"
"できる以外は、`monitor/2`として振る舞います。\n"
"\n"
"詳細は、\n"
"http://www.erlang.org/doc/man/erlang.html#monitor_node-3 \n"
"を参照してください。\n"
