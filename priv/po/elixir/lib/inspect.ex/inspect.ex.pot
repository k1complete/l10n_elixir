#. TRANSLATORS: Elixir.Inspect Summary
#: lib/inspect.ex:5 
msgid ""
"The `Inspect` protocol is responsible for converting any Elixir\n"
"data structure into an algebra document. This document is then\n"
"formatted, either in pretty printing format or a regular one.\n"
"\n"
"The `inspect/2` function receives the entity to be inspected\n"
"followed by the inspecting options, represented by the struct\n"
"`Inspect.Opts`.\n"
"\n"
"Inspection is done using the functions available in `Inspect.Algebra`.\n"
"\n"
"## Examples\n"
"\n"
"Many times, inspecting a structure can be implemented in function\n"
"of existing entities. For example, here is `MapSet`'s `inspect`\n"
"implementation:\n"
"\n"
"    defimpl Inspect, for: MapSet do\n"
"      import Inspect.Algebra\n"
"\n"
"      def inspect(dict, opts) do\n"
"        concat [\"#MapSet<\", to_doc(MapSet.to_list(dict), opts), \">\"]\n"
"      end\n"
"    end\n"
"\n"
"The `concat` function comes from `Inspect.Algebra` and it\n"
"concatenates algebra documents together. In the example above,\n"
"it is concatenating the string `\"MapSet<\"` (all strings are\n"
"valid algebra documents that keep their formatting when pretty\n"
"printed), the document returned by `Inspect.Algebra.to_doc/2` and the\n"
"other string `\">\"`.\n"
"\n"
"Since regular strings are valid entities in an algebra document,\n"
"an implementation of inspect may simply return a string,\n"
"although that will devoid it of any pretty-printing.\n"
"\n"
"## Error handling\n"
"\n"
"In case there is an error while your structure is being inspected,\n"
"Elixir will raise an `ArgumentError` error and will automatically fall back\n"
"to a raw representation for printing the structure.\n"
"\n"
"You can however access the underlying error by invoking the Inspect\n"
"implementation directly. For example, to test Inspect.MapSet above,\n"
"you can invoke it as:\n"
"\n"
"    Inspect.MapSet.inspect(MapSet.new, %Inspect.Opts{})\n"
"\n"
msgstr ""
