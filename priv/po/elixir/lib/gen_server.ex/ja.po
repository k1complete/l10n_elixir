msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-09-15 23:02+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: @type debug
#: lib/gen_server.ex:0
msgid "debug options supported by the `start*` functions"
msgstr "`start*`関数によりサポートされるデバッグオプション"

#. TRANSLATORS: @type from
#: lib/gen_server.ex:0
msgid ""
"Tuple describing the client of a call request.\n"
"\n"
"`pid` is the pid of the caller and `tag` is a unique term used to identify "
"the\n"
"call.\n"
msgstr ""
"呼出しリクエストのクライアントを記述するタプルです。\n"
"\n"
"`pid`は呼出し側のpidで、`tag`は呼出しのIDとして使われる\n"
"ユニークなtermです。\n"

#. TRANSLATORS: def GenServer.cast(server, request)
#: lib/gen_server.ex:545
msgid ""
"Sends an asynchronous request to the `server`.\n"
"\n"
"This function returns `:ok` without waiting for the\n"
"destination `server` to handle the message. Therefore it\n"
"is unknown whether the destination `server` successfully\n"
"handled the message. If the `server` is an atom without\n"
"an associated process an `ArgumentError` is raised. In\n"
"all other cases the function returns `:ok` regardless of\n"
"whether the destination `server` (or node) exists. Note\n"
"that `{name, node()}` can be used when an exception is\n"
"not desired if no process is locally associated with the\n"
"atom `name`.\n"
"\n"
"`handle_cast/2` will be called on the server to handle\n"
"the request. In case the `server` is on a node which is\n"
"not yet connected to the caller one, the call is going to\n"
"block until a connection happens. This is different than\n"
"the behaviour in OTP's `:gen_server` where the message\n"
"is sent by another process in this case, which could cause\n"
"messages to other nodes to arrive out of order.\n"
msgstr ""
"`server`へ非同期要求を送信します。\n"
"\n"
"この関数は、送信先の`server`がメッセージを処理するのを\n"
"待つことなく`:ok`を返します。従って、送信先の`server`が\n"
"メッセージを処理に成功したかどうかは分りません。もし、\n"
"`server`が関連付けられたプロセスがないアトムなら、\n"
"`ArgumentError`が上がります。\n"
"送信先の`server`(またはノード)が存在するか否かを問わず、\n"
"他の全てのケースでは、関数は`:ok`を返します。\n"
"アトム`name`が関連しているローカルプロセスがなくて、\n"
"例外の発生を望まない場合、`{name, node()}`を使うことが\n"
"できることに注意してください。\n"
"\n"
"`handle_cast/2`は要求を処理するためにサーバで呼ばれます。\n"
"`server`が呼び出し側にまだ接続していないノードである場\n"
"合に備えて、接続が起こるまでは呼出しはブロックします。\n"
"これは、OTPの`:gen_server`ビヘイビアとは異なります(OTP\n"
"の`:gen_server`ビヘイビアでは、この場合、メッセージはも\n"
"う一つのプロセスまで送られ、その結果、他のノードへのメッ\n"
"セージの順序が乱れて到着するかもしれません)。\n"

#. TRANSLATORS: @type server
#: lib/gen_server.ex:0
msgid "The server reference"
msgstr "サーバのリファレンス"

#. TRANSLATORS: @type name
#: lib/gen_server.ex:0
msgid "The GenServer name"
msgstr "GenServerの名前"

#. TRANSLATORS: def GenServer.start(module, args, options \\ [])
#: lib/gen_server.ex:491
msgid ""
"Starts a `GenServer` process without links (outside of a supervision tree).\n"
"\n"
"See `start_link/3` for more information.\n"
msgstr ""
"リンクなし(監督ツリーの外側)で`GenServer`プロセスを開始します。\n"
"\n"
"詳細は`start_link/3`を参照してください。\n"

#. TRANSLATORS: def GenServer.start_link(module, args, options \\ [])
#: lib/gen_server.ex:447
msgid ""
"Starts a `GenServer` process linked to the current process.\n"
"\n"
"This is often used to start the `GenServer` as part of a supervision tree.\n"
"\n"
"Once the server is started, it calls the `init/1` function in the given "
"`module`\n"
"passing the given `args` to initialize it. To ensure a synchronized start-"
"up\n"
"procedure, this function does not return until `init/1` has returned.\n"
"\n"
"Note that a `GenServer` started with `start_link/3` is linked to the\n"
"parent process and will exit in case of crashes. The GenServer will also\n"
"exit due to the `:normal` reasons in case it is configured to trap exits\n"
"in the `init/1` callback.\n"
"\n"
"## Options\n"
"\n"
"The `:name` option is used for name registration as described in the module\n"
"documentation. If the option `:timeout` option is present, the server is\n"
"allowed to spend the given milliseconds initializing or it will be\n"
"terminated and the start function will return `{:error, :timeout}`.\n"
"\n"
"If the `:debug` option is present, the corresponding function in the\n"
"[`:sys` module](http://www.erlang.org/doc/man/sys.html) will be invoked.\n"
"\n"
"If the `:spawn_opt` option is present, its value will be passed as options\n"
"to the underlying process as in `Process.spawn/4`.\n"
"\n"
"## Return values\n"
"\n"
"If the server is successfully created and initialized, the function returns\n"
"`{:ok, pid}`, where pid is the pid of the server. If a process with the \n"
"specified server name already exists, the function returns\n"
"`{:error, {:already_started, pid}}` with the pid of that process.\n"
"\n"
"If the `init/1` callback fails with `reason`, the function returns\n"
"`{:error, reason}`. Otherwise, if it returns `{:stop, reason}`\n"
"or `:ignore`, the process is terminated and the function returns\n"
"`{:error, reason}` or `:ignore`, respectively.\n"
msgstr ""
"現在のプロセスにリンクされた`GenServer`プロセスを開始します。\n"
"\n"
"これは、しばしば監督ツリーの一部として、`GenServer`を開始するために\n"
"使われます。\n"
"\n"
"一旦サーバが開始したら、与えられたモジュールの`init/1`関数を与えらえた\n"
"引数を伴って初期化の為に呼び出します。スタートアップ手続の同期を\n"
"確実にするために、この関数は`init/1`が帰って来るまで、制御を戻しません。\n"
"\n"
"`start_link/3`で開始した`GenServer`は親プロセスにリンクされていて、\n"
"親プロセスがクラッシュした場合、終了することに注意してください。\n"
"`init/1`コールバックでexitをトラップするように構成されている場合もまた、\n"
"GenServerは`:normal` reasonで終了します。\n"
"\n"
"## オプション\n"
"\n"
"`:name`オプションはモジュールドキュメントで記載されているように、登録の\n"
"為に使われます。`:timeout`オプションがあると、エージェントは、最大初期\n"
"値として与えられたミリセカンド秒間起動に時間をかけることを許可します。\n"
"あるいは、エージェントの起動は終了させられて、スタート関数は`{:error,\n"
":timeout}`を返します。\n"
"\n"
"`:debug`オプションがあると、[`:sys` モジュー\n"
"ル](http://www.erlang.org/doc/man/sys.html) で対応する関数が起動されま\n"
"す。\n"
"\n"
"`:spawn_opt`があると、その値は`Process.spawn/4`のように根底にある\n"
"プロセスまでオプションとして渡されます。\n"
"\n"
"## 戻値\n"
"\n"
"もしサーバがうまく作成されて、初期化されたら、関数は、pidをサーバのプロ\n"
"セス識別子として`{:ok, pid}`を返します。もし与えられたサーバ名でプロセス\n"
"が既に存在したら、そのプロセスのプロセス識別子をpidとして、関数は\n"
"`{:error, {:already_started, pid}}`を返します。\n"
"\n"
"もし`init/1`コールバックが`reason`で失敗したら、関数は関数は`{:error,\n"
"reason}`を返します。もしくは、`init/1`が`{:stop, reason}`か`:ignore`を\n"
"返したら、プロセスは終了され、関数は`{:error, reason}`か`:ignore`をそれ\n"
"ぞれ返します。\n"

#. TRANSLATORS: def GenServer.whereis(pid)
#: lib/gen_server.ex:665
msgid ""
"Returns the `pid` or `{name, node}` of a GenServer process.\n"
"Returns `nil` if no process is associated with the given name.\n"
"\n"
"For example, to lookup a server process, monitor it and send a cast:\n"
"\n"
"    process = GenServer.whereis(server)\n"
"    monitor = Process.monitor(process)\n"
"    GenServer.cast(process, :hello)\n"
"\n"
msgstr ""
"GenServerプロセスの`pid`か`{name, node}`を返します。\n"
"与えられた名前に関連するプロセスがない場合`nil`を返します。\n"
"\n"
"以下の例は、サーバプロセスをlookupして、モニタして、\n"
"castを送信しています:\n"
"\n"
"    process = GenServer.whereis(server)\n"
"    monitor = Process.monitor(process)\n"
"    GenServer.cast(process, :hello)\n"
"\n"

#. TRANSLATORS: def GenServer.reply(client, reply)
#: lib/gen_server.ex:640
msgid ""
"Replies to a client.\n"
"\n"
"This function can be used by a server to explicitly send a reply to a\n"
"client that called `call/3` or `multi_call/4`. When the reply cannot be\n"
"defined in the return value of `handle_call/3`.\n"
"\n"
"The `client` must be the `from` argument (the second argument) received\n"
"in `handle_call/3` callbacks. Reply is an arbitrary term which will be\n"
"given back to the client as the return value of the call.\n"
"\n"
"This function always returns `:ok`.\n"
msgstr ""
"clientへ応答します。\n"
"\n"
"この関数は、`call/3`または`multi_call/4`を呼び出したクライアントに、\n"
"明示的に応答を送信するために、サーバによって使われることがあります。\n"
"応答が`handle_call/3`の戻値で定義されることが出来無い時。\n"
"\n"
"`client`は、`handle_call/3`コールバックで受信した、(2番目の引数の)\n"
"`from`引数でなくてはなりません。\n"
"`reply`は、呼び出しの戻値としてクライアントに返される、任意のtermです。\n"
"\n"
"この関数は常に`:ok`を返します。\n"

#. TRANSLATORS: @type on_start
#: lib/gen_server.ex:0
msgid "Return values of `start*` functions"
msgstr "`start*`関数の戻値"

#. TRANSLATORS: def GenServer.call(server, request, timeout \\ 5000)
#: lib/gen_server.ex:512
msgid ""
"Makes a synchronous call to the `server` and waits for its reply.\n"
"\n"
"The client sends the given `request` to the server and waits until a reply\n"
"arrives or a timeout occurs. `handle_call/3` will be called on the server\n"
"to handle the request.\n"
"\n"
"The server can be any of the values described in the `Name Registration`\n"
"section of the module documentation.\n"
"\n"
"## Timeouts\n"
"\n"
"The `timeout` is an integer greater than zero which specifies how many\n"
"milliseconds to wait for a reply, or the atom `:infinity` to wait\n"
"indefinitely. The default value is 5000. If no reply is received within\n"
"the specified time, the function call fails. If the caller catches the\n"
"failure and continues running, and the server is just late with the reply,\n"
"it may arrive at any time later into the caller's message queue. The caller\n"
"must in this case be prepared for this and discard any such garbage "
"messages\n"
"that are two element tuples with a reference as the first element.\n"
msgstr ""
"`server`を同期的に呼び出し、その応答を待ちます。\n"
"\n"
"クライアントは与えられた`request`をサーバに送信し、\n"
"応答が到着するか、タイムアウトが起きるまで待ちます。\n"
"`handle_call/3`がリクエストをハンドルするためにサーバで呼ばれます。\n"
"\n"
"引数のserverはモジュールドキュメントの`名前登録`セクションで記述された\n"
"任意の値をとることができます。\n"
"\n"
"## タイウアウト\n"
"\n"
"`timeout`は、応答を待つ長さを示すミリ秒で、0より大きな整数か、無限に待\n"
"つことを示すアトムで、`:infinity`のいずれかです。デフォルト値は5000です。\n"
"もし指定された時間内に応答が受信されないなら、関数呼び出しは失敗します。\n"
"もし呼び出し側が失敗を捕捉し、実行を継続し、そして、サーバが送れて応答\n"
"したら、呼び出し側のメッセージキューに送れて到着します。呼び出し側は、\n"
"この場合、これに備えなければならず、最初の要素としてリファレンスである\n"
"2要素のタプルのゴミメッセージを捨てなければなりません。\n"

#. TRANSLATORS: def GenServer.abcast(nodes \\ nodes(), name, request)
#: lib/gen_server.ex:594
msgid ""
"Casts all servers locally registered as `name` at the specified nodes.\n"
"\n"
"The function returns immediately and ignores nodes that do not exist, or "
"where the\n"
"server name does not exist.\n"
"\n"
"See `multi_call/4` for more information.\n"
msgstr ""
"指定されたノードに`name`としてローカルに登録された、全てのサーバに\n"
"キャストします。\n"
"\n"
"関数は直ちに戻り、存在しないノード、存在しない\n"
"サーバ名が存在しないノードを無視します。\n"
"\n"
"詳細は、 `multi_call/4` を参照してください。\n"

#. TRANSLATORS: def GenServer.multi_call(nodes \\ nodes(), name, request, timeout \\ :infinity)
#: lib/gen_server.ex:618
msgid ""
"Calls all servers locally registered as `name` at the specified `nodes`.\n"
"\n"
"The `request` is first sent to every node and then we wait for the\n"
"replies. This function returns a tuple containing the node and its reply\n"
"as first element and all bad nodes as second element. The bad nodes is a\n"
"list of nodes that either did not exist, or where a server with the given\n"
"`name` did not exist or did not reply.\n"
"\n"
"Nodes is a list of node names to which the request is sent. The default\n"
"value is the list of all known nodes.\n"
"\n"
"To avoid that late answers (after the timeout) pollute the caller's message\n"
"queue, a middleman process is used to do the actual calls. Late answers "
"will\n"
"then be discarded when they arrive to a terminated process.\n"
msgstr ""
"指定された`nodes`で`name`としてローカルに登録された全てのサーバ\n"
"を呼び出します。\n"
"\n"
"`request`は最初にそれぞれのノードへ送られ、それから、応答を待ちます。\n"
"この関数は、最初の要素として応答したノードとその応答を、2番目の\n"
"要素として全ての悪いノードを含む、\n"
"タプルを返します。\n"
"悪いノードは、\n"
"存在しなかかったか、与えられた`name`のサーバが存在しなかったか、応答が\n"
"なかったノードのリストです。\n"
"\n"
"nodesはrequestが送られる、ノード名のリストです。デフォルト値は\n"
"知っている全てのノード(nodes())です。\n"
"\n"
"(タイムアウトの後での)遲い応答が、呼び出し側のメッセージ\n"
"キューを汚染することを避けるために、実際の呼び出しには仲介者プロセスが使われ"
"ます。\n"
"遲い応答が終了したプロセスに届いたとき、それらは捨てられます。\n"

#. TRANSLATORS: Elixir.GenServer Summary
#: lib/gen_server.ex:2
msgid ""
"A behaviour module for implementing the server of a client-server relation.\n"
"\n"
"A GenServer is a process as any other Elixir process and it can be used\n"
"to keep state, execute code asynchronously and so on. The advantage of "
"using\n"
"a generic server process (GenServer) implemented using this module is that "
"it\n"
"will have a standard set of interface functions and include functionality "
"for\n"
"tracing and error reporting. It will also fit into a supervision tree.\n"
"\n"
"## Example\n"
"\n"
"The GenServer behaviour abstracts the common client-server interaction.\n"
"Developers are only required to implement the callbacks and functionality "
"they are\n"
"interested in.\n"
"\n"
"Let's start with a code example and then explore the available callbacks.\n"
"Imagine we want a GenServer that works like a stack, allowing us to push\n"
"and pop items:\n"
"\n"
"  defmodule Stack do\n"
"    use GenServer\n"
"\n"
"    # Callbacks\n"
"\n"
"    def handle_call(:pop, _from, [h|t]) do\n"
"      {:reply, h, t}\n"
"    end\n"
"\n"
"    def handle_cast({:push, item}, state) do\n"
"      {:noreply, [item|state]}\n"
"    end\n"
"  end\n"
"\n"
"  # Start the server\n"
"  {:ok, pid} = GenServer.start_link(Stack, [:hello])\n"
"\n"
"  # This is the client\n"
"  GenServer.call(pid, :pop)\n"
"  #=> :hello\n"
"\n"
"  GenServer.cast(pid, {:push, :world})\n"
"  #=> :ok\n"
"\n"
"  GenServer.call(pid, :pop)\n"
"  #=> :world\n"
"\n"
"We start our `Stack` by calling `start_link/3`, passing the module\n"
"with the server implementation and its initial argument (a list\n"
"representing the stack containing the item `:hello`). We can primarily\n"
"interact with the server by sending two types of messages. **call**\n"
"messages expect a reply from the server (and are therefore synchronous)\n"
"while **cast** messages do not.\n"
"\n"
"Every time you do a `GenServer.call/3`, the client will send a message\n"
"that must be handled by the `handle_call/3` callback in the GenServer.\n"
"A `cast/2` message must be handled by `handle_cast/2`.\n"
"\n"
"## Callbacks\n"
"\n"
"There are 6 callbacks required to be implemented in a `GenServer`. By\n"
"adding `use GenServer` to your module, Elixir will automatically define\n"
"all 6 callbacks for you, leaving it up to you to implement the ones\n"
"you want to customize.\n"
"\n"
"## Name Registration\n"
"\n"
"Both `start_link/3` and `start/3` support the `GenServer` to register\n"
"a name on start via the `:name` option. Registered names are also\n"
"automatically cleaned up on termination. The supported values are:\n"
"\n"
"* an atom - the GenServer is registered locally with the given name\n"
"  using `Process.register/2`.\n"
"\n"
"* `{:global, term}`- the GenServer is registered globally with the given\n"
"  term using the functions in the `:global` module.\n"
"\n"
"* `{:via, module, term}` - the GenServer is registered with the given\n"
"  mechanism and name. The `:via` option expects a module name to control\n"
"  the registration mechanism alongside a name which can be any term.\n"
"\n"
"For example, we could start and register our Stack server locally as "
"follows:\n"
"\n"
"  # Start the server and register it locally with name MyStack\n"
"  {:ok, _} = GenServer.start_link(Stack, [:hello], name: MyStack)\n"
"\n"
"  # Now messages can be sent directly to MyStack\n"
"  GenServer.call(MyStack, :pop) #=> :hello\n"
"\n"
"Once the server is started, the remaining functions in this module "
"(`call/3`,\n"
"`cast/2`, and friends) will also accept an atom, or any `:global` or `:via`\n"
"tuples. In general, the following formats are supported:\n"
"\n"
"* a `pid`\n"
"* an `atom` if the server is locally registered\n"
"* `{atom, node}` if the server is locally registered at another node\n"
"* `{:global, term}` if the server is globally registered\n"
"* `{:via, module, name}` if the server is registered through an alternative\n"
"  registry\n"
"\n"
"## Client / Server APIs\n"
"\n"
"Although in the example above we have used `GenServer.start_link/3` and\n"
"friends to directly start and communicate with the server, most of the\n"
"time we don't call the `GenServer` functions directly. Instead, we wrap\n"
"the calls in new functions representing the public API of the server.\n"
"\n"
"Here is a better implementation of our Stack module:\n"
"\n"
"  defmodule Stack do\n"
"    use GenServer\n"
"\n"
"    # Client\n"
"\n"
"    def start_link(default) do\n"
"      GenServer.start_link(__MODULE__, default)\n"
"    end\n"
"\n"
"    def push(pid, item) do\n"
"      GenServer.cast(pid, {:push, item})\n"
"    end\n"
"\n"
"    def pop(pid) do\n"
"      GenServer.call(pid, :pop)\n"
"    end\n"
"\n"
"    # Server (callbacks)\n"
"\n"
"    def handle_call(:pop, _from, [h|t]) do\n"
"      {:reply, h, t}\n"
"    end\n"
"\n"
"    def handle_call(request, from, state) do\n"
"      # Call the default implementation from GenServer\n"
"      super(request, from, state)\n"
"    end\n"
"\n"
"    def handle_cast({:push, item}, state) do\n"
"      {:noreply, [item|state]}\n"
"    end\n"
"\n"
"    def handle_cast(request, state) do\n"
"      super(request, state)\n"
"    end\n"
"  end\n"
"\n"
"In practice, it is common to have both server and client functions in\n"
"the same module. If the server and/or client implementations are growing\n"
"complex, you may want to have them in different modules.\n"
"\n"
"## Receiving custom messages\n"
"\n"
"The goal of a `GenServer` is to abstract the \"receive\" loop for "
"developers,\n"
"automatically handling system messages, support code change, synchronous\n"
"calls and more. Therefore, you should never call your own \"receive\" "
"inside\n"
"the GenServer callbacks as doing so will cause the GenServer to misbehave.\n"
"If you want to receive custom messages, always receive them in "
"`handle_info/2`.\n"
"\n"
"## Learn more\n"
"\n"
"If you wish to find out more about gen servers, the Elixir Getting Started\n"
"guide provides a tutorial-like introduction. The documentation and links\n"
"in Erlang can also provide extra insight.\n"
"\n"
"* http://elixir-lang.org/getting-started/mix-otp/genserver.html\n"
"* http://www.erlang.org/doc/man/gen_server.html\n"
"* http://www.erlang.org/doc/design_principles/gen_server_concepts.html\n"
"* http://learnyousomeerlang.com/clients-and-servers\n"
msgstr ""
"クライアント-サーバ関係のサーバを実装するためのビヘイビアモジュールです。\n"
"\n"
"GenServerは、\n"
"他の任意のElixirプロセスを使い、ステートを保持し、非同期にコードを実行、\n"
"その他を行う、プロセスです。\n"
"コノモジュールによる一般的なサーバプロセス(GenServer)実装の長所は、\n"
"それがインタフェース関数の標準的なセットを持っていて、\n"
"トレースとエラーレポートの為の機能を含んでいることです。\n"
"それは、スーパビジョンツリーにも適合します。\n"
"\n"
"## 例\n"
"\n"
"GenServerビヘイビアは一般のクライアント-サーバインタラクションを抽象化します。\n"
"開発者は彼らが興味がある機能とコールバックの実装が要求されるだけです。\n"
"\n"
"コード例から始めましょう。それから有効なコールバックを\n"
"調査しましょう。\n"
"私達はGenServerが、アイテムをプッシュしたりポップしたりする、\n"
"スタックのように、動いて欲しいとします:\n"
"\n"
"  defmodule Stack do\n"
"    use GenServer\n"
"\n"
"    # Callbacks\n"
"\n"
"    def handle_call(:pop, _from, [h|t]) do\n"
"      {:reply, h, t}\n"
"    end\n"
"\n"
"    def handle_cast({:push, item}, state) do\n"
"      {:noreply, [item|state]}\n"
"    end\n"
"  end\n"
"\n"
"  # Start the server\n"
"  {:ok, pid} = GenServer.start_link(Stack, [:hello])\n"
"\n"
"  # This is the client\n"
"  GenServer.call(pid, :pop)\n"
"  #=> :hello\n"
"\n"
"  GenServer.cast(pid, {:push, :world})\n"
"  #=> :ok\n"
"\n"
"  GenServer.call(pid, :pop)\n"
"  #=> :world\n"
"\n"
"サーバ実装モジュールと、初期値(アイテム`:hello`を含むスタックを\n"
"表現したリスト)を渡し、`start_link/3`を呼び出すことで私達の`Stack`は\n"
"開始します。\n"
"私達は、主に二種類のメッセージを送信することで、\n"
"サーバと対話することができます。\n"
"**call**メッセージはサーバからの応答を期待します(従って同期しています)が、\n"
"**calst**メッセージはそうではありません。\n"
"\n"
"`GenServer.call/3`を呼ぶたびに、クライアントは、GenServerの\n"
"`handle_call/3`コールバックによりハンドルされなければならない、メッセー\n"
"ジを送信します。`cast/2`メッセージは`handle_cast/2`によりハンドルされな\n"
"ければなりません。\n"
"\n"
"## Callbacks\n"
"\n"
"`GenServer`で実装することが要求されている6個のコールバックがあります。\n"
"`use GenServer`をあなたのモジュールに追加することにより、Elixir自動的に\n"
"6個のコールバックを定義し、カスタマイズしたいものの実装をあなたに任せます:\n"
"コールバックは:\n"
"\n"
"  * `init(args)` - サーバが開始したときに実行されます。\n"
"\n"
"    以下を返さなければなりません:\n"
"\n"
"    -  `{:ok, state}`\n"
"    -  `{:ok, state, timeout}`\n"
"    -  `:ignore`\n"
"    -  `{:stop, reason}`\n"
"\n"
"  * `handle_call(msg, {from, ref}, state)` and `handle_cast(msg, state)` -\n"
"    call(同期)とcast(非同期)メッセージをハンドルするために起動されます。\n"
"\n"
"    以下を返さなければなりません:\n"
"\n"
"    -  `{:reply, reply, new_state}`\n"
"    -  `{:reply, reply, new_state, timeout}`\n"
"    -  `{:reply, reply, new_state, :hibernate}`\n"
"    -  `{:noreply, new_state}`\n"
"    -  `{:noreply, new_state, timeout}`\n"
"    -  `{:noreply, new_state, :hibernate}`\n"
"    -  `{:stop, reason, new_state}`\n"
"    -  `{:stop, reason, reply, new_state}`\n"
"\n"
"  * `handle_info(msg, state)` - プロセスにより受信された他の全ての\n"
"    メッセージをハンドルするために起動されます。\n"
"\n"
"    以下を返さなければなりません:\n"
"\n"
"    -  `{:noreply, state}`\n"
"    -  `{:noreply, state, timeout}`\n"
"    -  `{:stop, reason, state}`\n"
"\n"
"  * `terminate(reason, state)` - \n"
"    サーバが終了しようとしている時に呼び出され、クリーンアップに\n"
"    役立ちます。`:ok`を返さなければなりません。\n"
"\n"
"  * `code_change(old_vsn, state, extra)` - アプリケーションコードが\n"
"    ライブアップグレードされた時に呼び出されます\n"
"    (ホットコードスワッピング)。\n"
"\n"
"    以下を返さなければなりません:\n"
"\n"
"    -  `{:ok, new_state}`\n"
"    -  `{:error, reason}`\n"
"\n"
"## Name Registration\n"
"\n"
"`start_link/3`と`start/3`の両方は、`GenServer`で\n"
"`:name`オプションにより開始する時に名前を登録することをサポートします。\n"
"登録された名前は、終了時に自動的にクリーンアップされます。サポート\n"
"された値は以下の通りです:\n"
"\n"
"* an atom - GenServerは`Process.register/2`を使い、与えられた名前を\n"
"  ローカルに登録されます。\n"
"\n"
"* `{:global, term}`- GenServerは`:global`オジュールの関数を使い、\n"
"  与えられたtermをグローバルに登録されます。\n"
"\n"
"* `{:via, module, term}` - GenServerは与えられたメカニズムと名前で\n"
"  登録されます。`:via`オプションは、登録メカニズムを制御する\n"
"  モジュール名moduleと、任意の語をとることができるnameを期待します。\n"
"\n"
"例えば、私達のStackサーバを以下のようにローカルとして登録して\n"
"開始できます:\n"
"\n"
"  # Start the server and register it locally with name MyStack\n"
"  {:ok, _} = GenServer.start_link(Stack, [:hello], name: MyStack)\n"
"\n"
"  # Now messages can be sent directly to MyStack\n"
"  GenServer.call(MyStack, :pop) #=> :hello\n"
"\n"
"一旦サーバが開始したら、このモジュールの残りの関数\n"
"(`call/3`、`cast/2`とその他)も、アトムまたは、任意の`:global`、`:via`タプル\n"
"を受け付けます。一般的に、以下のフォーマットがサポートされています:\n"
"\n"
"* `pid`\n"
"* `atom` サーバがローカルに登録されている場合\n"
"* `{atom, node}` ローカルに登録されているサーバが他のノードにある場合\n"
"* `{:global, term}` サーバがグローバルに登録されている場合\n"
"* `{:via, module, name}` サーバが代わりの登録方法を通して登録された場合\n"
"\n"
"## Client / Server APIs\n"
"\n"
"上の例を通じて、サーバを直接開始したり通信するために、\n"
"`GenServer.start_link/3`とそのフレンドを、使いましたが、\n"
"殆ど、私達は`GenServer`関数を直接には呼び出しません。\n"
"代わりに、サーバの公式なAPIを表現する新しい関数で呼び出しを\n"
"ラップします。\n"
"\n"
"これは、私達のStackモジュールのよりよい実装です:\n"
"\n"
"  defmodule Stack do\n"
"    use GenServer\n"
"\n"
"    # Client\n"
"\n"
"    def start_link(default) do\n"
"      GenServer.start_link(__MODULE__, default)\n"
"    end\n"
"\n"
"    def push(pid, item) do\n"
"      GenServer.cast(pid, {:push, item})\n"
"    end\n"
"\n"
"    def pop(pid) do\n"
"      GenServer.call(pid, :pop)\n"
"    end\n"
"\n"
"    # Server (callbacks)\n"
"\n"
"    def handle_call(:pop, _from, [h|t]) do\n"
"      {:reply, h, t}\n"
"    end\n"
"\n"
"    def handle_call(request, from, state) do\n"
"      # Call the default implementation from GenServer\n"
"      super(request, from, state)\n"
"    end\n"
"\n"
"    def handle_cast({:push, item}, state) do\n"
"      {:noreply, [item|state]}\n"
"    end\n"
"\n"
"    def handle_cast(request, state) do\n"
"      super(request, state)\n"
"    end\n"
"  end\n"
"\n"
"実際、同じモジュール内でサーバとクライアントの両方の関数を持つことは、\n"
"一般的です。サーバとクライアント実装が複雑になっていくならば、\n"
"それらを別のモジュールにしたくなるかもしれません。\n"
"\n"
"## Receiving custom messages\n"
"\n"
"`GenServer`のゴールは\"receive\"ループを開発者から抽象化し、\n"
"システムメッセージを自動的にハンドリングし、コード変更、\n"
"呼出しを同期などをサポートすることです。\n"
"従って、GenServerが無作法なことをする原因となるので、\n"
"GenServerコールバックの中で、独自に\"receive\"を呼出してはいけません。\n"
"もしカスタムメッセージを受信したい場合、常に`handle_info/2`でそれを\n"
"受信します。\n"
"\n"
"## Learn more\n"
"\n"
"gen serverについてもっと知りたいなら、Elixir getting started guide\n"
"がチュートリアルライクの導入を提供します。Erlangのドキュメントとリンク\n"
"もまた、追加の洞察を提供することができます。\n"
"\n"
"* http://elixir-lang.org/getting-started/mix-otp/genserver.html\n"
"* http://www.erlang.org/doc/man/gen_server.html\n"
"* http://www.erlang.org/doc/design_principles/gen_server_concepts.html\n"
"* http://learnyousomeerlang.com/clients-and-servers\n"
