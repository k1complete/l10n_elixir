msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-12-13 22:00+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: @callback code_change/3
#: lib/gen_server.ex:353
msgid ""
"Invoked to change the state of the `GenServer` when a different version of "
"a\n"
"module is loaded (hot code swapping) and the state's term structure should "
"be\n"
"changed.\n"
"\n"
"`old_vsn` is the previous version of the module (defined by the `@vsn`\n"
"attribute) when upgrading. When downgrading the previous version is wrapped "
"in\n"
"a 2-tuple with first element `:down`. `state` is the current state of the\n"
"`GenServer` and `extra` is any extra data required to change the state.\n"
"\n"
"Returning `{:ok, new_state}` changes the state to `new_state` and the code\n"
"change is successful.\n"
"\n"
"Returning `{:error, reason}` fails the code change with reason `reason` and\n"
"the state remains as the previous state.\n"
"\n"
"If `code_change/3` raises the code change fails and the loop will continue\n"
"with its previous state. Therefore this callback does not usually contain "
"side effects.\n"
msgstr ""
"異ったバージョンのモジュールがロードされた時\n"
"(ホットコードスワッピング)、`GenServer`のステートを\n"
"変更するために起動され、ステートの構造体は変更されるべきです。\n"
"\n"
"`old_vsn`はアップグレードの時、モジュールの\n"
"(`@vsn`アトリビュートにより定義された)前のバージョンです。\n"
"ダウングレードの時、前のバージョンは\n"
"最初が`:down`となる2要素タプルでラップされます。\n"
"`state`は`GenSerer`の現在のステートで、`extra`は\n"
"ステートの変更に必要な任意の特別なデータです。\n"
"\n"
"`{:ok, new_state}`を返すと、ステートは`new_state`に変更され、\n"
"code changeは成功します。\n"
"\n"
"`{:error, reason}`を返すことは、\n"
"reason `reason`でcode changeは失敗し、ステートは以前の\n"
"ステートのままです。\n"
"\n"
"もし`code_change/3`が例外を上げるなら、code changeは失敗し、\n"
"ループは以前のステートで再開します。したがって、このコール\n"
"バックは通常副作用を含みません。\n"

#. TRANSLATORS: @callback init/1
#: lib/gen_server.ex:174
msgid ""
"Invoked when the server is started. `start_link/3` (or `start/3`) will\n"
"block until it returns.\n"
"\n"
"`args` is the argument term (second argument) passed to `start_link/3`.\n"
"\n"
"Returning `{:ok, state}` will cause `start_link/3` to return\n"
"`{:ok, pid}` and the process to enter its loop.\n"
"\n"
"Returning `{:ok, state, timeout}` is similar to `{:ok, state}`\n"
"except `handle_info(:timeout, state)` will be called after `timeout`\n"
"milliseconds if no messages are received within the timeout.\n"
"\n"
"Returning `{:ok, state, :hibernate}` is similar to\n"
"`{:ok, state}` except the process is hibernated before entering the loop. "
"See\n"
"`handle_call/3` for more information on hibernation.\n"
"\n"
"Returning `:ignore` will cause `start_link/3` to return `:ignore` and the\n"
"process will exit normally without entering the loop or calling "
"`terminate/2`.\n"
"If used when part of a supervision tree the parent supervisor will not fail\n"
"to start nor immediately try to restart the `GenServer`. The remainder of "
"the\n"
"supervision tree will be (re)started and so the `GenServer` should not be\n"
"required by other processes. It can be started later with\n"
"`Supervisor.restart_child/2` as the child specification is saved in the "
"parent\n"
"supervisor. The main use cases for this are:\n"
"\n"
"- The `GenServer` is disabled by configuration but might be enabled later.\n"
"- An error occured and it will be handled by a different mechanism than the\n"
"`Supervisor`. Likely this approach involves calling `Supervisor."
"restart_child/2`\n"
"after a delay to attempt a restart.\n"
"\n"
"Returning `{:stop, reason}` will cause `start_link/3` to return\n"
"`{:error, reason}` and the process to exit with reason `reason` without\n"
"entering the loop or calling `terminate/2`.\n"
msgstr ""
"サーバがスタートするときに起動されます。\n"
"`start_link/3`(または`start/3`)は、この関数から戻るまで\n"
"ブロックされます。\n"
"\n"
"`args` は `start_link/3`へ渡される(2番目の)引数です。\n"
"\n"
"`{:ok, state}`を返すと、`start_link/3`が`{:ok, pid}` を返し、\n"
"プロセスはループに入ります。\n"
"\n"
"`{:ok, state, timeout}`は、\n"
"もしタイムアウト内にメッセージが受信されないと、\n"
"`timeout`ミリ秒後に`handle_info(:timeout, state)`が呼ばれる\n"
"ことを除いて、\n"
"`{:ok, state}`と似ています。\n"
"\n"
"`{:ok, state, :hibernate}`は\n"
"`プロセスがループに入るまえに hibernateされる\n"
"ことを除いては、`{:ok, state}`と似ています。\n"
"hibernationについては`handle_call/3`を参照してください。\n"
"\n"
"`:ignore`を返すと、`start_link/3`が`:ignore`を返し、\n"
"プロセスはループに入らず通常のexitをし\n"
"`terminate/2`を呼ぶこともありません。\n"
"もし、supervisionツリーの一部の時、親のスーパバイザは\n"
"スタートもできないし、すぐに`GenServer`のリスタートも試みないでしょう。\n"
"supervisionツリーの残りは(再)スタートされます。そして、\n"
"`GenServer`は最早他のプロセスには必要とされるべきではありません。\n"
"child仕様が親のスーパバイザで保存され、\n"
"後で`Supervisor.restart_child/2`でスタートすることが出来ます。\n"
"主なユースケースはこんな感じです:\n"
"\n"
"- `GenServer` はコンフィグレーションにより無効ですが、\n"
"  あとで有効にされるとき\n"
"- エラーが発生し、`Supervisor`とは異るメカニズムによりハンドル\n"
"  したいとき。このアプローチはリスタートを試みるために後で\n"
"  `Supervisor.restart_child/2`の呼出しを含みます。\n"
"\n"
"`{:stop, reason}`を返すことは、`start_link/3`が`{:error, reason}`を\n"
"返し、`terminate/2`も呼ばす、ループにも入らず、reason `reason`で\n"
"プロセスを`exit`させることになります。\n"

#. TRANSLATORS: def GenServer.multi_call(nodes \\ nodes(), name, request, timeout \\ :infinity)
#: lib/gen_server.ex:643
msgid ""
"Calls all servers locally registered as `name` at the specified `nodes`.\n"
"\n"
"The `request` is first sent to every node and then we wait for the\n"
"replies. This function returns a tuple containing the node and its reply\n"
"as first element and all bad nodes as second element. The bad nodes is a\n"
"list of nodes that either did not exist, or where a server with the given\n"
"`name` did not exist or did not reply.\n"
"\n"
"Nodes is a list of node names to which the request is sent. The default\n"
"value is the list of all known nodes.\n"
"\n"
"To avoid that late answers (after the timeout) pollute the caller's message\n"
"queue, a middleman process is used to do the actual calls. Late answers "
"will\n"
"then be discarded when they arrive to a terminated process.\n"
msgstr ""
"指定された`nodes`で`name`としてローカルに登録された全てのサーバ\n"
"を呼び出します。\n"
"\n"
"`request`は最初にそれぞれのノードへ送られ、それから、応答を待ちます。\n"
"この関数は、最初の要素として応答したノードとその応答を、2番目の\n"
"要素として全ての悪いノードを含む、\n"
"タプルを返します。\n"
"悪いノードは、\n"
"存在しなかかったか、与えられた`name`のサーバが存在しなかったか、応答が\n"
"なかったノードのリストです。\n"
"\n"
"nodesはrequestが送られる、ノード名のリストです。デフォルト値は\n"
"知っている全てのノード(nodes())です。\n"
"\n"
"(タイムアウトの後での)遲い応答が、呼び出し側のメッセージ\n"
"キューを汚染することを避けるために、実際の呼び出しには仲介者プロセスが使われ"
"ます。\n"
"遲い応答が終了したプロセスに届いたとき、それらは捨てられます。\n"

#. TRANSLATORS: @callback handle_cast/2
#: lib/gen_server.ex:277
msgid ""
"Invoked to handle asynchronous `cast/2` messages.\n"
"\n"
"`request` is the request message sent by a `cast/2` and `state` is the "
"current\n"
"state of the `GenServer`.\n"
"\n"
"Returning `{:noreply, new_state}` continues the loop with new state "
"`new_state`.\n"
"\n"
"Returning `{:noreply, new_state, timeout}` is similar to\n"
"`{:noreply, reply, new_state}` except `handle_info(:timeout, new_state)` "
"will\n"
"be called after `timeout` milliseconds if no messages are received.\n"
"\n"
"Returning `{:noreply, new_state, :hibernate}` is similar to\n"
"`{:noreply, new_state}` except the process is hibernated before continuing "
"the\n"
"loop. See `handle_call/3` for more information.\n"
"\n"
"Returning `{:stop, reason, new_state}` stops the loop and `terminate/2` is\n"
"called with the reason `reason` and state `new_state`. The process exits "
"with\n"
"reason `reason`.\n"
msgstr ""
"非同期`cast/2`メッセージをハンドルするために起動されます。\n"
"\n"
"`request` は `cast/2`により送信された要求メッセージで、\n"
"`state`は`GenServer`の現在のステートです。\n"
"\n"
"`{:noreply, new_state}`を返すことは\n"
"新しい`new_state`ステートでループを継続\n"
"します。\n"
"\n"
"`{:noreply, new_state, timeout}`を返すことは、\n"
"`timeout`ミリ秒後にメッセージが届かなかったら、\n"
"`handle_info(:timeout, new_state)`が呼ばれることを除いて、\n"
"`{:noreply, new_state}`と似ています。\n"
"\n"
"`{:noreply, new_state, :hibernate}`を返すことは、\n"
"プロセスがループを継続するまえにhibernateされることを\n"
"除いて、`{:noreply, new_state}`と似ています。\n"
"詳細は`handle_call/3`を参照してください。\n"
"\n"
"`{:stop, reason, new_staet}`を返すことは、ループを停止して、\n"
"reason `reason`とstate `new_state`で`terminate/2`が呼ばれます。\n"
"プロセスはreason `reason`でexitします。\n"

#. TRANSLATORS: @type debug
#: lib/gen_server.ex:391
msgid "Debug options supported by the `start*` functions"
msgstr "`start*`関数によりサポートされるデバッグオプション"

#. TRANSLATORS: @callback terminate/2
#: lib/gen_server.ex:315
msgid ""
"Invoked when the server is about to exit. It should do any cleanup "
"required.\n"
"\n"
"`reason` is exit reason and `state` is the current state of the "
"`GenServer`.\n"
"The return value is ignored.\n"
"\n"
"`terminate/2` is called if a callback (except `init/1`) returns a `:stop`\n"
"tuple, raises, calls `Kernel.exit/1` or returns an invalid value. It may "
"also\n"
"be called if the `GenServer` traps exits using `Process.flag/2` *and* the\n"
"parent process sends an exit signal.\n"
"\n"
"If part of a supervision tree a `GenServer`'s `Supervisor` will send an "
"exit\n"
"signal when shutting it down. The exit signal is based on the shutdown\n"
"strategy in the child's specification. If it is `:brutal_kill` the "
"`GenServer`\n"
"is killed and so `terminate/2` is not called. However if it is a timeout "
"the\n"
"`Supervisor` will send the exit signal `:shutdown` and the `GenServer` will\n"
"have the duration of the timeout to call `terminate/2` - if the process is\n"
"still alive after the timeout it is killed.\n"
"\n"
"If the `GenServer` receives an exit signal (that is not `:normal`) from any\n"
"process when it is not trapping exits it will exit abruptly with the same\n"
"reason and so not call `terminate/2`. Note that a process does *NOT* trap\n"
"exits by default and an exit signal is sent when a linked process exits or "
"its\n"
"node is disconnected.\n"
"\n"
"Therefore it is not guaranteed that `terminate/2` is called when a "
"`GenServer`\n"
"exits. For such reasons, we usually recommend important clean-up rules to\n"
"happen in separated processes either by use of monitoring or by links\n"
"themselves. For example if the `GenServer` controls a `port` (e.g.\n"
"`:gen_tcp.socket`) or `File.io_device`, they will be closed on receiving a\n"
"`GenServer`'s exit signal and do not need to be closed in `terminate/2`.\n"
"\n"
"If `reason` is not `:normal`, `:shutdown` nor `{:shutdown, term}` an error "
"is\n"
"logged.\n"
msgstr ""
"サーバがexitするときに起動されます。必要な任意のクリーンアップ\n"
"を行ってください。\n"
"\n"
"`reason`はexit reasonで`state`は`GenServer`の現在のステートです。\n"
"戻値は無視されます。\n"
"\n"
"`terminate/2`は、(`init/1`を除いた)コールバックが\n"
"以下の場合に呼ばれます: \n"
"`:stop`タプルを返す、例外を上げる、`Kernel.exit/1`を呼出す、\n"
"あるいは、無効な値を返した場合。\n"
"`GenServer`が `Process.flag/2`を使って exit をトラップしていても、\n"
"*そして*\n"
"親プロセスがexitシグナルを送信した場合でも、`terminate/2`が呼ばれます。\n"
"\n"
"supervisionツリーの一部なら、`GenServer`の`Supervisor`は、\n"
"それがシャットダウンするとき、exitシグナルを送信するでしょう。\n"
"exitシグナルはchild仕様のシャットダウンストラテジに基いています。\n"
"もし`:brutal_kill`なら、`GenServer`はkillされ、`terminate/2`は\n"
"呼ばれません。\n"
"しかしながら、もしタイムアウトなら、\n"
"`Supervisor`はexitシグナル`:shutdown`を送信し、\n"
"`GenServer`は`terminate/2`を呼ぶ為のタイムアウト期間を持ちます - \n"
"もし、プロセスがタイムアウト後も生きていれば、killされます。\n"
"\n"
"もし`GenServer`がexitをトラップしていないときに、任意のプロセスから\n"
"(`:normal`でない)exitシグナルを受信したら、\n"
"同じresasonで急にexitするので、`terminate/2`を呼び出さないでしょう。\n"
"デフォルトでは、プロセスがexitをトラップして *いない* ことと、\n"
"exitシグナルはリンクされたプロセスがexitした時あるいは\n"
"そのノードが切断された時に送信されることに注意してください。\n"
"\n"
"したがって、`GenSerer`がexitしたときに、\n"
"`terminate/2`が呼び出されることは保証されません。\n"
"そういう理由で、私達は、\n"
"モニタの利用や、リンクされた別のプロセスに\n"
"行わせるという、重要なクリーンアップルールを推奨します。\n"
"例えば、`GenServer`は`port`(`:gen_tcp.socket`のような)や\n"
"`File.io_device`を制御しているなら、それらは\n"
"`GenServer`のexitシグナルを受信した時にクローズされるでしょう。\n"
"そして、`terminate/2`ではクローズする必要がありません。\n"
"\n"
"`reason`が`:normal`、`:shutdown`、`{:shutdown, term}`の\n"
"どれでもないエラーはログされます。\n"

#. TRANSLATORS: @type server
#: lib/gen_server.ex:394
msgid "The server reference"
msgstr "サーバのリファレンス"

#. TRANSLATORS: def GenServer.start_link(module, args, options \\ [])
#: lib/gen_server.ex:455
msgid ""
"Starts a `GenServer` process linked to the current process.\n"
"\n"
"This is often used to start the `GenServer` as part of a supervision tree.\n"
"\n"
"Once the server is started, it calls the `init/1` function in the given "
"`module`\n"
"passing the given `args` to initialize it. To ensure a synchronized start-"
"up\n"
"procedure, this function does not return until `init/1` has returned.\n"
"\n"
"Note that a `GenServer` started with `start_link/3` is linked to the\n"
"parent process and will exit in case of crashes. The GenServer will also\n"
"exit due to the `:normal` reasons in case it is configured to trap exits\n"
"in the `init/1` callback.\n"
"\n"
"## Options\n"
"\n"
"The `:name` option is used for name registration as described in the module\n"
"documentation. If the option `:timeout` option is present, the server is\n"
"allowed to spend the given milliseconds initializing or it will be\n"
"terminated and the start function will return `{:error, :timeout}`.\n"
"\n"
"If the `:debug` option is present, the corresponding function in the\n"
"[`:sys` module](http://www.erlang.org/doc/man/sys.html) will be invoked.\n"
"\n"
"If the `:spawn_opt` option is present, its value will be passed as options\n"
"to the underlying process as in `Process.spawn/4`.\n"
"\n"
"## Return values\n"
"\n"
"If the server is successfully created and initialized, the function returns\n"
"`{:ok, pid}`, where pid is the pid of the server. If a process with the\n"
"specified server name already exists, the function returns\n"
"`{:error, {:already_started, pid}}` with the pid of that process.\n"
"\n"
"If the `init/1` callback fails with `reason`, the function returns\n"
"`{:error, reason}`. Otherwise, if it returns `{:stop, reason}`\n"
"or `:ignore`, the process is terminated and the function returns\n"
"`{:error, reason}` or `:ignore`, respectively.\n"
msgstr ""
"現在のプロセスにリンクされた`GenServer`プロセスを開始します。\n"
"\n"
"これは、しばしば監督ツリーの一部として、`GenServer`を開始するために\n"
"使われます。\n"
"\n"
"一旦サーバが開始したら、与えられたモジュールの`init/1`関数を与えらえた\n"
"引数を伴って初期化の為に呼び出します。スタートアップ手続の同期を\n"
"確実にするために、この関数は`init/1`が帰って来るまで、制御を戻しません。\n"
"\n"
"`start_link/3`で開始した`GenServer`は親プロセスにリンクされていて、\n"
"親プロセスがクラッシュした場合、終了することに注意してください。\n"
"`init/1`コールバックでexitをトラップするように構成されている場合もまた、\n"
"GenServerは`:normal` reasonで終了します。\n"
"\n"
"## オプション\n"
"\n"
"`:name`オプションはモジュールドキュメントで記載されているように、登録の\n"
"為に使われます。`:timeout`オプションがあると、エージェントは、最大初期\n"
"値として与えられたミリセカンド秒間起動に時間をかけることを許可します。\n"
"あるいは、エージェントの起動は終了させられて、スタート関数は`{:error,\n"
":timeout}`を返します。\n"
"\n"
"`:debug`オプションがあると、[`:sys` モジュー\n"
"ル](http://www.erlang.org/doc/man/sys.html) で対応する関数が起動されま\n"
"す。\n"
"\n"
"`:spawn_opt`があると、その値は`Process.spawn/4`のように根底にある\n"
"プロセスまでオプションとして渡されます。\n"
"\n"
"## 戻値\n"
"\n"
"もしサーバがうまく作成されて、初期化されたら、関数は、pidをサーバのプロ\n"
"セス識別子として`{:ok, pid}`を返します。もし与えられたサーバ名でプロセス\n"
"が既に存在したら、そのプロセスのプロセス識別子をpidとして、関数は\n"
"`{:error, {:already_started, pid}}`を返します。\n"
"\n"
"もし`init/1`コールバックが`reason`で失敗したら、関数は関数は`{:error,\n"
"reason}`を返します。もしくは、`init/1`が`{:stop, reason}`か`:ignore`を\n"
"返したら、プロセスは終了され、関数は`{:error, reason}`か`:ignore`をそれ\n"
"ぞれ返します。\n"

#. TRANSLATORS: def GenServer.call(server, request, timeout \\ 5000)
#: lib/gen_server.ex:537
msgid ""
"Makes a synchronous call to the `server` and waits for its reply.\n"
"\n"
"The client sends the given `request` to the server and waits until a reply\n"
"arrives or a timeout occurs. `handle_call/3` will be called on the server\n"
"to handle the request.\n"
"\n"
"The server can be any of the values described in the `Name Registration`\n"
"section of the module documentation.\n"
"\n"
"## Timeouts\n"
"\n"
"The `timeout` is an integer greater than zero which specifies how many\n"
"milliseconds to wait for a reply, or the atom `:infinity` to wait\n"
"indefinitely. The default value is 5000. If no reply is received within\n"
"the specified time, the function call fails. If the caller catches the\n"
"failure and continues running, and the server is just late with the reply,\n"
"it may arrive at any time later into the caller's message queue. The caller\n"
"must in this case be prepared for this and discard any such garbage "
"messages\n"
"that are two-element tuples with a reference as the first element.\n"
msgstr ""
"`server`を同期的に呼び出し、その応答を待ちます。\n"
"\n"
"クライアントは与えられた`request`をサーバに送信し、\n"
"応答が到着するか、タイムアウトが起きるまで待ちます。\n"
"`handle_call/3`がリクエストをハンドルするためにサーバで呼ばれます。\n"
"\n"
"引数のserverはモジュールドキュメントの`名前登録`セクションで記述された\n"
"任意の値をとることができます。\n"
"\n"
"## タイウアウト\n"
"\n"
"`timeout`は、応答を待つ長さを示すミリ秒で、0より大きな整数か、無限に待\n"
"つことを示すアトムで、`:infinity`のいずれかです。デフォルト値は5000です。\n"
"もし指定された時間内に応答が受信されないなら、関数呼び出しは失敗します。\n"
"もし呼び出し側が失敗を捕捉し、実行を継続し、そして、サーバが送れて応答\n"
"したら、呼び出し側のメッセージキューに送れて到着します。呼び出し側は、\n"
"この場合、これに備えなければならず、最初の要素としてリファレンスである\n"
"2要素のタプルのゴミメッセージを捨てなければなりません。\n"

#. TRANSLATORS: def GenServer.stop(server, reason \\ :normal, timeout \\ :infinity)
#: lib/gen_server.ex:520
msgid ""
"Stops the server with the given `reason`.\n"
"\n"
"The `terminate/2` callback will be invoked before exiting.\n"
"It returns `:ok` if the server terminates with the given\n"
"reason, if it terminates with another reason, the call will\n"
"exit.\n"
"\n"
"This function keeps OTP semantics regarding error reporting.\n"
"If the reason is any other than `:normal`, `:shutdown` or\n"
"`{:shutdown, _}`, an error report will be logged.\n"
msgstr ""
"与えられた`reason`でサーバを停止します。\n"
"\n"
"exitする前に`terminate/2`コールバックが呼び出されます。\n"
"サーバが与えられたreasonで終了したら`:ok`が返ります。\n"
"他のreasonで終了したら、exitを呼出します。\n"
"\n"
"この関数はエラーレポートに関するOTPセマンティクスを遵守します。\n"
"もし`:normal`, `:shutdown`あるいは`{:shutdown, _}`以外の\n"
"reasonならエラーレポートがログされるでしょう。\n"

#. TRANSLATORS: @callback handle_call/3
#: lib/gen_server.ex:215
msgid ""
"Invoked to handle synchronous `call/3` messages. `call/3` will block until "
"a\n"
"reply is received (unless the call times out or nodes are disconnected).\n"
"\n"
"`request` is the request message sent by a `call/3`, `from` is a 2-tuple\n"
"containing the caller's pid and a term that uniquely identifies the call, "
"and\n"
"`state` is the current state of the `GenServer`.\n"
"\n"
"Returning `{:reply, reply, new_state}` sends the response `reply` to the\n"
"caller and continues the loop with new state `new_state`.\n"
"\n"
"Returning `{:reply, reply, new_state, timeout}` is similar to\n"
"`{:reply, reply, new_state}` except `handle_info(:timeout, new_state)` will "
"be\n"
"called after `timeout` milliseconds if no messages are received.\n"
"\n"
"Returning `{:reply, reply, new_state, :hibernate}` is similar to\n"
"`{:reply, reply, new_state}` except the process is hibernated and will\n"
"continue the loop once a message is its message queue. If a message is "
"already\n"
"in the message queue this will be immediately. Hibernating a `GenServer`\n"
"causes garbage collection and leaves a continuous heap that minimises the\n"
"memory used by the process.\n"
"\n"
"Hibernating should not be used aggressively as too much time could be spent\n"
"garbage collecting. Normally it should only be used when a message is not\n"
"expected soon and minimising the memory of the process is shown to be\n"
"beneficial.\n"
"\n"
"Returning `{:noreply, new_state}` does not send a response to the caller "
"and\n"
"continues the loop with new state `new_state`. The response must be sent "
"with\n"
"`reply/2`.\n"
"\n"
"There are three main use cases for not replying using the return value:\n"
"\n"
"- To reply before returning from the callback because the response is known\n"
"before calling a slow function.\n"
"- To reply after returning from the callback because the response is not "
"yet\n"
"available.\n"
"- To reply from another process, such as a task.\n"
"\n"
"When replying from another process the `GenServer` should exit if the other\n"
"process exits without replying as the caller will be blocking awaiting a\n"
"reply.\n"
"\n"
"Returning `{:noreply, new_state, timeout | :hibernate}` is similar to\n"
"`{:noreply, new_state}` except a timeout or hibernation occurs as with a\n"
"`:reply` tuple.\n"
"\n"
"Returning `{:stop, reason, reply, new_state}` stops the loop and "
"`terminate/2`\n"
"is called with reason `reason` and state `new_state`. Then the `reply` is "
"sent\n"
"as the response to call and the process exits with reason `reason`.\n"
"\n"
"Returning `{:stop, reason, new_state}` is similar to\n"
"`{:stop, reason, reply, new_state}` except a reply is not sent.\n"
msgstr ""
"同期`call/3`メッセージをハンドルするために起動されます。\n"
"`call/3`は応答を受信するまでブロックします(呼出しタイムアウトか\n"
"ノードが切断されないかぎり)。\n"
"\n"
"`request`は`call/3`により送信されたリクエストメッセージで、\n"
"`from`は呼出し側のpidと呼出しを識別するユニークなtermを含む\n"
"2要素のタプルで、`state`は`GenServer`の現在のステートです。\n"
"\n"
"`{:reply, reply, new_state}`を返すと、\n"
"`reply`応答を呼出し側へ送信し、新しい`new_state`ステートでループ\n"
"を継続します。\n"
"\n"
"`{:reply, reply, new_state, timeout}`を返すことは、\n"
"`timeout`ミリ秒後にメッセージが届かなかったら、\n"
"`handle_info(:timeout, new_state)`が呼ばれることを\n"
"除いて、`{:reply, reply, new_state}`と似ています。\n"
"\n"
"`{:reply, reply, new_state, :hibernate}`を返すことは、\n"
"プロセスがhibernateされ、メッセージがメッセージキューに\n"
"来たらループを継続することを\n"
"除いて、`{:reply, reply, new_state}`と似ています。\n"
"もしメッセージが既にメッセージキューに到着していたら、\n"
"これは直ちになされます。`GenServer`をhibernateすることは、\n"
"ガーベッジコレクションを引き起し、プロセスによるメモリ\n"
"利用を最小化しヒープを連続化します。\n"
"\n"
"hibernateはガーベッジコレクションが時間を費しすぎることもあるので、\n"
"積極的に使うべきではありません。通常、メッセージをすぐに\n"
"受信しないことがわかっているときだけに使うべきです。そうすることで、\n"
"プロセスのメモリ利用量を最小化する利点がわかるようになります。\n"
"\n"
"`{:noreply, new_state}`は呼出し側へ応答を送信せず、新しい`new_state`\n"
"ステートでループを継続します。応答は`reply/2`で送信されなければなりません。\n"
"\n"
"戻値として:no_replyを使う主な3つのユースケースは以下の通りです:\n"
"\n"
"- 遲いことがわかっている関数を呼び出すので、コールバックから\n"
"  戻る前に応答を返す\n"
"- responseがまだ有効でないため、コールバックから戻った後に応答を返す\n"
"- タスクのような他のプロセスから応答を返す\n"
"\n"
"他のプロセスから応答を返すとき、もし他のプロセスが\n"
"応答せずにexitするなら、呼出し側は応答を待ってブロッキングしつづけ\n"
"るので、`GenServer`はexitするべきです。\n"
"\n"
"`{:noreply, new_state, timeout | :hibernate}` は、\n"
"`:reply`タプルでのタイムアウトかhibernateが起ることを\n"
"除いて、`{:noreply, new_state}` に似ています。\n"
"\n"
"`{:stop, reason, reply, new_state}`を返すことはループを停止して\n"
"reason `reason`、ステート`new_state`で`terminate/2`が呼び出されます。\n"
"それから、呼出し側`reply`は応答として送信され、プロセスは\n"
"reason `reason`でexitします。\n"
"\n"
"`{:stop, reason, new_state}` を返すことはreplyを送信\n"
"しないことを除いて、\n"
"`{:stop, reason, reply, new_state}`を返すことに似ています。\n"

#. TRANSLATORS: def GenServer.reply(client, reply)
#: lib/gen_server.ex:665
msgid ""
"Replies to a client.\n"
"\n"
"This function can be used by a server to explicitly send a reply to a\n"
"client that called `call/3` or `multi_call/4`. When the reply cannot be\n"
"defined in the return value of `handle_call/3`.\n"
"\n"
"The `client` must be the `from` argument (the second argument) received\n"
"in `handle_call/3` callbacks. Reply is an arbitrary term which will be\n"
"given back to the client as the return value of the call.\n"
"\n"
"This function always returns `:ok`.\n"
msgstr ""
"clientへ応答します。\n"
"\n"
"この関数は、`call/3`または`multi_call/4`を呼び出したクライアントに、\n"
"明示的に応答を送信するために、サーバによって使われることがあります。\n"
"応答が`handle_call/3`の戻値で定義されることが出来無い時。\n"
"\n"
"`client`は、`handle_call/3`コールバックで受信した、(2番目の引数の)\n"
"`from`引数でなくてはなりません。\n"
"`reply`は、呼び出しの戻値としてクライアントに返される、任意のtermです。\n"
"\n"
"この関数は常に`:ok`を返します。\n"

#. TRANSLATORS: @type name
#: lib/gen_server.ex:379
msgid "The GenServer name"
msgstr "GenServerの名前"

#. TRANSLATORS: @type on_start
#: lib/gen_server.ex:376
msgid "Return values of `start*` functions"
msgstr "`start*`関数の戻値"

#. TRANSLATORS: @type from
#: lib/gen_server.ex:397
msgid ""
"Tuple describing the client of a call request.\n"
"\n"
"`pid` is the pid of the caller and `tag` is a unique term used to identify "
"the\n"
"call.\n"
msgstr ""
"呼出しリクエストのクライアントを記述するタプルです。\n"
"\n"
"`pid`は呼出し側のpidで、`tag`は呼出しのIDとして使われる\n"
"ユニークなtermです。\n"

#. TRANSLATORS: def GenServer.start(module, args, options \\ [])
#: lib/gen_server.ex:499
msgid ""
"Starts a `GenServer` process without links (outside of a supervision tree).\n"
"\n"
"See `start_link/3` for more information.\n"
msgstr ""
"リンクなし(監督ツリーの外側)で`GenServer`プロセスを開始します。\n"
"\n"
"詳細は`start_link/3`を参照してください。\n"

#. TRANSLATORS: Elixir.GenServer Summary
#: lib/gen_server.ex:2
msgid ""
"A behaviour module for implementing the server of a client-server relation.\n"
"\n"
"A GenServer is a process like any other Elixir process and it can be used\n"
"to keep state, execute code asynchronously and so on. The advantage of "
"using\n"
"a generic server process (GenServer) implemented using this module is that "
"it\n"
"will have a standard set of interface functions and include functionality "
"for\n"
"tracing and error reporting. It will also fit into a supervision tree.\n"
"\n"
"## Example\n"
"\n"
"The GenServer behaviour abstracts the common client-server interaction.\n"
"Developers are only required to implement the callbacks and functionality "
"they are\n"
"interested in.\n"
"\n"
"Let's start with a code example and then explore the available callbacks.\n"
"Imagine we want a GenServer that works like a stack, allowing us to push\n"
"and pop items:\n"
"\n"
"    defmodule Stack do\n"
"      use GenServer\n"
"\n"
"      # Callbacks\n"
"\n"
"      def handle_call(:pop, _from, [h|t]) do\n"
"        {:reply, h, t}\n"
"      end\n"
"\n"
"      def handle_cast({:push, item}, state) do\n"
"        {:noreply, [item|state]}\n"
"      end\n"
"    end\n"
"\n"
"    # Start the server\n"
"    {:ok, pid} = GenServer.start_link(Stack, [:hello])\n"
"\n"
"    # This is the client\n"
"    GenServer.call(pid, :pop)\n"
"    #=> :hello\n"
"\n"
"    GenServer.cast(pid, {:push, :world})\n"
"    #=> :ok\n"
"\n"
"    GenServer.call(pid, :pop)\n"
"    #=> :world\n"
"\n"
"We start our `Stack` by calling `start_link/3`, passing the module\n"
"with the server implementation and its initial argument (a list\n"
"representing the stack containing the item `:hello`). We can primarily\n"
"interact with the server by sending two types of messages. **call**\n"
"messages expect a reply from the server (and are therefore synchronous)\n"
"while **cast** messages do not.\n"
"\n"
"Every time you do a `GenServer.call/3`, the client will send a message\n"
"that must be handled by the `handle_call/3` callback in the GenServer.\n"
"A `cast/2` message must be handled by `handle_cast/2`.\n"
"\n"
"## Callbacks\n"
"\n"
"There are 6 callbacks required to be implemented in a `GenServer`. By\n"
"adding `use GenServer` to your module, Elixir will automatically define\n"
"all 6 callbacks for you, leaving it up to you to implement the ones\n"
"you want to customize.\n"
"\n"
"## Name Registration\n"
"\n"
"Both `start_link/3` and `start/3` support the `GenServer` to register\n"
"a name on start via the `:name` option. Registered names are also\n"
"automatically cleaned up on termination. The supported values are:\n"
"\n"
"  * an atom - the GenServer is registered locally with the given name\n"
"    using `Process.register/2`.\n"
"\n"
"  * `{:global, term}`- the GenServer is registered globally with the given\n"
"    term using the functions in the `:global` module.\n"
"\n"
"  * `{:via, module, term}` - the GenServer is registered with the given\n"
"    mechanism and name. The `:via` option expects a module that exports\n"
"    `register_name/2`, `unregister_name/1`, `whereis_name/1` and `send/2`.\n"
"    One such example is the `:global` module which uses these functions\n"
"    for keeping the list of names of processes and their  associated pid's\n"
"    that are available globally for a network of Erlang nodes.\n"
"\n"
"For example, we could start and register our Stack server locally as "
"follows:\n"
"\n"
"    # Start the server and register it locally with name MyStack\n"
"    {:ok, _} = GenServer.start_link(Stack, [:hello], name: MyStack)\n"
"\n"
"    # Now messages can be sent directly to MyStack\n"
"    GenServer.call(MyStack, :pop) #=> :hello\n"
"\n"
"Once the server is started, the remaining functions in this module "
"(`call/3`,\n"
"`cast/2`, and friends) will also accept an atom, or any `:global` or `:via`\n"
"tuples. In general, the following formats are supported:\n"
"\n"
"  * a `pid`\n"
"  * an `atom` if the server is locally registered\n"
"  * `{atom, node}` if the server is locally registered at another node\n"
"  * `{:global, term}` if the server is globally registered\n"
"  * `{:via, module, name}` if the server is registered through an "
"alternative\n"
"    registry\n"
"\n"
"## Client / Server APIs\n"
"\n"
"Although in the example above we have used `GenServer.start_link/3` and\n"
"friends to directly start and communicate with the server, most of the\n"
"time we don't call the `GenServer` functions directly. Instead, we wrap\n"
"the calls in new functions representing the public API of the server.\n"
"\n"
"Here is a better implementation of our Stack module:\n"
"\n"
"    defmodule Stack do\n"
"      use GenServer\n"
"\n"
"      # Client\n"
"\n"
"      def start_link(default) do\n"
"        GenServer.start_link(__MODULE__, default)\n"
"      end\n"
"\n"
"      def push(pid, item) do\n"
"        GenServer.cast(pid, {:push, item})\n"
"      end\n"
"\n"
"      def pop(pid) do\n"
"        GenServer.call(pid, :pop)\n"
"      end\n"
"\n"
"      # Server (callbacks)\n"
"\n"
"      def handle_call(:pop, _from, [h|t]) do\n"
"        {:reply, h, t}\n"
"      end\n"
"\n"
"      def handle_call(request, from, state) do\n"
"        # Call the default implementation from GenServer\n"
"        super(request, from, state)\n"
"      end\n"
"\n"
"      def handle_cast({:push, item}, state) do\n"
"        {:noreply, [item|state]}\n"
"      end\n"
"\n"
"      def handle_cast(request, state) do\n"
"        super(request, state)\n"
"      end\n"
"    end\n"
"\n"
"In practice, it is common to have both server and client functions in\n"
"the same module. If the server and/or client implementations are growing\n"
"complex, you may want to have them in different modules.\n"
"\n"
"## Receiving custom messages\n"
"\n"
"The goal of a `GenServer` is to abstract the \"receive\" loop for "
"developers,\n"
"automatically handling system messages, support code change, synchronous\n"
"calls and more. Therefore, you should never call your own \"receive\" "
"inside\n"
"the GenServer callbacks as doing so will cause the GenServer to misbehave.\n"
"If you want to receive custom messages, always receive them in "
"`handle_info/2`.\n"
"\n"
"## Learn more\n"
"\n"
"If you wish to find out more about gen servers, the Elixir Getting Started\n"
"guide provides a tutorial-like introduction. The documentation and links\n"
"in Erlang can also provide extra insight.\n"
"\n"
"  * [GenServer – Elixir's Getting Started Guide](http://elixir-lang.org/"
"getting-started/mix-otp/genserver.html)\n"
"  * [`:gen_server` module documentation](http://www.erlang.org/doc/man/"
"gen_server.html)\n"
"  * [gen_server Behaviour – OTP Design Principles](http://www.erlang.org/doc/"
"design_principles/gen_server_concepts.html)\n"
"  * [Clients and Servers – Learn You Some Erlang for Great Good!](http://"
"learnyousomeerlang.com/clients-and-servers)\n"
msgstr ""
"クライアント-サーバ関係のサーバを実装するためのビヘイビアモジュールです。\n"
"\n"
"GenServerは、\n"
"他の任意のElixirプロセスを使い、ステートを保持し、非同期にコードを実行、\n"
"その他を行う、プロセスです。\n"
"このモジュールによる一般的なサーバプロセス(GenServer)実装の長所は、\n"
"それがインタフェース関数の標準的なセットを持っていて、\n"
"トレースとエラーレポートの為の機能を含んでいることです。\n"
"それは、スーパビジョンツリーにも適合します。\n"
"\n"
"## 例\n"
"\n"
"GenServerビヘイビアは一般のクライアント-サーバインタラクションを抽象化しま"
"す。\n"
"開発者は彼らが興味がある機能とコールバックの実装が要求されるだけです。\n"
"\n"
"コード例から始めましょう。それから有効なコールバックを\n"
"調査しましょう。\n"
"私達はGenServerが、アイテムをプッシュしたりポップしたりする、\n"
"スタックのように、動いて欲しいとします:\n"
"\n"
"    defmodule Stack do\n"
"      use GenServer\n"
"    \n"
"      # Callbacks\n"
"    \n"
"      def handle_call(:pop, _from, [h|t]) do\n"
"        {:reply, h, t}\n"
"      end\n"
"    \n"
"      def handle_cast({:push, item}, state) do\n"
"        {:noreply, [item|state]}\n"
"      end\n"
"    end\n"
"    \n"
"    # Start the server\n"
"    {:ok, pid} = GenServer.start_link(Stack, [:hello])\n"
"    \n"
"    # This is the client\n"
"    GenServer.call(pid, :pop)\n"
"    #=> :hello\n"
"    \n"
"    GenServer.cast(pid, {:push, :world})\n"
"    #=> :ok\n"
"    \n"
"    GenServer.call(pid, :pop)\n"
"    #=> :world\n"
"\n"
"サーバ実装モジュールと、初期値(アイテム`:hello`を含むスタックを\n"
"表現したリスト)を渡し、`start_link/3`を呼び出すことで私達の`Stack`は\n"
"開始します。\n"
"私達は、主に二種類のメッセージを送信することで、\n"
"サーバと対話することができます。\n"
"**call**メッセージはサーバからの応答を期待します(従って同期しています)が、\n"
"**calst**メッセージはそうではありません。\n"
"\n"
"`GenServer.call/3`を呼ぶたびに、クライアントは、GenServerの\n"
"`handle_call/3`コールバックによりハンドルされなければならない、メッセー\n"
"ジを送信します。`cast/2`メッセージは`handle_cast/2`によりハンドルされな\n"
"ければなりません。\n"
"\n"
"## Callbacks\n"
"\n"
"`GenServer`で実装することが要求されている6個のコールバックがあります。\n"
"`use GenServer`をあなたのモジュールに追加することにより、Elixir自動的に\n"
"6個のコールバックを定義し、カスタマイズしたいものの実装をあなたに任せます。\n"
"\n"
"## Name Registration\n"
"\n"
"`start_link/3`と`start/3`の両方は、`GenServer`で\n"
"`:name`オプションにより開始する時に名前を登録することをサポートします。\n"
"登録された名前は、終了時に自動的にクリーンアップされます。サポート\n"
"された値は以下の通りです:\n"
"\n"
"  * an atom - GenServerは`Process.register/2`を使い、与えられた名前を\n"
"    ローカルに登録されます。\n"
"\n"
"  * `{:global, term}`- GenServerは`:global`オジュールの関数を使い、\n"
"    与えられたtermをグローバルに登録されます。\n"
"\n"
"  * `{:via, module, term}` - GenServerは与えられたメカニズムと名前で\n"
"    登録されます。`:via`オプションは、登録メカニズムを制御する\n"
"    モジュール名moduleと、任意の語をとることができるnameを期待します。\n"
"\n"
"例えば、私達のStackサーバを以下のようにローカルとして登録して\n"
"開始できます:\n"
"\n"
"    # Start the server and register it locally with name MyStack\n"
"    {:ok, _} = GenServer.start_link(Stack, [:hello], name: MyStack)\n"
"    \n"
"    # Now messages can be sent directly to MyStack\n"
"    GenServer.call(MyStack, :pop) #=> :hello\n"
"\n"
"一旦サーバが開始したら、このモジュールの残りの関数\n"
"(`call/3`、`cast/2`とその他)も、アトムまたは、任意の`:global`、`:via`タプル\n"
"を受け付けます。一般的に、以下のフォーマットがサポートされています:\n"
"\n"
"  * `pid`\n"
"  * `atom` サーバがローカルに登録されている場合\n"
"  * `{atom, node}` ローカルに登録されているサーバが他のノードにある場合\n"
"  * `{:global, term}` サーバがグローバルに登録されている場合\n"
"  * `{:via, module, name}` サーバが代わりの登録方法を通して登録された場合\n"
"\n"
"## Client / Server APIs\n"
"\n"
"上の例を通じて、サーバを直接開始したり通信するために、\n"
"`GenServer.start_link/3`とそのフレンドを、使いましたが、\n"
"殆ど、私達は`GenServer`関数を直接には呼び出しません。\n"
"代わりに、サーバの公式なAPIを表現する新しい関数で呼び出しを\n"
"ラップします。\n"
"\n"
"これは、私達のStackモジュールのよりよい実装です:\n"
"\n"
"    defmodule Stack do\n"
"      use GenServer\n"
"    \n"
"      # Client\n"
"    \n"
"      def start_link(default) do\n"
"        GenServer.start_link(__MODULE__, default)\n"
"      end\n"
"    \n"
"      def push(pid, item) do\n"
"        GenServer.cast(pid, {:push, item})\n"
"      end\n"
"    \n"
"      def pop(pid) do\n"
"        GenServer.call(pid, :pop)\n"
"      end\n"
"    \n"
"      # Server (callbacks)\n"
"\n"
"      def handle_call(:pop, _from, [h|t]) do\n"
"        {:reply, h, t}\n"
"      end\n"
"    \n"
"      def handle_call(request, from, state) do\n"
"        # Call the default implementation from GenServer\n"
"        super(request, from, state)\n"
"      end\n"
"    \n"
"      def handle_cast({:push, item}, state) do\n"
"        {:noreply, [item|state]}\n"
"      end\n"
"    \n"
"      def handle_cast(request, state) do\n"
"        super(request, state)\n"
"      end\n"
"    end\n"
"\n"
"実際、同じモジュール内でサーバとクライアントの両方の関数を持つことは、\n"
"一般的です。サーバとクライアント実装が複雑になっていくならば、\n"
"それらを別のモジュールにしたくなるかもしれません。\n"
"\n"
"## Receiving custom messages\n"
"\n"
"`GenServer`のゴールは\"receive\"ループを開発者から抽象化し、\n"
"システムメッセージを自動的にハンドリングし、コード変更、\n"
"呼出しを同期などをサポートすることです。\n"
"従って、GenServerが無作法なことをする原因となるので、\n"
"GenServerコールバックの中で、独自に\"receive\"を呼出してはいけません。\n"
"もしカスタムメッセージを受信したい場合、常に`handle_info/2`でそれを\n"
"受信します。\n"
"\n"
"## Learn more\n"
"\n"
"gen serverについてもっと知りたいなら、Elixir getting started guide\n"
"がチュートリアルライクの導入を提供します。Erlangのドキュメントとリンク\n"
"もまた、追加の洞察を提供することができます。\n"
"\n"
"  * [GenServer – Elixir's Getting Started Guide](http://elixir-lang.org/"
"getting-started/mix-otp/genserver.html)\n"
"  * [`:gen_server` module documentation](http://www.erlang.org/doc/man/"
"gen_server.html)\n"
"  * [gen_server Behaviour – OTP Design Principles](http://www.erlang.org/doc/"
"design_principles/gen_server_concepts.html)\n"
"  * [Clients and Servers – Learn You Some Erlang for Great Good!](http://"
"learnyousomeerlang.com/clients-and-servers)\n"

#. TRANSLATORS: def GenServer.cast(server, request)
#: lib/gen_server.ex:570
msgid ""
"Sends an asynchronous request to the `server`.\n"
"\n"
"This function returns `:ok` without waiting for the\n"
"destination `server` to handle the message. Therefore it\n"
"is unknown whether the destination `server` successfully\n"
"handled the message. If the `server` is an atom without\n"
"an associated process an `ArgumentError` is raised. In\n"
"all other cases the function returns `:ok` regardless of\n"
"whether the destination `server` (or node) exists. Note\n"
"that `{name, node()}` can be used when an exception is\n"
"not desired if no process is locally associated with the\n"
"atom `name`.\n"
"\n"
"`handle_cast/2` will be called on the server to handle\n"
"the request. In case the `server` is on a node which is\n"
"not yet connected to the caller one, the call is going to\n"
"block until a connection happens. This is different than\n"
"the behaviour in OTP's `:gen_server` where the message\n"
"is sent by another process in this case, which could cause\n"
"messages to other nodes to arrive out of order.\n"
msgstr ""
"`server`へ非同期要求を送信します。\n"
"\n"
"この関数は、送信先の`server`がメッセージを処理するのを\n"
"待つことなく`:ok`を返します。従って、送信先の`server`が\n"
"メッセージを処理に成功したかどうかは分りません。もし、\n"
"`server`が関連付けられたプロセスがないアトムなら、\n"
"`ArgumentError`が上がります。\n"
"送信先の`server`(またはノード)が存在するか否かを問わず、\n"
"他の全てのケースでは、関数は`:ok`を返します。\n"
"アトム`name`が関連しているローカルプロセスがなくて、\n"
"例外の発生を望まない場合、`{name, node()}`を使うことが\n"
"できることに注意してください。\n"
"\n"
"`handle_cast/2`は要求を処理するためにサーバで呼ばれます。\n"
"`server`が呼び出し側にまだ接続していないノードである場\n"
"合に備えて、接続が起こるまでは呼出しはブロックします。\n"
"これは、OTPの`:gen_server`ビヘイビアとは異なります(OTP\n"
"の`:gen_server`ビヘイビアでは、この場合、メッセージはも\n"
"う一つのプロセスまで送られ、その結果、他のノードへのメッ\n"
"セージの順序が乱れて到着するかもしれません)。\n"

#. TRANSLATORS: @type option
#: lib/gen_server.ex:385
msgid "Option values used by the `start*` functions"
msgstr "`start*`関数により使用されるオプション"

#. TRANSLATORS: def GenServer.abcast(nodes \\ nodes(), name, request)
#: lib/gen_server.ex:619
msgid ""
"Casts all servers locally registered as `name` at the specified nodes.\n"
"\n"
"The function returns immediately and ignores nodes that do not exist, or "
"where the\n"
"server name does not exist.\n"
"\n"
"See `multi_call/4` for more information.\n"
msgstr ""
"指定されたノードに`name`としてローカルに登録された、全てのサーバに\n"
"キャストします。\n"
"\n"
"関数は直ちに戻り、存在しないノード、存在しない\n"
"サーバ名が存在しないノードを無視します。\n"
"\n"
"詳細は、 `multi_call/4` を参照してください。\n"

#. TRANSLATORS: def GenServer.whereis(pid)
#: lib/gen_server.ex:690
msgid ""
"Returns the `pid` or `{name, node}` of a GenServer process.\n"
"Returns `nil` if no process is associated with the given name.\n"
"\n"
"For example, to lookup a server process, monitor it and send a cast:\n"
"\n"
"    process = GenServer.whereis(server)\n"
"    monitor = Process.monitor(process)\n"
"    GenServer.cast(process, :hello)\n"
"\n"
msgstr ""
"GenServerプロセスの`pid`か`{name, node}`を返します。\n"
"与えられた名前に関連するプロセスがない場合`nil`を返します。\n"
"\n"
"以下の例は、サーバプロセスをlookupして、モニタして、\n"
"castを送信しています:\n"
"\n"
"    process = GenServer.whereis(server)\n"
"    monitor = Process.monitor(process)\n"
"    GenServer.cast(process, :hello)\n"
"\n"

#. TRANSLATORS: @callback handle_info/2
#: lib/gen_server.ex:302
msgid ""
"Invoked to handle all other messages.\n"
"\n"
"`msg` is the message and `state` is the current state of the `GenServer`. "
"When\n"
"a timeout occurs the message is `:timeout`.\n"
"\n"
"Return values are the same as `handle_cast/2`.\n"
msgstr ""
"他の全てのメッセージをハンドルするために起動されます。\n"
"\n"
"`msg`はメッセージで、`state`は`GenServer`の現在のステートです。\n"
"タイムアウトが起きたとき、メッセージは`:timeout`です。\n"
"\n"
"戻値は、`handle_cast/2`と同じです。\n"
