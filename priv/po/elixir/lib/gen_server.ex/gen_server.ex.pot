#. TRANSLATORS: @type debug
#: lib/gen_server.ex:0 
msgid ""
"debug options supported by the `start*` functions"
msgstr ""
#. TRANSLATORS: @type name
#: lib/gen_server.ex:0 
msgid ""
"The GenServer name"
msgstr ""
#. TRANSLATORS: @type server
#: lib/gen_server.ex:0 
msgid ""
"The server reference"
msgstr ""
#. TRANSLATORS: @type on_start
#: lib/gen_server.ex:0 
msgid ""
"Return values of `start*` functions"
msgstr ""
#. TRANSLATORS: def GenServer.reply(client, reply)
#: lib/gen_server.ex:471 
msgid ""
"Replies to a client.\n"
"\n"
"This function can be used by a server to explicitly send a reply to a\n"
"client that called `call/3` or `multi_call/4`. When the reply cannot be\n"
"defined in the return value of `handle_call/3`.\n"
"\n"
"The `client` must be the `from` argument (the second argument) received\n"
"in `handle_call/3` callbacks. Reply is an arbitrary term which will be\n"
"given back to the client as the return value of the call.\n"
"\n"
"This function always returns `:ok`.\n"
msgstr ""
#. TRANSLATORS: def GenServer.call(server, request, timeout \\ 5000)
#: lib/gen_server.ex:351 
msgid ""
"Makes a synchronous call to the `server` and waits for its reply.\n"
"\n"
"The client sends the given `request` to the server and waits until a reply\n"
"arrives or a timeout occurs. `handle_call/3` will be called on the server\n"
"to handle the request.\n"
"\n"
"The server can be any of the values described in the `Name Registration`\n"
"section of the module documentation.\n"
"\n"
"## Timeouts\n"
"\n"
"The `timeout` is an integer greater than zero which specifies how many\n"
"milliseconds to wait for a reply, or the atom `:infinity` to wait\n"
"indefinitely. The default value is 5000. If no reply is received within\n"
"the specified time, the function call fails. If the caller catches the\n"
"failure and continues running, and the server is just late with the reply,\n"
"it may arrive at any time later into the caller's message queue. The caller\n"
"must in this case be prepared for this and discard any such garbage messages\n"
"that are two element tuples with a reference as the first element.\n"
msgstr ""
#. TRANSLATORS: def GenServer.start(module, args, options \\ [])
#: lib/gen_server.ex:314 
msgid ""
"Starts a `GenServer` process without links (outside of a supervision tree).\n"
"\n"
"See `start_link/3` for more information.\n"
msgstr ""
#. TRANSLATORS: def GenServer.start_link(module, args, options \\ [])
#: lib/gen_server.ex:304 
msgid ""
"Starts a `GenServer` process linked to the current process.\n"
"\n"
"This is often used to start the `GenServer` as part of a supervision tree.\n"
"\n"
"Once the server is started, it calls the `init/1` function in the given `module`\n"
"passing the given `args` to initialize it. To ensure a synchronized start-up\n"
"procedure, this function does not return until `init/1` has returned.\n"
"\n"
"Note that a `GenServer` started with `start_link/3` is linked to the\n"
"parent process and will exit in case of crashes. The GenServer will also\n"
"exit due to the `:normal` reasons in case it is configured to trap exits\n"
"in the `init/1` callback.\n"
"\n"
"## Options\n"
"\n"
"The `:name` option is used for name registration as described in the module\n"
"documentation. If the option `:timeout` option is present, the server is\n"
"allowed to spend the given milliseconds initializing or it will be\n"
"terminated and the start function will return `{:error, :timeout}`.\n"
"\n"
"If the `:debug` option is present, the corresponding function in the\n"
"[`:sys` module](http://www.erlang.org/doc/man/sys.html) will be invoked.\n"
"\n"
"If the `:spawn_opt` option is present, its value will be passed as options\n"
"to the underlying process as in `Process.spawn/4`.\n"
"\n"
"## Return values\n"
"\n"
"If the server is successfully created and initialized, the function returns\n"
"`{:ok, pid}`, where pid is the pid of the server. If there already exists a\n"
"process with the specified server name, the function returns\n"
"`{:error, {:already_started, pid}}` with the pid of that process.\n"
"\n"
"If the `init/1` callback fails with `reason`, the function returns\n"
"`{:error, reason}`. Otherwise, if it returns `{:stop, reason}`\n"
"or `:ignore`, the process is terminated and the function returns\n"
"`{:error, reason}` or `:ignore`, respectively.\n"
msgstr ""
#. TRANSLATORS: def GenServer.abcast(nodes \\ nodes(), name, request)
#: lib/gen_server.ex:420 
msgid ""
"Casts all servers locally registered as `name` at the specified nodes.\n"
"\n"
"The function returns immediately and ignores nodes that do not exist, or where the\n"
"server name does not exist.\n"
"\n"
"See `multi_call/4` for more information.\n"
msgstr ""
#. TRANSLATORS: def GenServer.multi_call(nodes \\ nodes(), name, request, timeout \\ :infinity)
#: lib/gen_server.ex:453 
msgid ""
"Calls all servers locally registered as `name` at the specified `nodes`.\n"
"\n"
"The `request` is first sent to every node and then we wait for the\n"
"replies. This function returns a tuple containing the node and its reply\n"
"as first element and all bad nodes as second element. The bad nodes is a\n"
"list of nodes that either did not exist, or where a server with the given\n"
"`name` did not exist or did not reply.\n"
"\n"
"Nodes is a list of node names to which the request is sent. The default\n"
"value is the list of all known nodes.\n"
"\n"
"To avoid that late answers (after the timeout) pollute the caller's message\n"
"queue, a middleman process is used to do the actual calls. Late answers will\n"
"then be discarded when they arrive to a terminated process.\n"
msgstr ""
#. TRANSLATORS: def GenServer.cast(server, request)
#: lib/gen_server.ex:385 
msgid ""
"Sends an asynchronous request to the `server`.\n"
"\n"
"This function returns `:ok` without waiting for the\n"
"destination `server` to handle the message. Therefore it\n"
"is unknown whether the destination `server` successfully\n"
"handled the message. If the `server` is an atom without\n"
"an associated process an `ArgumentError` is raised. In\n"
"all other cases the function returns `:ok` regardless of\n"
"whether the destination `server` (or node) exists. Note\n"
"that `{name, node()}` can be used when an exception is\n"
"not desired if no process is locally associated with the\n"
"atom `name`.\n"
"\n"
"`handle_cast/2` will be called on the server to handle\n"
"the request. In case the `server` is on a node which is\n"
"not yet connected to the caller one, the call is going to\n"
"block until a connection happens. This is different than\n"
"the behaviour in OTP's `:gen_server` where the message\n"
"is sent by another process in this case, which could cause\n"
"messages to other nodes to arrive out of order.\n"
msgstr ""
#. TRANSLATORS: Elixir.GenServer Summary
#: lib/gen_server.ex:1 
msgid ""
"A behaviour module for implementing the server of a client-server relation.\n"
"\n"
"A GenServer is a process as any other Elixir process and it can be used\n"
"to keep state, execute code asynchronously and so on. The advantage of using\n"
"a generic server process (GenServer) implemented using this module is that it\n"
"will have a standard set of interface functions and include functionality for\n"
"tracing and error reporting. It will also fit into a supervision tree.\n"
"\n"
"## Example\n"
"\n"
"The GenServer behaviour abstracts the common client-server interaction.\n"
"Developers are only required to implement the callbacks and functionality they are\n"
"interested in.\n"
"\n"
"Let's start with a code example and then explore the available callbacks.\n"
"Imagine we want a GenServer that works like a stack, allowing us to push\n"
"and pop items:\n"
"\n"
"    defmodule Stack do\n"
"      use GenServer\n"
"\n"
"      # Callbacks\n"
"\n"
"      def handle_call(:pop, _from, [h|t]) do\n"
"        {:reply, h, t}\n"
"      end\n"
"\n"
"      def handle_cast({:push, item}, state) do\n"
"        {:noreply, [item|state]}\n"
"      end\n"
"    end\n"
"\n"
"    # Start the server\n"
"    {:ok, pid} = GenServer.start_link(Stack, [:hello])\n"
"\n"
"    # This is the client\n"
"    GenServer.call(pid, :pop)\n"
"    #=> :hello\n"
"\n"
"    GenServer.cast(pid, {:push, :world})\n"
"    #=> :ok\n"
"\n"
"    GenServer.call(pid, :pop)\n"
"    #=> :world\n"
"\n"
"We start our `Stack` by calling `start_link/3`, passing the module\n"
"with the server implementation and its initial argument (a list\n"
"representing the stack containing the item `:hello`). We can primarily\n"
"interact with the server by sending two types of messages. **call**\n"
"messages expect a reply from the server (and are therefore synchronous)\n"
"while **cast** messages do not.\n"
"\n"
"Every time you do a `GenServer.call/3`, the client will send a message\n"
"that must be handled by the `handle_call/3` callback in the GenServer.\n"
"A `cast/2` message must be handled by `handle_cast/2`.\n"
"\n"
"## Callbacks\n"
"\n"
"There are 6 callbacks required to be implemented in a `GenServer`. By\n"
"adding `use GenServer` to your module, Elixir will automatically define\n"
"all 6 callbacks for you, leaving it up to you to implement the ones\n"
"you want to customize. The callbacks are:\n"
"\n"
"  * `init(args)` - invoked when the server is started.\n"
"\n"
"    It must return:\n"
"\n"
"    -  `{:ok, state}`\n"
"    -  `{:ok, state, timeout}`\n"
"    -  `:ignore`\n"
"    -  `{:stop, reason}`\n"
"\n"
"  * `handle_call(msg, {from, ref}, state)` and `handle_cast(msg, state)` -\n"
"    invoked to handle call (sync) and cast (async) messages.\n"
"\n"
"    It must return:\n"
"\n"
"    -  `{:reply, reply, new_state}`\n"
"    -  `{:reply, reply, new_state, timeout}`\n"
"    -  `{:reply, reply, new_state, :hibernate}`\n"
"    -  `{:noreply, new_state}`\n"
"    -  `{:noreply, new_state, timeout}`\n"
"    -  `{:noreply, new_state, :hibernate}`\n"
"    -  `{:stop, reason, new_state}`\n"
"    -  `{:stop, reason, reply, new_state}`\n"
"\n"
"  * `handle_info(msg, state)` - invoked to handle all other messages which\n"
"    are received by the process.\n"
"\n"
"    It must return:\n"
"\n"
"    -  `{:noreply, state}`\n"
"    -  `{:noreply, state, timeout}`\n"
"    -  `{:stop, reason, state}`\n"
"\n"
"  * `terminate(reason, state)` - called when the server is about to\n"
"    terminate, useful for cleaning up. It must return `:ok`.\n"
"\n"
"  * `code_change(old_vsn, state, extra)` - called when the application\n"
"    code is being upgraded live (hot code swapping).\n"
"\n"
"    It must return:\n"
"\n"
"    -  `{:ok, new_state}`\n"
"    -  `{:error, reason}`\n"
"\n"
"## Name Registration\n"
"\n"
"Both `start_link/3` and `start/3` support the `GenServer` to register\n"
"a name on start via the `:name` option. Registered names are also\n"
"automatically cleaned up on termination. The supported values are:\n"
"\n"
"  * an atom - the GenServer is registered locally with the given name\n"
"    using `Process.register/2`.\n"
"\n"
"  * `{:global, term}`- the GenServer is registered globally with the given\n"
"    term using the functions in the `:global` module.\n"
"\n"
"  * `{:via, module, term}` - the GenServer is registered with the given\n"
"    mechanism and name. The `:via` option expects a module name to control\n"
"    the registration mechanism alongside a name which can be any term.\n"
"\n"
"For example, we could start and register our Stack server locally as follows:\n"
"\n"
"    # Start the server and register it locally with name MyStack\n"
"    {:ok, _} = GenServer.start_link(Stack, [:hello], name: MyStack)\n"
"\n"
"    # Now messages can be sent directly to MyStack\n"
"    GenServer.call(MyStack, :pop) #=> :hello\n"
"\n"
"Once the server is started, the remaining functions in this module (`call/3`,\n"
"`cast/2`, and friends) will also accept an atom, or any `:global` or `:via`\n"
"tuples. In general, the following formats are supported:\n"
"\n"
"  * a `pid`\n"
"  * an `atom` if the server is locally registered\n"
"  * `{atom, node}` if the server is locally registered at another node\n"
"  * `{:global, term}` if the server is globally registered\n"
"  * `{:via, module, name}` if the server is registered through an alternative\n"
"    registry\n"
"\n"
"## Client / Server APIs\n"
"\n"
"Although in the example above we have used `GenServer.start_link/3` and\n"
"friends to directly start and communicate with the server, most of the\n"
"time we don't call the `GenServer` functions directly. Instead, we wrap\n"
"the calls in new functions representing the public API of the server.\n"
"\n"
"Here is a better implementation of our Stack module:\n"
"\n"
"    defmodule Stack do\n"
"      use GenServer\n"
"\n"
"      # Client\n"
"\n"
"      def start_link(default) do\n"
"        GenServer.start_link(__MODULE__, default)\n"
"      end\n"
"\n"
"      def push(pid, item) do\n"
"        GenServer.cast(pid, {:push, item})\n"
"      end\n"
"\n"
"      def pop(pid) do\n"
"        GenServer.call(pid, :pop)\n"
"      end\n"
"\n"
"      # Server (callbacks)\n"
"\n"
"      def handle_call(:pop, _from, [h|t]) do\n"
"        {:reply, h, t}\n"
"      end\n"
"\n"
"      def handle_call(request, from, state) do\n"
"        # Call the default implementation from GenServer\n"
"        super(request, from, state)\n"
"      end\n"
"\n"
"      def handle_cast({:push, item}, state) do\n"
"        {:noreply, [item|state]}\n"
"      end\n"
"\n"
"      def handle_cast(request, state) do\n"
"        super(request, state)\n"
"      end\n"
"    end\n"
"\n"
"In practice, it is common to have both server and client functions in\n"
"the same module. If the server and/or client implementations are growing\n"
"complex, you may want to have them in different modules.\n"
"\n"
"## Learn more\n"
"\n"
"If you wish to find out more about gen servers, Elixir getting started\n"
"guides provide a tutorial-like introduction. The documentation and links\n"
"in Erlang can also provide extra insight.\n"
"\n"
"  * http://elixir-lang.org/getting_started/mix_otp/1.html\n"
"  * http://www.erlang.org/doc/man/gen_server.html\n"
"  * http://www.erlang.org/doc/design_principles/gen_server_concepts.html\n"
"  * http://learnyousomeerlang.com/clients-and-servers\n"
msgstr ""
