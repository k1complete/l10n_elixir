#. TRANSLATORS: def Version.compile_requirement(req)
#: lib/version.ex:281 
msgid ""
"Compiles a requirement to its internal representation with\n"
"`:ets.match_spec_compile/1` for faster matching.\n"
"\n"
"The internal representation is opaque and can not be converted to external\n"
"term format and then back again without losing its properties (meaning it\n"
"can not be sent to a process on another node and still remain a valid\n"
"compiled match_spec, nor can it be stored on disk).\n"
msgstr ""
#. TRANSLATORS: def Version.parse!(string)
#: lib/version.ex:236 
msgid ""
"Parses a version string into a `Version`.\n"
"\n"
"If `string` is an invalid version, an `InvalidVersionError` is raised.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Version.parse!(\"2.0.1-alpha1\")\n"
"    #Version<2.0.1-alpha1>\n"
"\n"
"    iex> Version.parse!(\"2.0-alpha1\")\n"
"    ** (Version.InvalidVersionError) 2.0-alpha1\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Version Summary
#: lib/version.ex:2 
msgid ""
"Functions for parsing and matching versions against requirements.\n"
"\n"
"A version is a string in a specific format or a `Version`\n"
"generated after parsing via `Version.parse/1`.\n"
"\n"
"`Version` parsing and requirements follow\n"
"[SemVer 2.0 schema](http://semver.org/).\n"
"\n"
"## Versions\n"
"\n"
"In a nutshell, a version is represented by three numbers:\n"
"\n"
"    MAJOR.MINOR.PATCH\n"
"\n"
"Pre-releases are supported by appending `-[0-9A-Za-z-\\.]`:\n"
"\n"
"    \"1.0.0-alpha.3\"\n"
"\n"
"Build information can be added by appending `+[0-9A-Za-z-\\.]`:\n"
"\n"
"    \"1.0.0-alpha.3+20130417140000\"\n"
"\n"
"## Struct\n"
"\n"
"The version is represented by the Version struct and fields\n"
"are named according to Semver: `:major`, `:minor`, `:patch`,\n"
"`:pre` and `:build`.\n"
"\n"
"## Requirements\n"
"\n"
"Requirements allow you to specify which versions of a given\n"
"dependency you are willing to work against. It supports common\n"
"operators like `>=`, `<=`, `>`, `==` and friends that\n"
"work as one would expect:\n"
"\n"
"    # Only version 2.0.0\n"
"    \"== 2.0.0\"\n"
"\n"
"    # Anything later than 2.0.0\n"
"    \"> 2.0.0\"\n"
"\n"
"Requirements also support `and` and `or` for complex conditions:\n"
"\n"
"    # 2.0.0 and later until 2.1.0\n"
"    \">= 2.0.0 and < 2.1.0\"\n"
"\n"
"Since the example above is such a common requirement, it can\n"
"be expressed as:\n"
"\n"
"    \"~> 2.0.0\"\n"
"\n"
"`~>` will never include pre-release versions of its upper bound.\n"
"It can also be used to set an upper bound on only the major\n"
"version part. See the table below for `~>` requirements and\n"
"their corresponding translation.\n"
"\n"
"`~>`           | Translation\n"
":------------- | :---------------------\n"
"`~> 2.0.0`     | `>= 2.0.0 and < 2.1.0`\n"
"`~> 2.1.2`     | `>= 2.1.2 and < 2.2.0`\n"
"`~> 2.1.3-dev` | `>= 2.1.3-dev and < 2.2.0`\n"
"`~> 2.0`       | `>= 2.0.0 and < 3.0.0`\n"
"`~> 2.1`       | `>= 2.1.0 and < 3.0.0`\n"
"\n"
"When `allow_pre: false` is set the requirement will not match a\n"
"pre-release version unless the operand is a pre-release version.\n"
"The default is to allow always allow pre-releases but note that in\n"
"Hex `:allow_pre` is set to `false.` See the table below for examples.\n"
"\n"
"Requirement    | Version     | `:allow_pre` | Matches\n"
":------------- | :---------- | :----------- | :------\n"
"`~> 2.0`       | `2.1.0`     | -            | `true`\n"
"`~> 2.0`       | `3.0.0`     | -            | `false`\n"
"`~> 2.0.0`     | `2.0.1`     | -            | `true`\n"
"`~> 2.0.0`     | `2.1.0`     | -            | `false`\n"
"`~> 2.1.2`     | `2.1.3-dev` | `true`       | `true`\n"
"`~> 2.1.2`     | `2.1.3-dev` | `false`      | `false`\n"
"`~> 2.1-dev`   | `2.2.0-dev` | `false`      | `true`\n"
"`~> 2.1.2-dev` | `2.1.3-dev` | `false`      | `true`\n"
"`>= 2.1.0`     | `2.2.0-dev` | `false`      | `false`\n"
"`>= 2.1.0-dev` | `2.2.3-dev` | `true`       | `true`\n"
"\n"
msgstr ""
#. TRANSLATORS: def Version.parse(string)
#: lib/version.ex:211 
msgid ""
"Parses a version string into a `Version`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> {:ok, version} = Version.parse(\"2.0.1-alpha1\")\n"
"    iex> version\n"
"    #Version<2.0.1-alpha1>\n"
"\n"
"    iex> Version.parse(\"2.0-alpha1\")\n"
"    :error\n"
"\n"
msgstr ""
#. TRANSLATORS: def Version.match?(version, requirement, opts \\ [])
#: lib/version.ex:121 
msgid ""
"Checks if the given version matches the specification.\n"
"\n"
"Returns `true` if `version` satisfies `requirement`, `false` otherwise.\n"
"Raises a `Version.InvalidRequirementError` exception if `requirement` is not\n"
"parsable, or `Version.InvalidVersionError` if `version` is not parsable.\n"
"If given an already parsed version and requirement this function won't\n"
"raise.\n"
"\n"
"## Options\n"
"\n"
"  * `:allow_pre` - when `false` pre-release versions will not match\n"
"    unless the operand is a pre-release version, see the table above\n"
"    for examples  (default: `true`);\n"
"\n"
"## Examples\n"
"\n"
"    iex> Version.match?(\"2.0.0\", \">1.0.0\")\n"
"    true\n"
"\n"
"    iex> Version.match?(\"2.0.0\", \"==1.0.0\")\n"
"    false\n"
"\n"
"    iex> Version.match?(\"foo\", \"==1.0.0\")\n"
"    ** (Version.InvalidVersionError) foo\n"
"\n"
"    iex> Version.match?(\"2.0.0\", \"== ==1.0.0\")\n"
"    ** (Version.InvalidRequirementError) == ==1.0.0\n"
"\n"
msgstr ""
#. TRANSLATORS: def Version.parse_requirement(string)
#: lib/version.ex:258 
msgid ""
"Parses a version requirement string into a `Version.Requirement`.\n"
"\n"
"## Examples\n"
"\n"
"    iex> {:ok, req} = Version.parse_requirement(\"== 2.0.1\")\n"
"    iex> req\n"
"    #Version.Requirement<== 2.0.1>\n"
"\n"
"    iex> Version.parse_requirement(\"== == 2.0.1\")\n"
"    :error\n"
"\n"
msgstr ""
#. TRANSLATORS: def Version.compare(version1, version2)
#: lib/version.ex:174 
msgid ""
"Compares two versions. Returns `:gt` if first version is greater than\n"
"the second and `:lt` for vice versa. If the two versions are equal `:eq`\n"
"is returned\n"
"\n"
"Raises a `Version.InvalidVersionError` exception if `version` is not parsable.\n"
"If given an already parsed version this function won't raise.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Version.compare(\"2.0.1-alpha1\", \"2.0.0\")\n"
"    :gt\n"
"\n"
"    iex> Version.compare(\"2.0.1+build0\", \"2.0.1\")\n"
"    :eq\n"
"\n"
"    iex> Version.compare(\"invalid\", \"2.0.1\")\n"
"    ** (Version.InvalidVersionError) invalid\n"
"\n"
msgstr ""
