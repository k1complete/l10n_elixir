#. TRANSLATORS: def Tuple.delete_at(tuple, index)
#: lib/tuple.ex:70 
msgid ""
"Removes an element from a tuple.\n"
"\n"
"Deletes the element at the given `index` from `tuple`.\n"
"Raises an `ArgumentError` if `index` is negative or greater than\n"
"or equal to the length of `tuple`. Index is zero-based.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> tuple = {:foo, :bar, :baz}\n"
"    iex> Tuple.delete_at(tuple, 0)\n"
"    {:bar, :baz}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Tuple.append(tuple, value)
#: lib/tuple.ex:51 
msgid ""
"Inserts an element at the end of a tuple.\n"
"\n"
"Returns a new tuple with the element appended at the end, and contains\n"
"the elements in `tuple` followed by `value` as the last element.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"    iex> tuple = {:foo, :bar}\n"
"    iex> Tuple.append(tuple, :baz)\n"
"    {:foo, :bar, :baz}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Tuple.to_list(tuple)
#: lib/tuple.ex:91 
msgid ""
"Converts a tuple to a list.\n"
"\n"
"Returns a new list with all the tuple elements.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> tuple = {:foo, :bar, :baz}\n"
"    iex> Tuple.to_list(tuple)\n"
"    [:foo, :bar, :baz]\n"
"\n"
msgstr ""
#. TRANSLATORS: def Tuple.insert_at(tuple, index, value)
#: lib/tuple.ex:28 
msgid ""
"Inserts an element into a tuple.\n"
"\n"
"Inserts `value` into `tuple` at the given `index`.\n"
"Raises an `ArgumentError` if `index` is negative or greater than the\n"
"length of `tuple`. Index is zero-based.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> tuple = {:bar, :baz}\n"
"    iex> Tuple.insert_at(tuple, 0, :foo)\n"
"    {:foo, :bar, :baz}\n"
"    iex> Tuple.insert_at(tuple, 2, :bong)\n"
"    {:bar, :baz, :bong}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Tuple.duplicate(data, size)
#: lib/tuple.ex:9 
msgid ""
"Creates a new tuple.\n"
"\n"
"Creates a tuple of `size` containing the\n"
"given `data` at every position.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Tuple.duplicate(:hello, 3)\n"
"    {:hello, :hello, :hello}\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Tuple Summary
#: lib/tuple.ex:2 
msgid ""
"Functions for working with tuples.\n"
"\n"
"See also `Kernel.elem/2`, `Kernel.is_tuple/1`,\n"
"`Kernel.put_elem/3`, and `Kernel.tuple_size/1`.\n"
msgstr ""
