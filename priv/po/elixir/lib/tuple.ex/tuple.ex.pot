#. TRANSLATORS: def Tuple.delete_at(tuple, index)
#: lib/tuple.ex:63 
msgid ""
"Removes an element from a tuple.\n"
"\n"
"Deletes the element at the zero-based `index` from `tuple`.\n"
"Raises an `ArgumentError` if `index` is greater than\n"
"or equal to the length of `tuple`.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> tuple = {:foo, :bar, :baz}\n"
"    iex> Tuple.delete_at(tuple, 0)\n"
"    {:bar, :baz}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Tuple.insert_at(tuple, index, term)
#: lib/tuple.ex:42 
msgid ""
"Inserts an element into a tuple.\n"
"\n"
"Inserts `value` into `tuple` at the given zero-based `index`.\n"
"Raises an `ArgumentError` if `index` is greater than the\n"
"length of `tuple`.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> tuple = {:bar, :baz}\n"
"    iex> Tuple.insert_at(tuple, 0, :foo)\n"
"    {:foo, :bar, :baz}\n"
"\n"
msgstr ""
#. TRANSLATORS: Elixir.Tuple Summary
#: lib/tuple.ex:1 
msgid ""
"Functions for working with tuples.\n"
msgstr ""
#. TRANSLATORS: def Tuple.duplicate(data, size)
#: lib/tuple.ex:21 
msgid ""
"Creates a new tuple.\n"
"\n"
"Creates a tuple of size `size` containing the\n"
"given `data` at every position.\n"
"\n"
"Inlined by the compiler.\n"
"\n"
"## Examples\n"
"\n"
"    iex> Tuple.duplicate(:hello, 3)\n"
"    {:hello, :hello, :hello}\n"
"\n"
msgstr ""
#. TRANSLATORS: def Tuple.to_list(tuple)
#: lib/tuple.ex:73 
msgid ""
"Converts a tuple to a list.\n"
"\n"
"Inlined by the compiler.\n"
msgstr ""
