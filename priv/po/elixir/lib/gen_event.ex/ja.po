msgid ""
msgstr ""
"Project-Id-Version: l 10n_elixir\n"
"PO-Revision-Date: 2015-09-26 18:23+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: @type manager
#: lib/gen_event.ex:289
msgid "The event manager reference"
msgstr "イベントマネージャのリファレンス"

#. TRANSLATORS: @type name
#: lib/gen_event.ex:283
msgid "The GenEvent manager name"
msgstr "GenEvent managerの名前"

#. TRANSLATORS: def GenEvent.stop(manager)
#: lib/gen_event.ex:609
msgid ""
"Terminates the event `manager`.\n"
"\n"
"Before terminating, the event manager will call `terminate(:stop, ...)`\n"
"for each installed event handler.\n"
msgstr ""
"イベント`manager`を終了します。\n"
"\n"
"終了する前に、イベントマネージャは、インストールされたイベントハンドラ\n"
"それぞれの`terminate(:stop, ...)`を呼び出します。\n"

#. TRANSLATORS: def GenEvent.start_link(options \\ [])
#: lib/gen_event.ex:340
msgid ""
"Starts an event manager linked to the current process.\n"
"\n"
"This is often used to start the `GenEvent` as part of a supervision tree.\n"
"\n"
"It accepts the `:name` option which is described under the `Name "
"Registration`\n"
"section in the `GenServer` module docs.\n"
"\n"
"If the event manager is successfully created and initialized, the function\n"
"returns `{:ok, pid}`, where pid is the pid of the server. If a process with\n"
"the specified server name already exists, the function returns\n"
"`{:error, {:already_started, pid}}` with the pid of that process.\n"
"\n"
"Note that a `GenEvent` started with `start_link/1` is linked to the\n"
"parent process and will exit not only on crashes but also if the parent\n"
"process exits with `:normal` reason.\n"
msgstr ""
"イベントマネージャを現在のプロセスにリンクさせて開始します。\n"
"\n"
"これは、しばしば監督ツリーの一部として、`GenEvent`を開始するのに\n"
"使われます。\n"
"\n"
"`:name`オプションを受け付けます。内容は`GenServer`モジュールドキュメン\n"
"トの`Name Registration`セクションに記述されています。\n"
"\n"
"もしイベントマネージャがうまく作成されて、初期化されたら、\n"
"pidをサーバのプロセス識別子として、関数は`{:ok, pid}`を返します。\n"
"もし指定されたサーバの名前で既にプロセスが存在したら、そのプロセスの\n"
"プロセス識別子をpidとして、関数は`{:error, {:already_started, pid}}`\n"
"を返します。\n"
"\n"
"`start_link/1`で開始した`GenEvent`は親プロセスにリンクされていて、\n"
"親プロセスがクラッシュした場合だけでなく、`:normal` reasonで\n"
"終了した場合にも、終了することに注意してください。\n"

#. TRANSLATORS: @type handler
#: lib/gen_event.ex:292
msgid "Supported values for new handlers"
msgstr "新しいハンドラでサポートされる値"

#. TRANSLATORS: def GenEvent.notify(manager, event)
#: lib/gen_event.ex:471
msgid ""
"Sends an event notification to the event `manager`.\n"
"\n"
"The event manager will call `handle_event/2` for each\n"
"installed event handler.\n"
"\n"
"`notify` is asynchronous and will return immediately after the\n"
"notification is sent. `notify` will not fail even if the specified\n"
"event manager does not exist, unless it is specified as an atom.\n"
msgstr ""
"イベント`manager`へイベント通知を送ります。\n"
"\n"
"イベントマネージャはそれぞれインストールされたイベントハンドラのために\n"
"`handle_event/2`を呼び出します。\n"
"\n"
"`notify`は非同期で通知を送信したらす直ちに戻ります。`notify`はもし\n"
"`name`(アトム)として指定されないかぎり、指定されたイベントマネージャが\n"
"存在しないときでも失敗しないでしょう。\n"

#. TRANSLATORS: def GenEvent.sync_notify(manager, event)
#: lib/gen_event.ex:507
msgid ""
"Sends a sync event notification to the event `manager`.\n"
"\n"
"In other words, this function only returns `:ok` after the event manager\n"
"invokes the `handle_event/2` callback on each installed event handler.\n"
"\n"
"See `notify/2` for more info.\n"
msgstr ""
"同期イベント通知をイベント`manager`へ送信します。\n"
"\n"
"言い替えると、この関数は、イベントマネージャで各々のインストールされた\n"
"イベントハンドラ`handle_event/2`が呼び出されたあと、`:ok`を返すだけです。\n"
"\n"
"更なる情報は、`notify/2`を参照してください。\n"

#. TRANSLATORS: def GenEvent.ack_notify(manager, event)
#: lib/gen_event.ex:520
msgid ""
"Sends a ack event notification to the event `manager`.\n"
"\n"
"In other words, this function only returns `:ok` as soon as the\n"
"event manager starts processing this event, but it does not wait\n"
"for event handlers to process the sent event.\n"
"\n"
"See `notify/2` for more info. Note this function is specific\n"
"to Elixir's GenEvent and does not work with Erlang ones.\n"
msgstr ""
"同期イベント通知をイベント`manager`へ送信します。\n"
"\n"
"言い替えると、この関数は、イベントマネージャで各々のインストールされた\n"
"イベントハンドラ`handle_event/2`が呼び出されたあと、`:ok`を返すだけです。\n"
"しかし、イベントハンドラがプロセスへイベントを送信するのを\n"
"待ちません。\n"
"\n"
"更なる情報は、`notify/2`を参照してください。この関数は、Elixirの\n"
"GenEvent特有で、Erlangのものと一緒には動作しません。\n"

#. TRANSLATORS: def GenEvent.start(options \\ [])
#: lib/gen_event.ex:362
msgid ""
"Starts an event manager process without links (outside of a supervision "
"tree).\n"
"\n"
"See `start_link/1` for more information.\n"
msgstr ""
"イベントマネージャプロセスをリンクせずに(監督ツリーの外側で)開始します。\n"
"\n"
"詳細は `start_link/1` を参照してください。\n"

#. TRANSLATORS: def GenEvent.swap_handler(manager, handler1, args1, handler2, args2)
#: lib/gen_event.ex:570
msgid ""
"Replaces an old event handler with a new one in the event `manager`.\n"
"\n"
"First, the old event handler is deleted by calling `terminate/2` with\n"
"the given `args1` and collects the return value. Then the new event handler\n"
"is added and initiated by calling `init({args2, term})`, where `term` is "
"the\n"
"return value of calling `terminate/2` in the old handler. This makes it\n"
"possible to transfer information from one handler to another.\n"
"\n"
"The new handler will be added even if the specified old event handler\n"
"is not installed or if the handler fails to terminate with a given reason\n"
"in which case `state = {:error, term}`.\n"
"\n"
"If `init/1` in the second handler returns a correct value, this\n"
"function returns `:ok`.\n"
msgstr ""
"イベント`manager`において、古いイベントハンドラを、新しいそれに入れ替えま"
"す。\n"
"\n"
"最初に、古いイベントハンドラは、与えられた`args1`で\n"
"`terminate/2`を呼び出して、削除されます。\n"
"そして戻値を収集します。\n"
"それから、新しいイベントハンドラが追加され、\n"
"`init({args2, term})`を呼びだして初期化します。\n"
"ここで`term`は古いハンドラで`terminate/2`の戻値です。\n"
"これは、一方のハンドラからもう一方へ転送することが出来ることを\n"
"意味します。\n"
"\n"
"もし指定された古いイベントハンドラがインストールされていないなら、\n"
"あるいは、もしハンドラが終了に失敗し、`state = {:error, term}`と\n"
"なったら、新しいハンドラが追加されます。\n"
"\n"
"もし二つめのハンドラで`init/1`が正しい値を返せば、この関数は`:ok`を\n"
"返します。\n"

#. TRANSLATORS: def GenEvent.swap_mon_handler(manager, handler1, args1, handler2, args2)
#: lib/gen_event.ex:591
msgid ""
"Replaces an old event handler with a new monitored one in the event "
"`manager`.\n"
"\n"
"Read the docs for `add_mon_handler/3` and `swap_handler/5` for more "
"information.\n"
msgstr ""
"イベント`manager`で、古いイベントマネージャを新しいモニタされた\n"
"イベントハンドラで置き換えます。\n"
"\n"
"詳細は、`add_mon_handler/3`と`swap_handler/5`のドキュメントを参照してく\n"
"ださい。\n"

#. TRANSLATORS: def GenEvent.remove_handler(manager, handler, args)
#: lib/gen_event.ex:558
msgid ""
"Removes an event handler from the event `manager`.\n"
"\n"
"The event manager will call `terminate/2` to terminate the event handler\n"
"and return the callback value. If the specified event handler is not\n"
"installed, the function returns `{:error, :not_found}`.\n"
msgstr ""
"イベントマネージャ`manager`からイベントハンドラを削除します。\n"
"\n"
"イベントマネージャはイベントハンドラを終了し、コールバック値を返すため\n"
"に`terminate/2`を呼び出すでしょう。もし指定されたイベントハンドラがイン\n"
"ストールされていないなら、この関数は`{:error, :not_found}`を返し\n"
"ます。\n"

#. TRANSLATORS: def GenEvent.which_handlers(manager)
#: lib/gen_event.ex:601
msgid "Returns a list of all event handlers installed in the `manager`.\n"
msgstr ""
"`manager`にインストールされている全てのイベントハンドラの\n"
"リストを返します。\n"

#. TRANSLATORS: @callback init/1
#: lib/gen_event.ex:133
msgid ""
"Invoked when the handler is added to the `GenEvent` process. "
"`add_handler/3`,\n"
"(and `add_mon_handler/3`) will block until it returns.\n"
"\n"
"`args` is the argument term (third argument) passed to `add_handler/3`.\n"
"\n"
"Returning `{:ok, state}` will cause `add_handler/3` to return `:ok` and the\n"
"handler to become part of the `GenEvent` loop with state `state`.\n"
"\n"
"Returning `{:ok, state, :hibernate}` is similar to\n"
"`{:ok, state}` except the `GenEvent` process is hibernated before "
"continuing\n"
"its loop. See `handle_event/2` for more information on hibernation.\n"
"\n"
"Returning `{:error, reason}` will cause `add_handler/3` to return\n"
"`{:error, reason}` and the handler is not added to `GenEvent` loop.\n"
msgstr ""
"`GenEvent` プロセスにハンドラが追加された時、実行されます。\n"
"`add_handler/3` (と `add_mon_handler/3` )はこれが戻るまで\n"
"ブロックされます。\n"
"\n"
"`args` は `add_handler/3`へ渡される(3番目の)引数です。\n"
"\n"
"`{:ok, state}`を返すと、`add_handler/3`が`:ok` を返し、\n"
"ハンドラは`state`ステートを伴って`GenEvent`ループの一部に\n"
"なります。\n"
"\n"
"`{:ok, state, :hibernate}`は`{:ok, state}`と\n"
"`GenEvent`プロセスがループを継続するまえに hibernateされる\n"
"ことを除いては、似ています。\n"
"hibernationについては`handle_event/2`を参照してください。\n"
"\n"
"`{:error, reason}`を返すと、`add_handler/3`は`{:error, reason}`を\n"
"返し、ハンドラは`GenEvent`ループに追加されません。\n"

#. TRANSLATORS: @callback handle_call/2
#: lib/gen_event.ex:182
msgid ""
"Invoked to handle synchronous `call/4` messages to a specific handler.\n"
"\n"
"`request` is the request message sent by a `call/4` and `state` is the "
"current\n"
"state of the handler.\n"
"\n"
"Returning `{:ok, reply, new_state}` sends `reply` as a response to the call\n"
"and sets the handler's state to `new_state`.\n"
"\n"
"Returning `{:ok, reply, new_state, :hibernate}` is similar to\n"
"`{:ok, reply, new_state}` except the process is hibernated. See\n"
"`handle_event/2` for more information on hibernation.\n"
"\n"
"Returning `{:remove_handler, reply}` sends `reply` as a reponse to the "
"call,\n"
"removes the handler from the `GenEvent` loop and calls `terminate/2` with\n"
"reason `:remove_handler` and state `state`.\n"
msgstr ""
"同期メッセージ`call/4`をハンドルする特定のハンドラを呼出します。\n"
"\n"
"`request`は`call/4`により送信されたリクエストメッセージで、\n"
"`state`はハンドラの現在のステートです。\n"
"\n"
"`{:ok, reply, new_state}`を返すと、呼出しの応答として`reply`を\n"
"送信し、ハンドラのステートを`new_state`にセットします。\n"
"\n"
"`{:ok, reply, new_state, :hibernate}`は\n"
"`{:ok, reply, new_state}`とプロセスがhibernateされることを\n"
"除いて似ています。\n"
"hibernationについては`handle_event/2`を参照してください。\n"
"\n"
"`{:remove_handler, reply}`を返すと、呼出しの応答として`reply`を\n"
"送信し、`GenEvent`のループからハンドラを削除し、\n"
"`terminate/2`を reason `:remove_handler` と state `state`で\n"
"呼出します。\n"

#. TRANSLATORS: @callback handle_info/2
#: lib/gen_event.ex:205
msgid ""
"Invoked to handle all other messages. All handlers are run in the "
"`GenEvent`\n"
"process so messages intended for other handlers should be ignored with a "
"catch\n"
"all clause.\n"
"\n"
"`msg` is the message and `state` is the current state of the handler.\n"
"\n"
"Return values are the same as `handle_event/2`.\n"
msgstr ""
"他の全てのメッセージをハンドルします。\n"
"全てのハンドラは`GenEvent`プロセス内で動きます。なので、\n"
"他のハンドラを対象とするメッセージは、全て無視しなければ\n"
"なりません。\n"
"\n"
"`msg`は メッセージで`state`は ハンドラの現在のステートです。\n"
"\n"
"`handle_event/2`と同じ値を返します。\n"

#. TRANSLATORS: @callback handle_event/2
#: lib/gen_event.ex:154
msgid ""
"Invoked to handle `notify/2`, `ack_notify/2` or `sync_notify/2` messages.\n"
"\n"
"`event` is the event message and `state` is the current state of the "
"handler.\n"
"\n"
"Returning `{:ok, new_state}` sets the handler's state to `new_state` and "
"the\n"
"`GenEvent` loop continues.\n"
"\n"
"Returning `{:ok, new_state, :hibernate}` is similar to\n"
"`{:ok, new_state}` except the process is hibernated once all handlers have\n"
"handled the events. The `GenEvent` process will continue the loop once a\n"
"message is its message queue. If a message is already in the message queue\n"
"this will be immediately. Hibernating a `GenEvent` causes garbage "
"collection\n"
"and leaves a continuous heap that minimises the memory used by the process.\n"
"\n"
"Hibernating should not be used aggressively as too much time could be spent\n"
"garbage collecting. Normally it should only be used when a message is not\n"
"expected soon and minimising the memory of the process is shown to be\n"
"beneficial.\n"
"\n"
"Returning `:remove_handler` removes the handler from the `GenEvent` loop "
"and\n"
"calls `terminate/2` with reason `:remove_handler` and state `state`.\n"
msgstr ""
"`notify/2`、`ack_notiry/2`または`sync_notiry/2`メッセージを\n"
"ハンドルするために起動されます。\n"
"\n"
"`event`はイベントメッセージで、`state`はハンドラの現在のステートです。\n"
"\n"
"`{:ok, new_state}`を返すと、ハンドラのステートを`new_state`へ\n"
"セットし、`GenEvent`ループを継続します。\n"
"\n"
"`{:ok, new_state, :hibernate}`を返すことは、\n"
"一旦、イベントをハンドルする全てのハンドラを持つ、\n"
"プロセスがhibernateされることを除いては似ています。\n"
"一度メッセージキューにあるなら`GenEvent`プロセスはループを\n"
"続けます。もし既にメッセージがメッセージキューに\n"
"あったら、hibernateから直ちに目覚めます。\n"
"`GenEvent`をhibernateすることは、ガーベッジコレクションを\n"
"引き起し、プロセスによるメモリ使用を最小化し、ヒープを\n"
"連続化します。\n"
"\n"
"ガーベッジコレクションに時間が掛り過ぎる可脳性があるので\n"
"hibernateはアグレッシブに使われてはなりません。\n"
"通常、メッセージがすぐに期待されないときに使われるべきです。\n"
"そうすると、プロセスのメモリを最小にすることの有益さが\n"
"示されます。\n"
"\n"
"`:remove_handler`は`GenEvent`ループからハンドラを削除します。\n"
"そして、`terminate/2`をreason `:remove_handler`とstate `state`で\n"
"呼出します。\n"

#. TRANSLATORS: @callback code_change/3
#: lib/gen_event.ex:260
msgid ""
"Invoked to change the state of the handler when a different version of the\n"
"handler's module module is loaded (hot code swapping) and the state's term\n"
"structure should be changed.\n"
"\n"
"`old_vsn` is the previous version of the module (defined by the `@vsn`\n"
"attribute) when upgrading. When downgrading the previous version is wrapped "
"in\n"
"a 2-tuple with first element `:down`. `state` is the current state of the\n"
"handker and `extra` is any extra data required to change the state.\n"
"\n"
"Returning `{:ok, new_state}` changes the state to `new_state` and the code\n"
"change is successful.\n"
"\n"
"If `code_change/3` raises, the code change fails and the handler will "
"continue\n"
"with its previous state. Therefore this callback does not usually contain "
"side\n"
"effects.\n"
msgstr ""
"異ったバージョンのハンドラモジュールがロードされた時\n"
"(ホットコードスワッピング)、ステートの構造体は変更されるべきで、\n"
"ハンドラのステートを変更するために起動されます。\n"
"\n"
"`old_vsn`はアップグレードの時、モジュールの\n"
"(`@vsn`アトリビュートにより定義された)前のバージョンです。\n"
"ダウングレードの時、前のバージョンは\n"
"最初が`:down`となる2要素タプルでラップされます。\n"
"`state`はハンドラの現在のステートで、`extra`は\n"
"ステートの変更に必要な任意の特別なデータです。\n"
"\n"
"`{:ok, new_state}`を返すと、ステートは`new_state`に変更され、\n"
"code changeは成功します。\n"
"\n"
"もし`code_change/3`が例外を上げるなら、code change失敗し、\n"
"ハンドラは以前のステートで再開します。したがって、このコールバックは\n"
"通常副作用を含みません。\n"

#. TRANSLATORS: def GenEvent.call(manager, handler, request, timeout \\ 5000)
#: lib/gen_event.ex:535
msgid ""
"Makes a synchronous call to the event `handler` installed in `manager`.\n"
"\n"
"The given `request` is sent and the caller waits until a reply arrives or\n"
"a timeout occurs. The event manager will call `handle_call/2` to handle\n"
"the request.\n"
"\n"
"The return value `reply` is defined in the return value of `handle_call/2`.\n"
"If the specified event handler is not installed, the function returns\n"
"`{:error, :not_found}`.\n"
msgstr ""
"`manager`にインストールされた、イベント`handler`を同期的に呼び出します。\n"
"\n"
"与えられた`request`は送信され、呼び出し側は応答が到着するか、タイムアウ\n"
"トが起きるまで待ちます。イベントマネージャは、リクエストをハンドルする\n"
"ために、`handle_call/2`を呼び出します。\n"
"\n"
"戻り値`reply`は`handle_call/2`で定義された戻り値です。もし指定されたイ\n"
"ベントハンドラがインストールされていないなら、関数は`{:error,\n"
":not_found}`を返します。\n"

#. TRANSLATORS: @callback terminate/2
#: lib/gen_event.ex:219
msgid ""
"Invoked when the server is about to exit. It should do any cleanup "
"required.\n"
"\n"
"`reason` is removal reason and `state` is the current state of the handler.\n"
"The return value is returned to `GenEvent.remove_handler/3` or ignored if\n"
"removing for another reason.\n"
"\n"
"`reason` is one of:\n"
"\n"
"-  `:stop` - manager is terminating\n"
"-  `{:stop, term}` - monitored process terminated (for monitored handlers)\n"
"-  `:remove_handler` - handler is being removed\n"
"-  `{:error, term}` - handler crashed or returned a bad value and an error "
"is\n"
"logged\n"
"-  `term` - any term passed to functions like `GenEvent.remove_handler/3`\n"
"\n"
"If part of a supervision tree, a `GenEvent`'s `Supervisor` will send an "
"exit\n"
"signal when shutting it down. The exit signal is based on the shutdown\n"
"strategy in the child's specification. If it is `:brutal_kill` the "
"`GenEvent`\n"
"is killed and so `terminate/2` is not called for its handlers. However if it "
"is\n"
"a timeout the `Supervisor` will send the exit signal `:shutdown` and the\n"
"`GenEvent` will have the duration of the timeout to call `terminate/2` on "
"all\n"
"of its handlers - if the process is still alive after the timeout it is\n"
"killed.\n"
"\n"
"If the `GenEvent` receives an exit signal (that is not `:normal`) from any\n"
"process when it is not trapping exits it will exit abruptly with the same\n"
"reason and so not call the handlers' `terminate/2`. Note that a process "
"does\n"
"*NOT* trap exits by default and an exit signal is sent when a linked "
"process\n"
"exits or its node is disconnected. Therefore it is not guaranteed that\n"
"`terminate/2` is called when a `GenEvent` exits.\n"
"\n"
"Care should be taken to cleanup because the `GenEvent` can continue is loop\n"
"after removing the handler. This is different to most other OTP behaviours.\n"
"For example if the handler controls a `port` (e.g. `:gen_tcp.socket`) or\n"
"`File.io_device`, it will be need to be closed in `terminate/2` as the\n"
"process is not exiting so will not be automatically cleaned up.\n"
msgstr ""
"サーバがexitする時に起動します。任意の必要なクリーンアップ\n"
"を行ってください。\n"
"\n"
"`reason`は除去の理由で、`state`は現在のハンドラのステートです。\n"
"戻値は`GenEvent.remove_handler/3`に返されるか、\n"
"他のreasonでの除去なら無視されます。\n"
"\n"
"`reason` 以下のいずれかです:\n"
"\n"
"-  `:stop` - manager が終了しました\n"
"-  `{:stop, term}` - モニタされたプロセスが終了しました\n"
"                     (モニタされたハンドラにより)\n"
"-  `:remove_handler` - ハンドラが削除されました\n"
"-  `{:error, term}` - ハンドラがクラッシュしたか、不正な値を\n"
"                      返しました。エラーはログされています\n"
"-  `term` - `GenEvent.remove_handler/3`のような関数に渡された\n"
"            任意のtermです。\n"
"\n"
"supervisionツリーの部分なら、`GenEvent`の`Supervisor`はシャットダウン\n"
"の時、exitシグナルを送信します。exitシグナルは\n"
"child仕様のシャットダウンストラテジに基いています。\n"
"もしそれが`:brutal_kill`なら、`GenEvent`はkillされ、\n"
"`terminate/2`はハンドラのためには呼び出されません。\n"
"しかしながら、`Supervisor`がexitシグナル`:shutdown`送信し、\n"
"タイムアウトしたとき、`GenEvent`はタイムアウトの間に\n"
"全てのハンドラに`terminate/2`を呼出します。\n"
"もしプロセスがタイムアウトの後でも生きていたら、killされます。\n"
"\n"
"もしexitをトラップしていない\n"
"`GenEvent`が(`:normal`でない)exitシグナルを任意のプロセス\n"
"から受信したら、同じreasonで突然にexitし、ハンドラの`terminate/2`を\n"
"呼びません。 デフォルトではプロセスは exit をトラップ *しない* \n"
"こと、exitシグナルはリンクされたプロセスがexitしたとき、\n"
"またはノード切断されたときに送信されることに注意してください。\n"
"したがって、`GenEvent`がexitするとき、`terminate/2`が呼ばれることは\n"
"保証されません。\n"
"\n"
"`GenEvent`はハンドラを取り除いたあともループを続けるため、\n"
"クリーンアップには注意しなければなりません。\n"
"これは他のOTPビヘイビアとは最も異ります。\n"
"たとえば、もしハンドラが`port`や`File.io_device`を制御していたら、\n"
"プロセスは終了されず、自動的にクリーンアップされないため、\n"
"それは`teminate/2`でクローズする必要があるでしょう。\n"

#. TRANSLATORS: def GenEvent.stream(manager, options \\ [])
#: lib/gen_event.ex:385
msgid ""
"Returns a stream that consumes events from the `manager`.\n"
"\n"
"The stream is a `GenEvent` struct that implements the `Enumerable`\n"
"protocol. Consumption of events only begins when enumeration starts.\n"
"\n"
"Note streaming is specific to Elixir's GenEvent and does not work\n"
"with Erlang ones.\n"
"\n"
"## Options\n"
"\n"
"  * `:timeout` - raises if no event arrives in X milliseconds\n"
"    (defaults to `:infinity`)\n"
"\n"
msgstr ""
"`manager`からのイベントを消費するストリームを返します。\n"
"\n"
"ストリームは`GenEvent`構造体で`Enumerable`プロトコルの実装です。\n"
"イベントの消費は数え上げの開始をしたときにだけ始まります。\n"
"\n"
"ストリーミングはElixirのGenEvent特有であり、Erlangでは\n"
"動作しないことに注意してください。\n"
"\n"
"## オプション\n"
"\n"
"  * `:timeout` - Xミリ秒の間にイベントが到着しないと\n"
"                 例外を上げます(デフォルトは `:infinity`)\n"
"\n"

#. TRANSLATORS: def GenEvent.add_handler(manager, handler, args)
#: lib/gen_event.ex:407
msgid ""
"Adds a new event handler to the event `manager`.\n"
"\n"
"The event manager will call the `init/1` callback with `args` to\n"
"initiate the event handler and its internal state.\n"
"\n"
"If `init/1` returns a correct value indicating successful completion,\n"
"the event manager adds the event handler and this function returns\n"
"`:ok`. If the callback fails with `reason` or returns `{:error, reason}`,\n"
"the event handler is ignored and this function returns `{:error, reason}`.\n"
"\n"
"If the given handler was previously installed at the manager, this\n"
"function returns `{:error, :already_present}`.\n"
msgstr ""
"イベント`manager`へ新しいイベントハンドラを追加します。\n"
"\n"
"イベントマネージャは、イベントハンドラと内部ステートの初期化を\n"
"するために、`args`で`init/1`コールバックを呼び出します。\"\n"
"\n"
"`init/1`が完全に成功したことを示す正しい値を返したら、イベント\n"
"マネージャはそのイベントハンドラを追加し、この関数は`:ok`を返します。\n"
"もしコールバックが`reason`で失敗したり、`{:error, reason}`を返したら、\n"
"イベントハンドラは無視され、この関数は`{:error, reason}`を返します。\n"
"\n"
"もし与えられたハンドラが、マネージャにより前にインストールされて\n"
"いたら、この関数は`{:error, :already_present}`を返します。\n"

#. TRANSLATORS: def GenEvent.add_mon_handler(manager, handler, args)
#: lib/gen_event.ex:426
msgid ""
"Adds a monitored event handler to the event `manager`.\n"
"\n"
"Expects the same input and returns the same values as `add_handler/3`.\n"
"\n"
"## Monitored handlers\n"
"\n"
"A monitored handler implies the calling process will now be monitored\n"
"by the GenEvent manager.\n"
"\n"
"If the calling process later terminates with `reason`, the event manager\n"
"will delete the event handler by calling the `terminate/2` callback with\n"
"`{:stop, reason}` as argument. If the event handler later is deleted,\n"
"the event manager sends a message `{:gen_event_EXIT, handler, reason}`\n"
"to the calling process. Reason is one of the following:\n"
"\n"
"  * `:normal` - if the event handler has been removed due to a call to\n"
"    `remove_handler/3`, or `:remove_handler` has been returned by a "
"callback\n"
"    function\n"
"\n"
"  * `:shutdown` - if the event handler has been removed because the event\n"
"    manager is terminating\n"
"\n"
"  * `{:swapped, new_handler, pid}` - if the process pid has replaced the\n"
"    event handler by another\n"
"\n"
"  * a term - if the event handler is removed due to an error. Which term\n"
"    depends on the error\n"
"\n"
"Keep in mind that the `{:gen_event_EXIT, handler, reason}` message is not\n"
"guaranteed to be delivered in case the manager crashes. If you want to\n"
"guarantee the message is delivered, you have two options:\n"
"\n"
"  * monitor the event manager\n"
"  * link to the event manager and then set `Process.flag(:trap_exit, true)`\n"
"    in your handler callback\n"
"\n"
"Finally, this functionality only works with GenEvent started via this\n"
"module (it is not backwards compatible with Erlang's `:gen_event`).\n"
msgstr ""
"モニタされたイベントハンドラをイベント`manager`に追加します。\n"
"\n"
"`add_handler/3`と同じ入力と戻値を期待します。\n"
"\n"
"## Monitored handlers\n"
"\n"
"呼出し側プロセスが現在、GenEventマネージャによりモニタされている\n"
"ことを、モニタされたハンドラは意味します。\n"
"\n"
"もし呼出し側プロセスが後で`reason`で終了したら、イベントマネージャは、\n"
"引数として`{:stop, reason}`とともに、`terminate/2`コールバックを\n"
"呼び出すことにより、イベントハンドラを削除します。\n"
"\n"
"もしイベントハンドラが後で削除されたら、イベントマネージャは、\n"
"`{:gen_event_EXIT,handler, reason}`メッセージを、呼出し側プロセス\n"
"へ送信します。reasonは以下のいずれかです:\n"
"\n"
"  * `:normal` - イベントハンドラが、`remove_handler/3`の呼び出しにより\n"
"     削除されたか、あるいは、コールバック関数により、`:remove_handler`が\n"
"     戻されたか\n"
"\n"
"  * `:shutdown` - イベントマネージャが終了したことによりイベント\n"
"     ハンドラが削除された\n"
"\n"
"  * `{:swapped, new_handler, pid}` - 他のプロセスにより、イベント\n"
"     ハンドラのpidが置き換えられた\n"
"\n"
"  * a term - エラーによりイベントハンドラが削除された。termは\n"
"    エラーに依ります。\n"
"\n"
"マネージャがクラッシュする場合に、`{:gen_event_EXIT, handler, reason}`\n"
"メッセージが、届けられる保証がないことを、心にとめてください。\n"
"もしメッセージが届けられることを保証したいなら、二つのオプションが\n"
"あります:\n"
"\n"
"  * イベントマネージャをモニタします\n"
"  * イベントマネージャをリンクし、ハンドラコールバックで、\n"
"    `Process.flag(:trap_exit, true)`をセットします\n"
"\n"
"最後に、この機能は、このモジュールにより開始されるGenEventでのみ\n"
"動作します(Erlangの`:gen_event`との後方互換性はありません)。\n"

#. TRANSLATORS: Elixir.GenEvent Summary
#: lib/gen_event.ex:2
msgid ""
"A behaviour module for implementing event handling functionality.\n"
"\n"
"The event handling model consists of a generic event manager\n"
"process with an arbitrary number of event handlers which are\n"
"added and deleted dynamically.\n"
"\n"
"An event manager implemented using this module will have a standard\n"
"set of interface functions and include functionality for tracing and\n"
"error reporting. It will also fit into a supervision tree.\n"
"\n"
"## Example\n"
"\n"
"There are many use cases for event handlers. For example, a logging\n"
"system can be built using event handlers where each log message is\n"
"an event and different event handlers can be plugged to handle the\n"
"log messages. One handler may print error messages on the terminal,\n"
"another can write it to a file, while a third one can keep the\n"
"messages in memory (like a buffer) until they are read.\n"
"\n"
"As an example, let's have a GenEvent that accumulates messages until\n"
"they are collected by an explicit call.\n"
"\n"
"    defmodule LoggerHandler do\n"
"      use GenEvent\n"
"\n"
"      # Callbacks\n"
"\n"
"      def handle_event({:log, x}, messages) do\n"
"        {:ok, [x|messages]}\n"
"      end\n"
"\n"
"      def handle_call(:messages, messages) do\n"
"        {:ok, Enum.reverse(messages), []}\n"
"      end\n"
"    end\n"
"\n"
"    {:ok, pid} = GenEvent.start_link([])\n"
"\n"
"    GenEvent.add_handler(pid, LoggerHandler, [])\n"
"    #=> :ok\n"
"\n"
"    GenEvent.notify(pid, {:log, 1})\n"
"    #=> :ok\n"
"\n"
"    GenEvent.notify(pid, {:log, 2})\n"
"    #=> :ok\n"
"\n"
"    GenEvent.call(pid, LoggerHandler, :messages)\n"
"    #=> [1, 2]\n"
"\n"
"    GenEvent.call(pid, LoggerHandler, :messages)\n"
"    #=> []\n"
"\n"
"We start a new event manager by calling `GenEvent.start_link/1`.\n"
"Notifications can be sent to the event manager which will then\n"
"invoke `handle_event/2` for each registered handler.\n"
"\n"
"We can add new handlers with `add_handler/3` and `add_mon_handler/3`.\n"
"Calls can also be made to specific handlers by using `call/3`.\n"
"\n"
"## Callbacks\n"
"\n"
"There are 6 callbacks required to be implemented in a `GenEvent`. By\n"
"adding `use GenEvent` to your module, Elixir will automatically define\n"
"all 6 callbacks for you, leaving it up to you to implement the ones\n"
"you want to customize.\n"
"\n"
"## Name Registration\n"
"\n"
"A GenEvent is bound to the same name registration rules as a `GenServer`.\n"
"Read more about it in the `GenServer` docs.\n"
"\n"
"## Modes\n"
"\n"
"GenEvent stream supports three different notifications.\n"
"\n"
"On `GenEvent.ack_notify/2`, the manager acknowledges each event,\n"
"providing backpressure, but processing of the message happens\n"
"asynchronously.\n"
"\n"
"On `GenEvent.sync_notify/2`, the manager acknowledges an event\n"
"just after it was processed by all event handlers.\n"
"\n"
"On `GenEvent.notify/2`, all events are processed asynchronously and\n"
"there is no ack (which means there is no backpressure).\n"
"\n"
"## Streaming\n"
"\n"
"`GenEvent` messages can be streamed with the help of `stream/2`.\n"
"You will need to start another process to consume the stream:\n"
"\n"
"    Task.start_link fn ->\n"
"      stream = GenEvent.stream(pid)\n"
"\n"
"      # Discard the next 3 events\n"
"      _ = Enum.drop(stream, 3)\n"
"\n"
"      # Print all remaining events\n"
"      for event <- stream do\n"
"        IO.inspect event\n"
"      end\n"
"    end\n"
"\n"
"Now call `GenEvent.notify/2` multiple times. You will see the\n"
"first three events will be skipped while the rest will be\n"
"continuously printed.\n"
"\n"
"## Learn more and compatibility\n"
"\n"
"If you wish to find out more about gen events, Elixir getting started\n"
"guides provide a tutorial-like introduction. The documentation and links\n"
"in Erlang can also provide extra insight.\n"
"\n"
"  * [Introduction to Mix – Elixir's Getting Started Guide](http://elixir-"
"lang.org/getting-started/mix-otp/introduction-to-mix.html)\n"
"  * [`:gen_event` module documentation](http://www.erlang.org/doc/man/"
"gen_event.html)\n"
"  * [Event Handlers – Learn You Some Erlang for Great Good!](http://"
"learnyousomeerlang.com/event-handlers)\n"
"\n"
"Keep in mind though Elixir and Erlang gen events are not 100% compatible.\n"
"The `:gen_event.add_sup_handler/3` is not supported by Elixir's GenEvent,\n"
"which in turn supports `GenEvent.add_mon_handler/3`.\n"
"\n"
"The benefits of the monitoring approach are described in the \"Don't drink\n"
"too much kool aid\" section of the \"Learn you some Erlang\" link above. "
"Due\n"
"to those changes, Elixir's GenEvent does not trap exits by default.\n"
"\n"
"Furthermore, Elixir's also normalizes the `{:error, _}` tuples returned\n"
"by many functions, in order to be more consistent with themselves and\n"
"the `GenServer` module.\n"
msgstr ""
"イベントハンドリング機能を実装するためのビヘイビアモジュールです。\n"
"\n"
"動的に追加・削除を行われる、任意の数のイベントハンドラで、\n"
"イベント処理モデルは一般的なイベントマネージャプロセスから\n"
"なります。\n"
"\n"
"このモジュールを用いて実装されるイベントマネージャは、標準的な\n"
"インタフェース関数のセットを持ち、トレースとエラーレポートの為の\n"
"機能を含みます。\n"
"それはsupervisionツリーにも適合します。\n"
"\n"
"## Example\n"
"\n"
"イベントハンドラのための多くのユースケースがあります。例えば、\n"
"各のログメッセージがイベントであるイベントハンドラを用いて、\n"
"ログシステムは構築することができ、異るログメッセージを処理する\n"
"イベントハンドラをプラグすることも出来ます。\n"
"一つのハンドラはエラーメッセージをターミナルに印字し、\n"
"もう一つのものはファイルに書き込み、第3のものは(バッファのような)\n"
"メモリに、それらが読まれるまで、保存しておくことが出来ます。\n"
"\n"
"例として、明示的に呼び出すまで、メッセージを集めるGenEventを作ってみま\n"
"しょう。\n"
"\n"
"    defmodule LoggerHandler do\n"
"      use GenEvent\n"
"\n"
"      # Callbacks\n"
"\n"
"      def handle_event({:log, x}, messages) do\n"
"        {:ok, [x|messages]}\n"
"      end\n"
"\n"
"      def handle_call(:messages, messages) do\n"
"        {:ok, Enum.reverse(messages), []}\n"
"      end\n"
"    end\n"
"\n"
"    {:ok, pid} = GenEvent.start_link()\n"
"\n"
"    GenEvent.add_handler(pid, LoggerHandler, [])\n"
"    #=> :ok\n"
"\n"
"    GenEvent.notify(pid, {:log, 1})\n"
"    #=> :ok\n"
"\n"
"    GenEvent.notify(pid, {:log, 2})\n"
"    #=> :ok\n"
"\n"
"    GenEvent.call(pid, LoggerHandler, :messages)\n"
"    #=> [1, 2]\n"
"\n"
"    GenEvent.call(pid, LoggerHandler, :messages)\n"
"    #=> []\n"
"\n"
"私達は`GenEvent.start_link/1`を呼ぶことで、新しいイベントマネージャを\n"
"開始します。\n"
"それから、登録されたハンドラ毎に`handle_event/2`を実行するイベント\n"
"マネージャに通知を送ることができます。\n"
"\n"
"私達は`add_handler/3`と`add_mon_handler/3`で新しいハンドラを\n"
"追加します。`call/3`を使って特定のハンドラを呼び出すことがで\n"
"きます。\n"
"\n"
"## Callbacks\n"
"\n"
"`GenEvent`で実装することが要求されている6個のコールバックがあります。\n"
"`use GenEvent`をあなたのモジュールに追加することにより、Elixir自動的に\n"
"6個のコールバックを定義し、カスタマイズしたいものの実装をあなたに任せます。\n"
"\n"
"## Name Registration\n"
"\n"
"GenEventは`GenServer`と同じ名前登録規則に従います。\n"
"それについてはの詳細は、`GenServer`のドキュメントを参照してください。\n"
"\n"
"## Modes\n"
"\n"
"GenEventストリームは3つの異る通知をサポートします。\n"
"\n"
"`GenEvent.ack_notiry/2`では、マネージャがそれぞれのイベントをack\n"
"するバックプレッシャーを提供しますが、メッセージの処理は非同期で\n"
"起ります。\n"
"\n"
"`GenEvent.sync_notiry/2`では、マネージャが、全てのイベントハンド\n"
"ラにより処理されたあと、それぞれのイベントをackします。\n"
"\n"
"`GenEvent.notify/2`では、全てのイベントは非同期で処理され、\n"
"ackはありません(バックプレッシャーがないことを意味します)。\n"
"\n"
"## Streaming\n"
"\n"
"`GenEvent`メッセージは`stream/2`の助けを借りて、ストリーム化\n"
"出来ます:\n"
"\n"
"    Task.start_link fn ->\n"
"      stream = GenEvent.stream(pid)\n"
"\n"
"      # Discard the next 3 events\n"
"      _ = Enum.drop(stream, 3)\n"
"\n"
"      # Print all remaining events\n"
"      for event <- stream do\n"
"        IO.inspect event\n"
"      end\n"
"    end\n"
"\n"
"この状態で`GenEvent.notify/2`は複数回呼出すと、\n"
"最初の3つのイベントはスキップされ、残りのイベントが\n"
"継続的に表示されるのを見ることになるでしょう。\n"
"\n"
"## Learn more and compatibility\n"
"\n"
"gen eventについてもっと知りたいなら、Elixir getting started guide\n"
"がチュートリアルライクの導入を提供します。Erlangのドキュメントとリンク\n"
"もまた、追加の洞察を提供することができます。\n"
"\n"
" * [Introduction to Mix – Elixir's Getting Started Guide](http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html)\n"
" * [`:gen_event` module documentation](http://www.erlang.org/doc/man/gen_event.html)\n"
" * [Event Handlers – Learn You Some Erlang for Great Good!](http://learnyousomeerlang.com/event-handlers)\n"
"\n"
"ElixirとErlangのgen eventは100%の互換性がないことを心に留めてお\n"
"いてください。\n"
"`:gen_event.add_sup_handler/3`はElixirのGenEventではサポートされません、\n"
"代わりに`GenEvent.add_mon_handler/3`をサポートします。\n"
"\n"
"モニタアプローチの利点は上のリンク \"Learn you some Erlang\" の \"Don't\n"
"drink too much kool aid\" セクションに記述されています。それらの変更によ\n"
"り、ElixirのGenEventはデフォルトではexitをトラップしません。\n"
"\n"
"さらにまた、Elixirは、それら自身と`GenServer`モジュールとをあ\n"
"わせるために、多くの関数により返される`{:error, _}`タプルを正\n"
"規化します。\n"
