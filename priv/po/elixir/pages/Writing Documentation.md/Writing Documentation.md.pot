#: deps/elixir/lib/elixir/pages/Writing Documentation.md:1
msgid "# Writing Documentation"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:3
msgid "Elixir treats documentation as a first-class citizen. This means documentation should be easy to write and easy to read. In this document you will learn how to write documentation in Elixir, covering constructs like module attributes, style practices and doctests."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:5
msgid "## Markdown"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:7
msgid "Elixir documentation is written using Markdown. There are plenty of guides on Markdown online, we recommend the ones available at GitHub as a getting started point:"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:9
msgid ""
"  * https://help.github.com/articles/markdown-basics/\n"
"  * https://help.github.com/articles/github-flavored-markdown/"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:12
msgid "## Module Attributes"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:14
msgid "Documentation in Elixir is usually attached to module attributes. Let's see an example:"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:37
msgid "The `@moduledoc` attribute is used to add documentation to the module. `@doc` is used before a function to provide documentation for it. Besides the attributes above, `@typedoc` can also be used to attach documentation to types defined as part of typespecs."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:39
msgid "## Function Arguments"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:41
msgid "When documenting a function, argument names are inferred by the compiler. For example:"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:47
msgid "The compiler will infer this argument as `hash_dict`. Sometimes the inference will be suboptimal, specially if the function contains multiple clauses with the argument matching on different values each time. You can specify the proper names for documentation by using a bodyless clause:"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:51
msgid "## Recommendations"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:53
msgid "There are a couple tips we recommend developers to follow when writing documentation:"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:55
msgid "  * Keep the first paragraph of the documentation concise and simple, typically one-line. Tools like ExDoc uses the first line to generate a summary."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:57
msgid "  * Markdown uses backticks (`` ` ``) to quote code. Elixir builds on top of that to automatically generate links when modules or function names are referenced. For this reason, always use full module names. If you have a module called `MyApp.Hello`, always reference it as `` `MyApp.Hello` `` and never as `` `Hello` ``. Function names must be referenced by name and arity if they are local, as in `` `world/1` ``, or by module, name and arity if pointing to an external module: `` `MyApp.Hello.world/1` ``. Referencing a `@callback` can be done by prepending `c:`, as in `` `c:world/1` ``."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:59
msgid "  * When using headings, always start from the second heading by using `##`. The first heading is reserved to the module or function name itself."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:61
msgid "## Doctests"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:63
msgid "We recommend developers to include examples in their documentation, often under its own `## Examples` heading. To ensure examples do not get out of date, Elixir's test framework (ExUnit) provides a feature called doctests that allows developers to test the examples in their documentation. Doctests work by parsing out code samples starting with `iex>` from the documentation. You can read more about it at `ExUnit.DocTest`."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:65
msgid "Notice doctests have limitations. When you cannot doctest a function, because it relies on state or side-effects, we recommend developers to include examples directly without the `iex>` prompt."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:67
msgid "## Privacy"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:69
msgid "Elixir allows developers to hide both modules and functions from the documentation by setting the doc attribute to false:"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:79
msgid "Notice that, although developers can add `@doc false` to functions, it does not make the function private:"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:86
msgid "The function above can still be invoked as `MyApp.Sample.add(1, 2)`. Not only that, if the `MyApp.Sample` is imported, the `add/2` function will also be imported into the caller. For those reasons, be cautious when adding `@doc false` to functions, instead prefer one of:"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:88
msgid "  * Move the undocumented function to a module with `@moduledoc false`, like `MyApp.Hidden`, ensuring the function won't be accidentally exposed or imported. In fact, you can use `@moduledoc false` to hide a whole module and still document each function with `@doc`. Tools will still ignore the module."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:90
msgid "  * Start the function name with underscores, for example, `__add__/2`, and add `@doc false`. The compiler does not import functions with underscore and the underscore will hint users to be wary of using then."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:92
msgid "## Documentation != Comments"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:94
msgid "Elixir treats documentation and code comments as different concepts. Documentation are for users of your API, be it your co-worker or your future self. Modules and functions must always be documented if they are part of your application public interface (API)."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:96
msgid "Code comments are for developers reading the code. They are useful to mark improvements, leave notes for developers reading the code (for example, you decided to not call a function due to a bug in a library) and so forth."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:98
msgid "In other words, documentation is required, code comments are optional."
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:100
msgid "## Code.get_docs/2"
msgstr ""

#: deps/elixir/lib/elixir/pages/Writing Documentation.md:102
msgid ""
"Elixir stores documentation inside pre-defined chunks in the bytecode. It can be accessed from Elixir by using the `Code.get_docs/2` function. This also means documentation is only accessed when required and not when modules are loaded by the Virtual Machine. The only downside is that modules defined in-memory, like the ones defined in IEx, cannot have their documentation accessed as they do not have their bytecode written to disk.\n"
""
msgstr ""

