#: deps/elixir/lib/elixir/pages/Typespecs.md:1
msgid "# Typespecs"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:3
msgid "Elixir comes with a notation for declaring types and specifications. Elixir is dynamically typed, and as such, typespecs are never used by the compiler to optimize or modify code. Still, using typespecs is useful as documentation and tools such as [Dialyzer](http://www.erlang.org/doc/man/dialyzer.html) can analyze code with typespecs to find bugs."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:5
msgid "The attributes `@type`, `@opaque`, `@typep`, `@spec`, `@callback` and `@macrocallback` are the main mechanism for defining typespecs. See sub-sections \"Defining a type\" and \"Defining a specification\" below."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:7
msgid "## Types and their syntax"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:9
msgid "The type syntax provided by Elixir is fairly similar to [the one in Erlang](http://www.erlang.org/doc/reference_manual/typespec.html)."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:11
msgid "Most of the built-in types provided in Erlang (for example, `pid()`) are expressed the same way: `pid()` or simply `pid`. Parameterized types are also supported (`list(integer)`) and so are remote types (`Enum.t`)."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:13
msgid "Integers and atom literals are allowed as types (ex. `1`, `:atom` or `false`). All other types are built of unions of predefined types. Certain shorthands are allowed, such as `[...]`, `<<>>` and `{...}`."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:15
msgid "### Basic types"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:39
msgid "### Literals"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:41
msgid "The following literals are also supported in typespecs:"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:73
msgid "### Built-in types"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:75
msgid "These types are also provided by Elixir as shortcuts on top of the basic and literal types."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:77
msgid ""
"Built-in type           | Defined as\n"
":---------------------- | :---------\n"
"`term()`                | `any()`\n"
"`binary()`              | `<<_::_ * 8>>`\n"
"`bitstring()`           | `<<_::_ * 1>>`\n"
"`boolean()`             | `false` \\| `true`\n"
"`byte()`                | `0..255`\n"
"`char()`                | `0..0x10ffff`\n"
"`number()`              | `integer()` \\| `float()`\n"
"`char_list()`           | `[char()]`\n"
"`list()`                | `[any()]`\n"
"`maybe_improper_list()` | `maybe_improper_list(any(), any())`\n"
"`nonempty_list()`       | `nonempty_list(any())`\n"
"`iolist()`              | `maybe_improper_list(byte() \\| binary() \\| iolist(), binary() \\| [])`\n"
"`iodata()`              | `iolist()` \\| `binary()`\n"
"`module()`              | `atom()` \\| `tuple()`\n"
"`arity()`               | `0..255`\n"
"`mfa()`                 | `{atom(), atom(), arity()}`\n"
"`identifier()`          | `pid()` \\| `port()` \\| `reference()`\n"
"`node()`                | `atom()`\n"
"`timeout()`             | `:infinity` \\| `non_neg_integer()`\n"
"`no_return()`           | `none()`\n"
"`fun()`                 | `(... -> any)`\n"
"`struct()`              | `%{__struct__: atom()}`\n"
"`as_boolean(t)`         | `t`"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:103
msgid "### Remote types"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:105
msgid "Any module is also able to define its own type and the modules in Elixir are no exception. For example, a string is `String.t`, a range is `Range.t`, any enumerable can be `Enum.t` and so on."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:107
msgid "## Defining a type"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:113
msgid "A type defined with `@typep` is private. An opaque type, defined with `@opaque` is a type where the internal structure of the type will not be visible, but the type is still public."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:115
msgid "Types can be parameterized by defining variables as parameters, these variables can then be used to define the type."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:119
msgid "## Defining a specification"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:125
msgid "Callbacks are used to define the callbacks functions of behaviours (see `Behaviour`)."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:127
msgid "Guards can be used to restrict type variables given as arguments to the function."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:131
msgid "Type variables with no restriction can also be defined."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:135
msgid "Specifications can be overloaded just like ordinary functions."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:140
msgid "## Notes"
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:142
msgid "Elixir discourages the use of type `string` as it might be confused with binaries which are referred to as \"strings\" in Elixir (as opposed to character lists). In order to use the type that is called `string` in Erlang, one has to use the `char_list` type which is a synonym for `string`. If you use `string`, you'll get a warning from the compiler."
msgstr ""

#: deps/elixir/lib/elixir/pages/Typespecs.md:144
msgid ""
"If you want to refer to the \"string\" type (the one operated on by functions in the `String` module), use `String.t` type instead.\n"
""
msgstr ""

